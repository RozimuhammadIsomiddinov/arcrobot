(function (React$3, designSystem, reactRouterDom) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React$3);

  const CustomDashboard = () => {
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      flex: true,
      flexDirection: "column",
      alignItems: "center",
      justifyContent: "center",
      p: "xl",
      style: {
        minHeight: "100vh",
        background: "linear-gradient(135deg, #74ebd5 0%, #9face6 100%)",
        textAlign: "center"
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.H1, {
      style: {
        color: "#2c3e50",
        fontWeight: "bold",
        fontSize: "clamp(24px, 5vw, 42px)",
        // telefon / desktop moslashuvchan
        marginBottom: "20px"
      }
    }, "\uD83D\uDC4B \u0414\u043E\u0431\u0440\u043E \u043F\u043E\u0436\u0430\u043B\u043E\u0432\u0430\u0442\u044C \u0432 \u043F\u0430\u043D\u0435\u043B\u044C Arcbot Admin"), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      fontSize: "clamp(16px, 3vw, 20px)",
      style: {
        color: "#333",
        maxWidth: "600px",
        lineHeight: "1.6"
      }
    }, "\u0417\u0434\u0435\u0441\u044C \u0432\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0443\u0432\u0438\u0434\u0435\u0442\u044C \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u0435\u043B\u0438 \u0441\u0438\u0441\u0442\u0435\u043C\u044B \u0438 \u0443\u043F\u0440\u0430\u0432\u043B\u044F\u0442\u044C \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u043E\u043C \u0432 \u0443\u0434\u043E\u0431\u043D\u043E\u043C \u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435, \u0430\u0434\u0430\u043F\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u043E\u043C \u043F\u043E\u0434 \u043B\u044E\u0431\u043E\u0435 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u043E \uD83D\uDCBB"));
  };

  function bind(fn, thisArg) {
    return function wrap() {
      return fn.apply(thisArg, arguments);
    };
  }

  // utils is a library of generic helper functions non-specific to axios

  const {toString} = Object.prototype;
  const {getPrototypeOf} = Object;
  const {iterator, toStringTag} = Symbol;

  const kindOf = (cache => thing => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  })(Object.create(null));

  const kindOfTest = (type) => {
    type = type.toLowerCase();
    return (thing) => kindOf(thing) === type
  };

  const typeOfTest = type => thing => typeof thing === type;

  /**
   * Determine if a value is an Array
   *
   * @param {Object} val The value to test
   *
   * @returns {boolean} True if value is an Array, otherwise false
   */
  const {isArray: isArray$1} = Array;

  /**
   * Determine if a value is undefined
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if the value is undefined, otherwise false
   */
  const isUndefined = typeOfTest('undefined');

  /**
   * Determine if a value is a Buffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Buffer, otherwise false
   */
  function isBuffer$1(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
      && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }

  /**
   * Determine if a value is an ArrayBuffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is an ArrayBuffer, otherwise false
   */
  const isArrayBuffer = kindOfTest('ArrayBuffer');


  /**
   * Determine if a value is a view on an ArrayBuffer
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
   */
  function isArrayBufferView(val) {
    let result;
    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
      result = ArrayBuffer.isView(val);
    } else {
      result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
    }
    return result;
  }

  /**
   * Determine if a value is a String
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a String, otherwise false
   */
  const isString = typeOfTest('string');

  /**
   * Determine if a value is a Function
   *
   * @param {*} val The value to test
   * @returns {boolean} True if value is a Function, otherwise false
   */
  const isFunction$1 = typeOfTest('function');

  /**
   * Determine if a value is a Number
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Number, otherwise false
   */
  const isNumber = typeOfTest('number');

  /**
   * Determine if a value is an Object
   *
   * @param {*} thing The value to test
   *
   * @returns {boolean} True if value is an Object, otherwise false
   */
  const isObject$1 = (thing) => thing !== null && typeof thing === 'object';

  /**
   * Determine if a value is a Boolean
   *
   * @param {*} thing The value to test
   * @returns {boolean} True if value is a Boolean, otherwise false
   */
  const isBoolean = thing => thing === true || thing === false;

  /**
   * Determine if a value is a plain Object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a plain Object, otherwise false
   */
  const isPlainObject$1 = (val) => {
    if (kindOf(val) !== 'object') {
      return false;
    }

    const prototype = getPrototypeOf(val);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(toStringTag in val) && !(iterator in val);
  };

  /**
   * Determine if a value is an empty object (safely handles Buffers)
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is an empty object, otherwise false
   */
  const isEmptyObject = (val) => {
    // Early return for non-objects or Buffers to prevent RangeError
    if (!isObject$1(val) || isBuffer$1(val)) {
      return false;
    }
    
    try {
      return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;
    } catch (e) {
      // Fallback for any other objects that might cause RangeError with Object.keys()
      return false;
    }
  };

  /**
   * Determine if a value is a Date
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Date, otherwise false
   */
  const isDate = kindOfTest('Date');

  /**
   * Determine if a value is a File
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a File, otherwise false
   */
  const isFile = kindOfTest('File');

  /**
   * Determine if a value is a Blob
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Blob, otherwise false
   */
  const isBlob = kindOfTest('Blob');

  /**
   * Determine if a value is a FileList
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a File, otherwise false
   */
  const isFileList = kindOfTest('FileList');

  /**
   * Determine if a value is a Stream
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a Stream, otherwise false
   */
  const isStream = (val) => isObject$1(val) && isFunction$1(val.pipe);

  /**
   * Determine if a value is a FormData
   *
   * @param {*} thing The value to test
   *
   * @returns {boolean} True if value is an FormData, otherwise false
   */
  const isFormData = (thing) => {
    let kind;
    return thing && (
      (typeof FormData === 'function' && thing instanceof FormData) || (
        isFunction$1(thing.append) && (
          (kind = kindOf(thing)) === 'formdata' ||
          // detect form-data instance
          (kind === 'object' && isFunction$1(thing.toString) && thing.toString() === '[object FormData]')
        )
      )
    )
  };

  /**
   * Determine if a value is a URLSearchParams object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a URLSearchParams object, otherwise false
   */
  const isURLSearchParams = kindOfTest('URLSearchParams');

  const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

  /**
   * Trim excess whitespace off the beginning and end of a string
   *
   * @param {String} str The String to trim
   *
   * @returns {String} The String freed of excess whitespace
   */
  const trim = (str) => str.trim ?
    str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

  /**
   * Iterate over an Array or an Object invoking a function for each item.
   *
   * If `obj` is an Array callback will be called passing
   * the value, index, and complete array for each item.
   *
   * If 'obj' is an Object callback will be called passing
   * the value, key, and complete object for each property.
   *
   * @param {Object|Array} obj The object to iterate
   * @param {Function} fn The callback to invoke for each item
   *
   * @param {Boolean} [allOwnKeys = false]
   * @returns {any}
   */
  function forEach(obj, fn, {allOwnKeys = false} = {}) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') {
      return;
    }

    let i;
    let l;

    // Force an array if not already something iterable
    if (typeof obj !== 'object') {
      /*eslint no-param-reassign:0*/
      obj = [obj];
    }

    if (isArray$1(obj)) {
      // Iterate over array values
      for (i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      // Buffer check
      if (isBuffer$1(obj)) {
        return;
      }

      // Iterate over object keys
      const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys.length;
      let key;

      for (i = 0; i < len; i++) {
        key = keys[i];
        fn.call(null, obj[key], key, obj);
      }
    }
  }

  function findKey(obj, key) {
    if (isBuffer$1(obj)){
      return null;
    }

    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while (i-- > 0) {
      _key = keys[i];
      if (key === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }

  const _global = (() => {
    /*eslint no-undef:0*/
    if (typeof globalThis !== "undefined") return globalThis;
    return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
  })();

  const isContextDefined = (context) => !isUndefined(context) && context !== _global;

  /**
   * Accepts varargs expecting each argument to be an object, then
   * immutably merges the properties of each object and returns result.
   *
   * When multiple objects contain the same key the later object in
   * the arguments list will take precedence.
   *
   * Example:
   *
   * ```js
   * var result = merge({foo: 123}, {foo: 456});
   * console.log(result.foo); // outputs 456
   * ```
   *
   * @param {Object} obj1 Object to merge
   *
   * @returns {Object} Result of all merge properties
   */
  function merge$1(/* obj1, obj2, obj3, ... */) {
    const {caseless} = isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key) => {
      const targetKey = caseless && findKey(result, key) || key;
      if (isPlainObject$1(result[targetKey]) && isPlainObject$1(val)) {
        result[targetKey] = merge$1(result[targetKey], val);
      } else if (isPlainObject$1(val)) {
        result[targetKey] = merge$1({}, val);
      } else if (isArray$1(val)) {
        result[targetKey] = val.slice();
      } else {
        result[targetKey] = val;
      }
    };

    for (let i = 0, l = arguments.length; i < l; i++) {
      arguments[i] && forEach(arguments[i], assignValue);
    }
    return result;
  }

  /**
   * Extends object a by mutably adding to it the properties of object b.
   *
   * @param {Object} a The object to be extended
   * @param {Object} b The object to copy properties from
   * @param {Object} thisArg The object to bind function to
   *
   * @param {Boolean} [allOwnKeys]
   * @returns {Object} The resulting value of object a
   */
  const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
    forEach(b, (val, key) => {
      if (thisArg && isFunction$1(val)) {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    }, {allOwnKeys});
    return a;
  };

  /**
   * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
   *
   * @param {string} content with BOM
   *
   * @returns {string} content value without BOM
   */
  const stripBOM = (content) => {
    if (content.charCodeAt(0) === 0xFEFF) {
      content = content.slice(1);
    }
    return content;
  };

  /**
   * Inherit the prototype methods from one constructor into another
   * @param {function} constructor
   * @param {function} superConstructor
   * @param {object} [props]
   * @param {object} [descriptors]
   *
   * @returns {void}
   */
  const inherits = (constructor, superConstructor, props, descriptors) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, 'super', {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };

  /**
   * Resolve object with deep prototype chain to a flat object
   * @param {Object} sourceObj source object
   * @param {Object} [destObj]
   * @param {Function|Boolean} [filter]
   * @param {Function} [propFilter]
   *
   * @returns {Object}
   */
  const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
    let props;
    let i;
    let prop;
    const merged = {};

    destObj = destObj || {};
    // eslint-disable-next-line no-eq-null,eqeqeq
    if (sourceObj == null) return destObj;

    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i = props.length;
      while (i-- > 0) {
        prop = props[i];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

    return destObj;
  };

  /**
   * Determines whether a string ends with the characters of a specified string
   *
   * @param {String} str
   * @param {String} searchString
   * @param {Number} [position= 0]
   *
   * @returns {boolean}
   */
  const endsWith = (str, searchString, position) => {
    str = String(str);
    if (position === undefined || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };


  /**
   * Returns new array from array like object or null if failed
   *
   * @param {*} [thing]
   *
   * @returns {?Array}
   */
  const toArray = (thing) => {
    if (!thing) return null;
    if (isArray$1(thing)) return thing;
    let i = thing.length;
    if (!isNumber(i)) return null;
    const arr = new Array(i);
    while (i-- > 0) {
      arr[i] = thing[i];
    }
    return arr;
  };

  /**
   * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
   * thing passed in is an instance of Uint8Array
   *
   * @param {TypedArray}
   *
   * @returns {Array}
   */
  // eslint-disable-next-line func-names
  const isTypedArray$1 = (TypedArray => {
    // eslint-disable-next-line func-names
    return thing => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

  /**
   * For each entry in the object, call the function with the key and value.
   *
   * @param {Object<any, any>} obj - The object to iterate over.
   * @param {Function} fn - The function to call for each entry.
   *
   * @returns {void}
   */
  const forEachEntry = (obj, fn) => {
    const generator = obj && obj[iterator];

    const _iterator = generator.call(obj);

    let result;

    while ((result = _iterator.next()) && !result.done) {
      const pair = result.value;
      fn.call(obj, pair[0], pair[1]);
    }
  };

  /**
   * It takes a regular expression and a string, and returns an array of all the matches
   *
   * @param {string} regExp - The regular expression to match against.
   * @param {string} str - The string to search.
   *
   * @returns {Array<boolean>}
   */
  const matchAll = (regExp, str) => {
    let matches;
    const arr = [];

    while ((matches = regExp.exec(str)) !== null) {
      arr.push(matches);
    }

    return arr;
  };

  /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
  const isHTMLForm = kindOfTest('HTMLFormElement');

  const toCamelCase = str => {
    return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
      function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };

  /* Creating a function that will check if an object has a property. */
  const hasOwnProperty$d = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

  /**
   * Determine if a value is a RegExp object
   *
   * @param {*} val The value to test
   *
   * @returns {boolean} True if value is a RegExp object, otherwise false
   */
  const isRegExp = kindOfTest('RegExp');

  const reduceDescriptors = (obj, reducer) => {
    const descriptors = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};

    forEach(descriptors, (descriptor, name) => {
      let ret;
      if ((ret = reducer(descriptor, name, obj)) !== false) {
        reducedDescriptors[name] = ret || descriptor;
      }
    });

    Object.defineProperties(obj, reducedDescriptors);
  };

  /**
   * Makes all methods read-only
   * @param {Object} obj
   */

  const freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name) => {
      // skip restricted props in strict mode
      if (isFunction$1(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
        return false;
      }

      const value = obj[name];

      if (!isFunction$1(value)) return;

      descriptor.enumerable = false;

      if ('writable' in descriptor) {
        descriptor.writable = false;
        return;
      }

      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error('Can not rewrite read-only method \'' + name + '\'');
        };
      }
    });
  };

  const toObjectSet = (arrayOrString, delimiter) => {
    const obj = {};

    const define = (arr) => {
      arr.forEach(value => {
        obj[value] = true;
      });
    };

    isArray$1(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

    return obj;
  };

  const noop = () => {};

  const toFiniteNumber = (value, defaultValue) => {
    return value != null && Number.isFinite(value = +value) ? value : defaultValue;
  };

  /**
   * If the thing is a FormData object, return true, otherwise return false.
   *
   * @param {unknown} thing - The thing to check.
   *
   * @returns {boolean}
   */
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction$1(thing.append) && thing[toStringTag] === 'FormData' && thing[iterator]);
  }

  const toJSONObject = (obj) => {
    const stack = new Array(10);

    const visit = (source, i) => {

      if (isObject$1(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }

        //Buffer check
        if (isBuffer$1(source)) {
          return source;
        }

        if(!('toJSON' in source)) {
          stack[i] = source;
          const target = isArray$1(source) ? [] : {};

          forEach(source, (value, key) => {
            const reducedValue = visit(value, i + 1);
            !isUndefined(reducedValue) && (target[key] = reducedValue);
          });

          stack[i] = undefined;

          return target;
        }
      }

      return source;
    };

    return visit(obj, 0);
  };

  const isAsyncFn = kindOfTest('AsyncFunction');

  const isThenable = (thing) =>
    thing && (isObject$1(thing) || isFunction$1(thing)) && isFunction$1(thing.then) && isFunction$1(thing.catch);

  // original code
  // https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

  const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
    if (setImmediateSupported) {
      return setImmediate;
    }

    return postMessageSupported ? ((token, callbacks) => {
      _global.addEventListener("message", ({source, data}) => {
        if (source === _global && data === token) {
          callbacks.length && callbacks.shift()();
        }
      }, false);

      return (cb) => {
        callbacks.push(cb);
        _global.postMessage(token, "*");
      }
    })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
  })(
    typeof setImmediate === 'function',
    isFunction$1(_global.postMessage)
  );

  const asap = typeof queueMicrotask !== 'undefined' ?
    queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);

  // *********************


  const isIterable = (thing) => thing != null && isFunction$1(thing[iterator]);


  var utils$4 = {
    isArray: isArray$1,
    isArrayBuffer,
    isBuffer: isBuffer$1,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber,
    isBoolean,
    isObject: isObject$1,
    isPlainObject: isPlainObject$1,
    isEmptyObject,
    isReadableStream,
    isRequest,
    isResponse,
    isHeaders,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction: isFunction$1,
    isStream,
    isURLSearchParams,
    isTypedArray: isTypedArray$1,
    isFileList,
    forEach,
    merge: merge$1,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty: hasOwnProperty$d,
    hasOwnProp: hasOwnProperty$d, // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable,
    setImmediate: _setImmediate,
    asap,
    isIterable
  };

  /**
   * Create an Error with the specified message, config, error code, request and response.
   *
   * @param {string} message The error message.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [config] The config.
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   *
   * @returns {Error} The created error.
   */
  function AxiosError$1(message, code, config, request, response) {
    Error.call(this);

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = (new Error()).stack;
    }

    this.message = message;
    this.name = 'AxiosError';
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    if (response) {
      this.response = response;
      this.status = response.status ? response.status : null;
    }
  }

  utils$4.inherits(AxiosError$1, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: utils$4.toJSONObject(this.config),
        code: this.code,
        status: this.status
      };
    }
  });

  const prototype$1 = AxiosError$1.prototype;
  const descriptors = {};

  [
    'ERR_BAD_OPTION_VALUE',
    'ERR_BAD_OPTION',
    'ECONNABORTED',
    'ETIMEDOUT',
    'ERR_NETWORK',
    'ERR_FR_TOO_MANY_REDIRECTS',
    'ERR_DEPRECATED',
    'ERR_BAD_RESPONSE',
    'ERR_BAD_REQUEST',
    'ERR_CANCELED',
    'ERR_NOT_SUPPORT',
    'ERR_INVALID_URL'
  // eslint-disable-next-line func-names
  ].forEach(code => {
    descriptors[code] = {value: code};
  });

  Object.defineProperties(AxiosError$1, descriptors);
  Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

  // eslint-disable-next-line func-names
  AxiosError$1.from = (error, code, config, request, response, customProps) => {
    const axiosError = Object.create(prototype$1);

    utils$4.toFlatObject(error, axiosError, function filter(obj) {
      return obj !== Error.prototype;
    }, prop => {
      return prop !== 'isAxiosError';
    });

    AxiosError$1.call(axiosError, error.message, code, config, request, response);

    axiosError.cause = error;

    axiosError.name = error.name;

    customProps && Object.assign(axiosError, customProps);

    return axiosError;
  };

  // eslint-disable-next-line strict
  var httpAdapter = null;

  /**
   * Determines if the given thing is a array or js object.
   *
   * @param {string} thing - The object or array to be visited.
   *
   * @returns {boolean}
   */
  function isVisitable(thing) {
    return utils$4.isPlainObject(thing) || utils$4.isArray(thing);
  }

  /**
   * It removes the brackets from the end of a string
   *
   * @param {string} key - The key of the parameter.
   *
   * @returns {string} the key without the brackets.
   */
  function removeBrackets(key) {
    return utils$4.endsWith(key, '[]') ? key.slice(0, -2) : key;
  }

  /**
   * It takes a path, a key, and a boolean, and returns a string
   *
   * @param {string} path - The path to the current key.
   * @param {string} key - The key of the current object being iterated over.
   * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
   *
   * @returns {string} The path to the current key.
   */
  function renderKey(path, key, dots) {
    if (!path) return key;
    return path.concat(key).map(function each(token, i) {
      // eslint-disable-next-line no-param-reassign
      token = removeBrackets(token);
      return !dots && i ? '[' + token + ']' : token;
    }).join(dots ? '.' : '');
  }

  /**
   * If the array is an array and none of its elements are visitable, then it's a flat array.
   *
   * @param {Array<any>} arr - The array to check
   *
   * @returns {boolean}
   */
  function isFlatArray(arr) {
    return utils$4.isArray(arr) && !arr.some(isVisitable);
  }

  const predicates = utils$4.toFlatObject(utils$4, {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
  });

  /**
   * Convert a data object to FormData
   *
   * @param {Object} obj
   * @param {?Object} [formData]
   * @param {?Object} [options]
   * @param {Function} [options.visitor]
   * @param {Boolean} [options.metaTokens = true]
   * @param {Boolean} [options.dots = false]
   * @param {?Boolean} [options.indexes = false]
   *
   * @returns {Object}
   **/

  /**
   * It converts an object into a FormData object
   *
   * @param {Object<any, any>} obj - The object to convert to form data.
   * @param {string} formData - The FormData object to append to.
   * @param {Object<string, any>} options
   *
   * @returns
   */
  function toFormData$1(obj, formData, options) {
    if (!utils$4.isObject(obj)) {
      throw new TypeError('target must be an object');
    }

    // eslint-disable-next-line no-param-reassign
    formData = formData || new (FormData)();

    // eslint-disable-next-line no-param-reassign
    options = utils$4.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      return !utils$4.isUndefined(source[option]);
    });

    const metaTokens = options.metaTokens;
    // eslint-disable-next-line no-use-before-define
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
    const useBlob = _Blob && utils$4.isSpecCompliantForm(formData);

    if (!utils$4.isFunction(visitor)) {
      throw new TypeError('visitor must be a function');
    }

    function convertValue(value) {
      if (value === null) return '';

      if (utils$4.isDate(value)) {
        return value.toISOString();
      }

      if (utils$4.isBoolean(value)) {
        return value.toString();
      }

      if (!useBlob && utils$4.isBlob(value)) {
        throw new AxiosError$1('Blob is not supported. Use a Buffer instead.');
      }

      if (utils$4.isArrayBuffer(value) || utils$4.isTypedArray(value)) {
        return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
      }

      return value;
    }

    /**
     * Default visitor.
     *
     * @param {*} value
     * @param {String|Number} key
     * @param {Array<String|Number>} path
     * @this {FormData}
     *
     * @returns {boolean} return true to visit the each prop of the value recursively
     */
    function defaultVisitor(value, key, path) {
      let arr = value;

      if (value && !path && typeof value === 'object') {
        if (utils$4.endsWith(key, '{}')) {
          // eslint-disable-next-line no-param-reassign
          key = metaTokens ? key : key.slice(0, -2);
          // eslint-disable-next-line no-param-reassign
          value = JSON.stringify(value);
        } else if (
          (utils$4.isArray(value) && isFlatArray(value)) ||
          ((utils$4.isFileList(value) || utils$4.endsWith(key, '[]')) && (arr = utils$4.toArray(value))
          )) {
          // eslint-disable-next-line no-param-reassign
          key = removeBrackets(key);

          arr.forEach(function each(el, index) {
            !(utils$4.isUndefined(el) || el === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
              convertValue(el)
            );
          });
          return false;
        }
      }

      if (isVisitable(value)) {
        return true;
      }

      formData.append(renderKey(path, key, dots), convertValue(value));

      return false;
    }

    const stack = [];

    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });

    function build(value, path) {
      if (utils$4.isUndefined(value)) return;

      if (stack.indexOf(value) !== -1) {
        throw Error('Circular reference detected in ' + path.join('.'));
      }

      stack.push(value);

      utils$4.forEach(value, function each(el, key) {
        const result = !(utils$4.isUndefined(el) || el === null) && visitor.call(
          formData, el, utils$4.isString(key) ? key.trim() : key, path, exposedHelpers
        );

        if (result === true) {
          build(el, path ? path.concat(key) : [key]);
        }
      });

      stack.pop();
    }

    if (!utils$4.isObject(obj)) {
      throw new TypeError('data must be an object');
    }

    build(obj);

    return formData;
  }

  /**
   * It encodes a string by replacing all characters that are not in the unreserved set with
   * their percent-encoded equivalents
   *
   * @param {string} str - The string to encode.
   *
   * @returns {string} The encoded string.
   */
  function encode$1(str) {
    const charMap = {
      '!': '%21',
      "'": '%27',
      '(': '%28',
      ')': '%29',
      '~': '%7E',
      '%20': '+',
      '%00': '\x00'
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
      return charMap[match];
    });
  }

  /**
   * It takes a params object and converts it to a FormData object
   *
   * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
   * @param {Object<string, any>} options - The options object passed to the Axios constructor.
   *
   * @returns {void}
   */
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];

    params && toFormData$1(params, this, options);
  }

  const prototype = AxiosURLSearchParams.prototype;

  prototype.append = function append(name, value) {
    this._pairs.push([name, value]);
  };

  prototype.toString = function toString(encoder) {
    const _encode = encoder ? function(value) {
      return encoder.call(this, value, encode$1);
    } : encode$1;

    return this._pairs.map(function each(pair) {
      return _encode(pair[0]) + '=' + _encode(pair[1]);
    }, '').join('&');
  };

  /**
   * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
   * URI encoded counterparts
   *
   * @param {string} val The value to be encoded.
   *
   * @returns {string} The encoded value.
   */
  function encode(val) {
    return encodeURIComponent(val).
      replace(/%3A/gi, ':').
      replace(/%24/g, '$').
      replace(/%2C/gi, ',').
      replace(/%20/g, '+').
      replace(/%5B/gi, '[').
      replace(/%5D/gi, ']');
  }

  /**
   * Build a URL by appending params to the end
   *
   * @param {string} url The base of the url (e.g., http://www.google.com)
   * @param {object} [params] The params to be appended
   * @param {?(object|Function)} options
   *
   * @returns {string} The formatted url
   */
  function buildURL(url, params, options) {
    /*eslint no-param-reassign:0*/
    if (!params) {
      return url;
    }
    
    const _encode = options && options.encode || encode;

    if (utils$4.isFunction(options)) {
      options = {
        serialize: options
      };
    } 

    const serializeFn = options && options.serialize;

    let serializedParams;

    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils$4.isURLSearchParams(params) ?
        params.toString() :
        new AxiosURLSearchParams(params, options).toString(_encode);
    }

    if (serializedParams) {
      const hashmarkIndex = url.indexOf("#");

      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }

    return url;
  }

  class InterceptorManager {
    constructor() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    }

    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn) {
      utils$4.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    }
  }

  var transitionalDefaults = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };

  var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

  var FormData$1 = typeof FormData !== 'undefined' ? FormData : null;

  var Blob$1 = typeof Blob !== 'undefined' ? Blob : null;

  var platform$1 = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams$1,
      FormData: FormData$1,
      Blob: Blob$1
    },
    protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
  };

  const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

  const _navigator = typeof navigator === 'object' && navigator || undefined;

  /**
   * Determine if we're running in a standard browser environment
   *
   * This allows axios to run in a web worker, and react-native.
   * Both environments support XMLHttpRequest, but not fully standard globals.
   *
   * web workers:
   *  typeof window -> undefined
   *  typeof document -> undefined
   *
   * react-native:
   *  navigator.product -> 'ReactNative'
   * nativescript
   *  navigator.product -> 'NativeScript' or 'NS'
   *
   * @returns {boolean}
   */
  const hasStandardBrowserEnv = hasBrowserEnv &&
    (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);

  /**
   * Determine if we're running in a standard browser webWorker environment
   *
   * Although the `isStandardBrowserEnv` method indicates that
   * `allows axios to run in a web worker`, the WebWorker will still be
   * filtered out due to its judgment standard
   * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
   * This leads to a problem when axios post `FormData` in webWorker
   */
  const hasStandardBrowserWebWorkerEnv = (() => {
    return (
      typeof WorkerGlobalScope !== 'undefined' &&
      // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope &&
      typeof self.importScripts === 'function'
    );
  })();

  const origin = hasBrowserEnv && window.location.href || 'http://localhost';

  var utils$3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    hasBrowserEnv: hasBrowserEnv,
    hasStandardBrowserEnv: hasStandardBrowserEnv,
    hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
    navigator: _navigator,
    origin: origin
  });

  var platform = {
    ...utils$3,
    ...platform$1
  };

  function toURLEncodedForm(data, options) {
    return toFormData$1(data, new platform.classes.URLSearchParams(), {
      visitor: function(value, key, path, helpers) {
        if (platform.isNode && utils$4.isBuffer(value)) {
          this.append(key, value.toString('base64'));
          return false;
        }

        return helpers.defaultVisitor.apply(this, arguments);
      },
      ...options
    });
  }

  /**
   * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
   *
   * @param {string} name - The name of the property to get.
   *
   * @returns An array of strings.
   */
  function parsePropPath(name) {
    // foo[x][y][z]
    // foo.x.y.z
    // foo-x-y-z
    // foo x y z
    return utils$4.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
      return match[0] === '[]' ? '' : match[1] || match[0];
    });
  }

  /**
   * Convert an array to an object.
   *
   * @param {Array<any>} arr - The array to convert to an object.
   *
   * @returns An object with the same keys and values as the array.
   */
  function arrayToObject(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i;
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      obj[key] = arr[key];
    }
    return obj;
  }

  /**
   * It takes a FormData object and returns a JavaScript object
   *
   * @param {string} formData The FormData object to convert to JSON.
   *
   * @returns {Object<string, any> | null} The converted object.
   */
  function formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
      let name = path[index++];

      if (name === '__proto__') return true;

      const isNumericKey = Number.isFinite(+name);
      const isLast = index >= path.length;
      name = !name && utils$4.isArray(target) ? target.length : name;

      if (isLast) {
        if (utils$4.hasOwnProp(target, name)) {
          target[name] = [target[name], value];
        } else {
          target[name] = value;
        }

        return !isNumericKey;
      }

      if (!target[name] || !utils$4.isObject(target[name])) {
        target[name] = [];
      }

      const result = buildPath(path, value, target[name], index);

      if (result && utils$4.isArray(target[name])) {
        target[name] = arrayToObject(target[name]);
      }

      return !isNumericKey;
    }

    if (utils$4.isFormData(formData) && utils$4.isFunction(formData.entries)) {
      const obj = {};

      utils$4.forEachEntry(formData, (name, value) => {
        buildPath(parsePropPath(name), value, obj, 0);
      });

      return obj;
    }

    return null;
  }

  /**
   * It takes a string, tries to parse it, and if it fails, it returns the stringified version
   * of the input
   *
   * @param {any} rawValue - The value to be stringified.
   * @param {Function} parser - A function that parses a string into a JavaScript object.
   * @param {Function} encoder - A function that takes a value and returns a string.
   *
   * @returns {string} A stringified version of the rawValue.
   */
  function stringifySafely(rawValue, parser, encoder) {
    if (utils$4.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils$4.trim(rawValue);
      } catch (e) {
        if (e.name !== 'SyntaxError') {
          throw e;
        }
      }
    }

    return (encoder || JSON.stringify)(rawValue);
  }

  const defaults = {

    transitional: transitionalDefaults,

    adapter: ['xhr', 'http', 'fetch'],

    transformRequest: [function transformRequest(data, headers) {
      const contentType = headers.getContentType() || '';
      const hasJSONContentType = contentType.indexOf('application/json') > -1;
      const isObjectPayload = utils$4.isObject(data);

      if (isObjectPayload && utils$4.isHTMLForm(data)) {
        data = new FormData(data);
      }

      const isFormData = utils$4.isFormData(data);

      if (isFormData) {
        return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
      }

      if (utils$4.isArrayBuffer(data) ||
        utils$4.isBuffer(data) ||
        utils$4.isStream(data) ||
        utils$4.isFile(data) ||
        utils$4.isBlob(data) ||
        utils$4.isReadableStream(data)
      ) {
        return data;
      }
      if (utils$4.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils$4.isURLSearchParams(data)) {
        headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
        return data.toString();
      }

      let isFileList;

      if (isObjectPayload) {
        if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }

        if ((isFileList = utils$4.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
          const _FormData = this.env && this.env.FormData;

          return toFormData$1(
            isFileList ? {'files[]': data} : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }

      if (isObjectPayload || hasJSONContentType ) {
        headers.setContentType('application/json', false);
        return stringifySafely(data);
      }

      return data;
    }],

    transformResponse: [function transformResponse(data) {
      const transitional = this.transitional || defaults.transitional;
      const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
      const JSONRequested = this.responseType === 'json';

      if (utils$4.isResponse(data) || utils$4.isReadableStream(data)) {
        return data;
      }

      if (data && utils$4.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
        const silentJSONParsing = transitional && transitional.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;

        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === 'SyntaxError') {
              throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e;
          }
        }
      }

      return data;
    }],

    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',

    maxContentLength: -1,
    maxBodyLength: -1,

    env: {
      FormData: platform.classes.FormData,
      Blob: platform.classes.Blob
    },

    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },

    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*',
        'Content-Type': undefined
      }
    }
  };

  utils$4.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
    defaults.headers[method] = {};
  });

  // RawAxiosHeaders whose duplicates are ignored by node
  // c.f. https://nodejs.org/api/http.html#http_message_headers
  const ignoreDuplicateOf = utils$4.toObjectSet([
    'age', 'authorization', 'content-length', 'content-type', 'etag',
    'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
    'last-modified', 'location', 'max-forwards', 'proxy-authorization',
    'referer', 'retry-after', 'user-agent'
  ]);

  /**
   * Parse headers into an object
   *
   * ```
   * Date: Wed, 27 Aug 2014 08:58:49 GMT
   * Content-Type: application/json
   * Connection: keep-alive
   * Transfer-Encoding: chunked
   * ```
   *
   * @param {String} rawHeaders Headers needing to be parsed
   *
   * @returns {Object} Headers parsed into an object
   */
  var parseHeaders = rawHeaders => {
    const parsed = {};
    let key;
    let val;
    let i;

    rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
      i = line.indexOf(':');
      key = line.substring(0, i).trim().toLowerCase();
      val = line.substring(i + 1).trim();

      if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
        return;
      }

      if (key === 'set-cookie') {
        if (parsed[key]) {
          parsed[key].push(val);
        } else {
          parsed[key] = [val];
        }
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    });

    return parsed;
  };

  const $internals = Symbol('internals');

  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }

  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }

    return utils$4.isArray(value) ? value.map(normalizeValue) : String(value);
  }

  function parseTokens(str) {
    const tokens = Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;

    while ((match = tokensRE.exec(str))) {
      tokens[match[1]] = match[2];
    }

    return tokens;
  }

  const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

  function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
    if (utils$4.isFunction(filter)) {
      return filter.call(this, value, header);
    }

    if (isHeaderNameFilter) {
      value = header;
    }

    if (!utils$4.isString(value)) return;

    if (utils$4.isString(filter)) {
      return value.indexOf(filter) !== -1;
    }

    if (utils$4.isRegExp(filter)) {
      return filter.test(value);
    }
  }

  function formatHeader(header) {
    return header.trim()
      .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
  }

  function buildAccessors(obj, header) {
    const accessorName = utils$4.toCamelCase(' ' + header);

    ['get', 'set', 'has'].forEach(methodName => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }

  let AxiosHeaders$1 = class AxiosHeaders {
    constructor(headers) {
      headers && this.set(headers);
    }

    set(header, valueOrRewrite, rewrite) {
      const self = this;

      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);

        if (!lHeader) {
          throw new Error('header name must be a non-empty string');
        }

        const key = utils$4.findKey(self, lHeader);

        if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
          self[key || _header] = normalizeValue(_value);
        }
      }

      const setHeaders = (headers, _rewrite) =>
        utils$4.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

      if (utils$4.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite);
      } else if(utils$4.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
        setHeaders(parseHeaders(header), valueOrRewrite);
      } else if (utils$4.isObject(header) && utils$4.isIterable(header)) {
        let obj = {}, dest, key;
        for (const entry of header) {
          if (!utils$4.isArray(entry)) {
            throw TypeError('Object iterator must return a key-value pair');
          }

          obj[key = entry[0]] = (dest = obj[key]) ?
            (utils$4.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]]) : entry[1];
        }

        setHeaders(obj, valueOrRewrite);
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }

      return this;
    }

    get(header, parser) {
      header = normalizeHeader(header);

      if (header) {
        const key = utils$4.findKey(this, header);

        if (key) {
          const value = this[key];

          if (!parser) {
            return value;
          }

          if (parser === true) {
            return parseTokens(value);
          }

          if (utils$4.isFunction(parser)) {
            return parser.call(this, value, key);
          }

          if (utils$4.isRegExp(parser)) {
            return parser.exec(value);
          }

          throw new TypeError('parser must be boolean|regexp|function');
        }
      }
    }

    has(header, matcher) {
      header = normalizeHeader(header);

      if (header) {
        const key = utils$4.findKey(this, header);

        return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
      }

      return false;
    }

    delete(header, matcher) {
      const self = this;
      let deleted = false;

      function deleteHeader(_header) {
        _header = normalizeHeader(_header);

        if (_header) {
          const key = utils$4.findKey(self, _header);

          if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
            delete self[key];

            deleted = true;
          }
        }
      }

      if (utils$4.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }

      return deleted;
    }

    clear(matcher) {
      const keys = Object.keys(this);
      let i = keys.length;
      let deleted = false;

      while (i--) {
        const key = keys[i];
        if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
          delete this[key];
          deleted = true;
        }
      }

      return deleted;
    }

    normalize(format) {
      const self = this;
      const headers = {};

      utils$4.forEach(this, (value, header) => {
        const key = utils$4.findKey(headers, header);

        if (key) {
          self[key] = normalizeValue(value);
          delete self[header];
          return;
        }

        const normalized = format ? formatHeader(header) : String(header).trim();

        if (normalized !== header) {
          delete self[header];
        }

        self[normalized] = normalizeValue(value);

        headers[normalized] = true;
      });

      return this;
    }

    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }

    toJSON(asStrings) {
      const obj = Object.create(null);

      utils$4.forEach(this, (value, header) => {
        value != null && value !== false && (obj[header] = asStrings && utils$4.isArray(value) ? value.join(', ') : value);
      });

      return obj;
    }

    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }

    toString() {
      return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
    }

    getSetCookie() {
      return this.get("set-cookie") || [];
    }

    get [Symbol.toStringTag]() {
      return 'AxiosHeaders';
    }

    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }

    static concat(first, ...targets) {
      const computed = new this(first);

      targets.forEach((target) => computed.set(target));

      return computed;
    }

    static accessor(header) {
      const internals = this[$internals] = (this[$internals] = {
        accessors: {}
      });

      const accessors = internals.accessors;
      const prototype = this.prototype;

      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);

        if (!accessors[lHeader]) {
          buildAccessors(prototype, _header);
          accessors[lHeader] = true;
        }
      }

      utils$4.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

      return this;
    }
  };

  AxiosHeaders$1.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

  // reserved names hotfix
  utils$4.reduceDescriptors(AxiosHeaders$1.prototype, ({value}, key) => {
    let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
    return {
      get: () => value,
      set(headerValue) {
        this[mapped] = headerValue;
      }
    }
  });

  utils$4.freezeMethods(AxiosHeaders$1);

  /**
   * Transform the data for a request or a response
   *
   * @param {Array|Function} fns A single function or Array of functions
   * @param {?Object} response The response object
   *
   * @returns {*} The resulting transformed data
   */
  function transformData(fns, response) {
    const config = this || defaults;
    const context = response || config;
    const headers = AxiosHeaders$1.from(context.headers);
    let data = context.data;

    utils$4.forEach(fns, function transform(fn) {
      data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
    });

    headers.normalize();

    return data;
  }

  function isCancel$1(value) {
    return !!(value && value.__CANCEL__);
  }

  /**
   * A `CanceledError` is an object that is thrown when an operation is canceled.
   *
   * @param {string=} message The message.
   * @param {Object=} config The config.
   * @param {Object=} request The request.
   *
   * @returns {CanceledError} The created error.
   */
  function CanceledError$1(message, config, request) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    AxiosError$1.call(this, message == null ? 'canceled' : message, AxiosError$1.ERR_CANCELED, config, request);
    this.name = 'CanceledError';
  }

  utils$4.inherits(CanceledError$1, AxiosError$1, {
    __CANCEL__: true
  });

  /**
   * Resolve or reject a Promise based on response status.
   *
   * @param {Function} resolve A function that resolves the promise.
   * @param {Function} reject A function that rejects the promise.
   * @param {object} response The response.
   *
   * @returns {object} The response.
   */
  function settle(resolve, reject, response) {
    const validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(new AxiosError$1(
        'Request failed with status code ' + response.status,
        [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }

  function parseProtocol(url) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || '';
  }

  /**
   * Calculate data maxRate
   * @param {Number} [samplesCount= 10]
   * @param {Number} [min= 1000]
   * @returns {Function}
   */
  function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;

    min = min !== undefined ? min : 1000;

    return function push(chunkLength) {
      const now = Date.now();

      const startedAt = timestamps[tail];

      if (!firstSampleTS) {
        firstSampleTS = now;
      }

      bytes[head] = chunkLength;
      timestamps[head] = now;

      let i = tail;
      let bytesCount = 0;

      while (i !== head) {
        bytesCount += bytes[i++];
        i = i % samplesCount;
      }

      head = (head + 1) % samplesCount;

      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }

      if (now - firstSampleTS < min) {
        return;
      }

      const passed = startedAt && now - startedAt;

      return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
    };
  }

  /**
   * Throttle decorator
   * @param {Function} fn
   * @param {Number} freq
   * @return {Function}
   */
  function throttle(fn, freq) {
    let timestamp = 0;
    let threshold = 1000 / freq;
    let lastArgs;
    let timer;

    const invoke = (args, now = Date.now()) => {
      timestamp = now;
      lastArgs = null;
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      fn(...args);
    };

    const throttled = (...args) => {
      const now = Date.now();
      const passed = now - timestamp;
      if ( passed >= threshold) {
        invoke(args, now);
      } else {
        lastArgs = args;
        if (!timer) {
          timer = setTimeout(() => {
            timer = null;
            invoke(lastArgs);
          }, threshold - passed);
        }
      }
    };

    const flush = () => lastArgs && invoke(lastArgs);

    return [throttled, flush];
  }

  const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
    let bytesNotified = 0;
    const _speedometer = speedometer(50, 250);

    return throttle(e => {
      const loaded = e.loaded;
      const total = e.lengthComputable ? e.total : undefined;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;

      bytesNotified = loaded;

      const data = {
        loaded,
        total,
        progress: total ? (loaded / total) : undefined,
        bytes: progressBytes,
        rate: rate ? rate : undefined,
        estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
        event: e,
        lengthComputable: total != null,
        [isDownloadStream ? 'download' : 'upload']: true
      };

      listener(data);
    }, freq);
  };

  const progressEventDecorator = (total, throttled) => {
    const lengthComputable = total != null;

    return [(loaded) => throttled[0]({
      lengthComputable,
      total,
      loaded
    }), throttled[1]];
  };

  const asyncDecorator = (fn) => (...args) => utils$4.asap(() => fn(...args));

  var isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin, isMSIE) => (url) => {
    url = new URL(url, platform.origin);

    return (
      origin.protocol === url.protocol &&
      origin.host === url.host &&
      (isMSIE || origin.port === url.port)
    );
  })(
    new URL(platform.origin),
    platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
  ) : () => true;

  var cookies = platform.hasStandardBrowserEnv ?

    // Standard browser envs support document.cookie
    {
      write(name, value, expires, path, domain, secure) {
        const cookie = [name + '=' + encodeURIComponent(value)];

        utils$4.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

        utils$4.isString(path) && cookie.push('path=' + path);

        utils$4.isString(domain) && cookie.push('domain=' + domain);

        secure === true && cookie.push('secure');

        document.cookie = cookie.join('; ');
      },

      read(name) {
        const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    }

    :

    // Non-standard browser env (web workers, react-native) lack needed support.
    {
      write() {},
      read() {
        return null;
      },
      remove() {}
    };

  /**
   * Determines whether the specified URL is absolute
   *
   * @param {string} url The URL to test
   *
   * @returns {boolean} True if the specified URL is absolute, otherwise false
   */
  function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  }

  /**
   * Creates a new URL by combining the specified URLs
   *
   * @param {string} baseURL The base URL
   * @param {string} relativeURL The relative URL
   *
   * @returns {string} The combined URL
   */
  function combineURLs(baseURL, relativeURL) {
    return relativeURL
      ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
      : baseURL;
  }

  /**
   * Creates a new URL by combining the baseURL with the requestedURL,
   * only when the requestedURL is not already an absolute URL.
   * If the requestURL is absolute, this function returns the requestedURL untouched.
   *
   * @param {string} baseURL The base URL
   * @param {string} requestedURL Absolute or relative URL to combine
   *
   * @returns {string} The combined full path
   */
  function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
    let isRelativeUrl = !isAbsoluteURL(requestedURL);
    if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }

  const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;

  /**
   * Config-specific merge-function which creates a new config-object
   * by merging two configuration objects together.
   *
   * @param {Object} config1
   * @param {Object} config2
   *
   * @returns {Object} New object resulting from merging config2 to config1
   */
  function mergeConfig$1(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    const config = {};

    function getMergedValue(target, source, prop, caseless) {
      if (utils$4.isPlainObject(target) && utils$4.isPlainObject(source)) {
        return utils$4.merge.call({caseless}, target, source);
      } else if (utils$4.isPlainObject(source)) {
        return utils$4.merge({}, source);
      } else if (utils$4.isArray(source)) {
        return source.slice();
      }
      return source;
    }

    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(a, b, prop , caseless) {
      if (!utils$4.isUndefined(b)) {
        return getMergedValue(a, b, prop , caseless);
      } else if (!utils$4.isUndefined(a)) {
        return getMergedValue(undefined, a, prop , caseless);
      }
    }

    // eslint-disable-next-line consistent-return
    function valueFromConfig2(a, b) {
      if (!utils$4.isUndefined(b)) {
        return getMergedValue(undefined, b);
      }
    }

    // eslint-disable-next-line consistent-return
    function defaultToConfig2(a, b) {
      if (!utils$4.isUndefined(b)) {
        return getMergedValue(undefined, b);
      } else if (!utils$4.isUndefined(a)) {
        return getMergedValue(undefined, a);
      }
    }

    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(undefined, a);
      }
    }

    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      withXSRFToken: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b , prop) => mergeDeepProperties(headersToObject(a), headersToObject(b),prop, true)
    };

    utils$4.forEach(Object.keys({...config1, ...config2}), function computeConfigValue(prop) {
      const merge = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge(config1[prop], config2[prop], prop);
      (utils$4.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
    });

    return config;
  }

  var resolveConfig = (config) => {
    const newConfig = mergeConfig$1({}, config);

    let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

    newConfig.headers = headers = AxiosHeaders$1.from(headers);

    newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);

    // HTTP basic authentication
    if (auth) {
      headers.set('Authorization', 'Basic ' +
        btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
      );
    }

    let contentType;

    if (utils$4.isFormData(data)) {
      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
        headers.setContentType(undefined); // Let the browser set it
      } else if ((contentType = headers.getContentType()) !== false) {
        // fix semicolon duplication issue for ReactNative FormData implementation
        const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
        headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
      }
    }

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.

    if (platform.hasStandardBrowserEnv) {
      withXSRFToken && utils$4.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

      if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
        // Add xsrf header
        const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);

        if (xsrfValue) {
          headers.set(xsrfHeaderName, xsrfValue);
        }
      }
    }

    return newConfig;
  };

  const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

  var xhrAdapter = isXHRAdapterSupported && function (config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      const _config = resolveConfig(config);
      let requestData = _config.data;
      const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
      let {responseType, onUploadProgress, onDownloadProgress} = _config;
      let onCanceled;
      let uploadThrottled, downloadThrottled;
      let flushUpload, flushDownload;

      function done() {
        flushUpload && flushUpload(); // flush events
        flushDownload && flushDownload(); // flush events

        _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);

        _config.signal && _config.signal.removeEventListener('abort', onCanceled);
      }

      let request = new XMLHttpRequest();

      request.open(_config.method.toUpperCase(), _config.url, true);

      // Set the request timeout in MS
      request.timeout = _config.timeout;

      function onloadend() {
        if (!request) {
          return;
        }
        // Prepare the response
        const responseHeaders = AxiosHeaders$1.from(
          'getAllResponseHeaders' in request && request.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
          request.responseText : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request
        };

        settle(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);

        // Clean up request
        request = null;
      }

      if ('onloadend' in request) {
        // Use onloadend if available
        request.onloadend = onloadend;
      } else {
        // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }

          // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          }
          // readystate handler is calling before onerror or ontimeout handlers,
          // so we should call onloadend on the next 'tick'
          setTimeout(onloadend);
        };
      }

      // Handle browser request cancellation (as opposed to a manual cancellation)
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }

        reject(new AxiosError$1('Request aborted', AxiosError$1.ECONNABORTED, config, request));

        // Clean up request
        request = null;
      };

      // Handle low level network errors
      request.onerror = function handleError() {
        // Real errors are hidden from us by the browser
        // onerror should only fire if it's a network error
        reject(new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request));

        // Clean up request
        request = null;
      };

      // Handle timeout
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
        const transitional = _config.transitional || transitionalDefaults;
        if (_config.timeoutErrorMessage) {
          timeoutErrorMessage = _config.timeoutErrorMessage;
        }
        reject(new AxiosError$1(
          timeoutErrorMessage,
          transitional.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED,
          config,
          request));

        // Clean up request
        request = null;
      };

      // Remove Content-Type if data is undefined
      requestData === undefined && requestHeaders.setContentType(null);

      // Add headers to the request
      if ('setRequestHeader' in request) {
        utils$4.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
          request.setRequestHeader(key, val);
        });
      }

      // Add withCredentials to request if needed
      if (!utils$4.isUndefined(_config.withCredentials)) {
        request.withCredentials = !!_config.withCredentials;
      }

      // Add responseType to request if needed
      if (responseType && responseType !== 'json') {
        request.responseType = _config.responseType;
      }

      // Handle progress if needed
      if (onDownloadProgress) {
        ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));
        request.addEventListener('progress', downloadThrottled);
      }

      // Not all browsers support upload events
      if (onUploadProgress && request.upload) {
        ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));

        request.upload.addEventListener('progress', uploadThrottled);

        request.upload.addEventListener('loadend', flushUpload);
      }

      if (_config.cancelToken || _config.signal) {
        // Handle cancellation
        // eslint-disable-next-line func-names
        onCanceled = cancel => {
          if (!request) {
            return;
          }
          reject(!cancel || cancel.type ? new CanceledError$1(null, config, request) : cancel);
          request.abort();
          request = null;
        };

        _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
        if (_config.signal) {
          _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
        }
      }

      const protocol = parseProtocol(_config.url);

      if (protocol && platform.protocols.indexOf(protocol) === -1) {
        reject(new AxiosError$1('Unsupported protocol ' + protocol + ':', AxiosError$1.ERR_BAD_REQUEST, config));
        return;
      }


      // Send the request
      request.send(requestData || null);
    });
  };

  const composeSignals = (signals, timeout) => {
    const {length} = (signals = signals ? signals.filter(Boolean) : []);

    if (timeout || length) {
      let controller = new AbortController();

      let aborted;

      const onabort = function (reason) {
        if (!aborted) {
          aborted = true;
          unsubscribe();
          const err = reason instanceof Error ? reason : this.reason;
          controller.abort(err instanceof AxiosError$1 ? err : new CanceledError$1(err instanceof Error ? err.message : err));
        }
      };

      let timer = timeout && setTimeout(() => {
        timer = null;
        onabort(new AxiosError$1(`timeout ${timeout} of ms exceeded`, AxiosError$1.ETIMEDOUT));
      }, timeout);

      const unsubscribe = () => {
        if (signals) {
          timer && clearTimeout(timer);
          timer = null;
          signals.forEach(signal => {
            signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
          });
          signals = null;
        }
      };

      signals.forEach((signal) => signal.addEventListener('abort', onabort));

      const {signal} = controller;

      signal.unsubscribe = () => utils$4.asap(unsubscribe);

      return signal;
    }
  };

  const streamChunk = function* (chunk, chunkSize) {
    let len = chunk.byteLength;

    if (len < chunkSize) {
      yield chunk;
      return;
    }

    let pos = 0;
    let end;

    while (pos < len) {
      end = pos + chunkSize;
      yield chunk.slice(pos, end);
      pos = end;
    }
  };

  const readBytes = async function* (iterable, chunkSize) {
    for await (const chunk of readStream(iterable)) {
      yield* streamChunk(chunk, chunkSize);
    }
  };

  const readStream = async function* (stream) {
    if (stream[Symbol.asyncIterator]) {
      yield* stream;
      return;
    }

    const reader = stream.getReader();
    try {
      for (;;) {
        const {done, value} = await reader.read();
        if (done) {
          break;
        }
        yield value;
      }
    } finally {
      await reader.cancel();
    }
  };

  const trackStream = (stream, chunkSize, onProgress, onFinish) => {
    const iterator = readBytes(stream, chunkSize);

    let bytes = 0;
    let done;
    let _onFinish = (e) => {
      if (!done) {
        done = true;
        onFinish && onFinish(e);
      }
    };

    return new ReadableStream({
      async pull(controller) {
        try {
          const {done, value} = await iterator.next();

          if (done) {
           _onFinish();
            controller.close();
            return;
          }

          let len = value.byteLength;
          if (onProgress) {
            let loadedBytes = bytes += len;
            onProgress(loadedBytes);
          }
          controller.enqueue(new Uint8Array(value));
        } catch (err) {
          _onFinish(err);
          throw err;
        }
      },
      cancel(reason) {
        _onFinish(reason);
        return iterator.return();
      }
    }, {
      highWaterMark: 2
    })
  };

  const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
  const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

  // used only inside the fetch adapter
  const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
      ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
      async (str) => new Uint8Array(await new Response(str).arrayBuffer())
  );

  const test = (fn, ...args) => {
    try {
      return !!fn(...args);
    } catch (e) {
      return false
    }
  };

  const supportsRequestStream = isReadableStreamSupported && test(() => {
    let duplexAccessed = false;

    const hasContentType = new Request(platform.origin, {
      body: new ReadableStream(),
      method: 'POST',
      get duplex() {
        duplexAccessed = true;
        return 'half';
      },
    }).headers.has('Content-Type');

    return duplexAccessed && !hasContentType;
  });

  const DEFAULT_CHUNK_SIZE = 64 * 1024;

  const supportsResponseStream = isReadableStreamSupported &&
    test(() => utils$4.isReadableStream(new Response('').body));


  const resolvers = {
    stream: supportsResponseStream && ((res) => res.body)
  };

  isFetchSupported && (((res) => {
    ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
      !resolvers[type] && (resolvers[type] = utils$4.isFunction(res[type]) ? (res) => res[type]() :
        (_, config) => {
          throw new AxiosError$1(`Response type '${type}' is not supported`, AxiosError$1.ERR_NOT_SUPPORT, config);
        });
    });
  })(new Response));

  const getBodyLength = async (body) => {
    if (body == null) {
      return 0;
    }

    if(utils$4.isBlob(body)) {
      return body.size;
    }

    if(utils$4.isSpecCompliantForm(body)) {
      const _request = new Request(platform.origin, {
        method: 'POST',
        body,
      });
      return (await _request.arrayBuffer()).byteLength;
    }

    if(utils$4.isArrayBufferView(body) || utils$4.isArrayBuffer(body)) {
      return body.byteLength;
    }

    if(utils$4.isURLSearchParams(body)) {
      body = body + '';
    }

    if(utils$4.isString(body)) {
      return (await encodeText(body)).byteLength;
    }
  };

  const resolveBodyLength = async (headers, body) => {
    const length = utils$4.toFiniteNumber(headers.getContentLength());

    return length == null ? getBodyLength(body) : length;
  };

  var fetchAdapter = isFetchSupported && (async (config) => {
    let {
      url,
      method,
      data,
      signal,
      cancelToken,
      timeout,
      onDownloadProgress,
      onUploadProgress,
      responseType,
      headers,
      withCredentials = 'same-origin',
      fetchOptions
    } = resolveConfig(config);

    responseType = responseType ? (responseType + '').toLowerCase() : 'text';

    let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);

    let request;

    const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
    });

    let requestContentLength;

    try {
      if (
        onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
        (requestContentLength = await resolveBodyLength(headers, data)) !== 0
      ) {
        let _request = new Request(url, {
          method: 'POST',
          body: data,
          duplex: "half"
        });

        let contentTypeHeader;

        if (utils$4.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
          headers.setContentType(contentTypeHeader);
        }

        if (_request.body) {
          const [onProgress, flush] = progressEventDecorator(
            requestContentLength,
            progressEventReducer(asyncDecorator(onUploadProgress))
          );

          data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
        }
      }

      if (!utils$4.isString(withCredentials)) {
        withCredentials = withCredentials ? 'include' : 'omit';
      }

      // Cloudflare Workers throws when credentials are defined
      // see https://github.com/cloudflare/workerd/issues/902
      const isCredentialsSupported = "credentials" in Request.prototype;
      request = new Request(url, {
        ...fetchOptions,
        signal: composedSignal,
        method: method.toUpperCase(),
        headers: headers.normalize().toJSON(),
        body: data,
        duplex: "half",
        credentials: isCredentialsSupported ? withCredentials : undefined
      });

      let response = await fetch(request, fetchOptions);

      const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

      if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {
        const options = {};

        ['status', 'statusText', 'headers'].forEach(prop => {
          options[prop] = response[prop];
        });

        const responseContentLength = utils$4.toFiniteNumber(response.headers.get('content-length'));

        const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
          responseContentLength,
          progressEventReducer(asyncDecorator(onDownloadProgress), true)
        ) || [];

        response = new Response(
          trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
            flush && flush();
            unsubscribe && unsubscribe();
          }),
          options
        );
      }

      responseType = responseType || 'text';

      let responseData = await resolvers[utils$4.findKey(resolvers, responseType) || 'text'](response, config);

      !isStreamResponse && unsubscribe && unsubscribe();

      return await new Promise((resolve, reject) => {
        settle(resolve, reject, {
          data: responseData,
          headers: AxiosHeaders$1.from(response.headers),
          status: response.status,
          statusText: response.statusText,
          config,
          request
        });
      })
    } catch (err) {
      unsubscribe && unsubscribe();

      if (err && err.name === 'TypeError' && /Load failed|fetch/i.test(err.message)) {
        throw Object.assign(
          new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request),
          {
            cause: err.cause || err
          }
        )
      }

      throw AxiosError$1.from(err, err && err.code, config, request);
    }
  });

  const knownAdapters = {
    http: httpAdapter,
    xhr: xhrAdapter,
    fetch: fetchAdapter
  };

  utils$4.forEach(knownAdapters, (fn, value) => {
    if (fn) {
      try {
        Object.defineProperty(fn, 'name', {value});
      } catch (e) {
        // eslint-disable-next-line no-empty
      }
      Object.defineProperty(fn, 'adapterName', {value});
    }
  });

  const renderReason = (reason) => `- ${reason}`;

  const isResolvedHandle = (adapter) => utils$4.isFunction(adapter) || adapter === null || adapter === false;

  var adapters = {
    getAdapter: (adapters) => {
      adapters = utils$4.isArray(adapters) ? adapters : [adapters];

      const {length} = adapters;
      let nameOrAdapter;
      let adapter;

      const rejectedReasons = {};

      for (let i = 0; i < length; i++) {
        nameOrAdapter = adapters[i];
        let id;

        adapter = nameOrAdapter;

        if (!isResolvedHandle(nameOrAdapter)) {
          adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

          if (adapter === undefined) {
            throw new AxiosError$1(`Unknown adapter '${id}'`);
          }
        }

        if (adapter) {
          break;
        }

        rejectedReasons[id || '#' + i] = adapter;
      }

      if (!adapter) {

        const reasons = Object.entries(rejectedReasons)
          .map(([id, state]) => `adapter ${id} ` +
            (state === false ? 'is not supported by the environment' : 'is not available in the build')
          );

        let s = length ?
          (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
          'as no adapter specified';

        throw new AxiosError$1(
          `There is no suitable adapter to dispatch the request ` + s,
          'ERR_NOT_SUPPORT'
        );
      }

      return adapter;
    },
    adapters: knownAdapters
  };

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   *
   * @param {Object} config The config that is to be used for the request
   *
   * @returns {void}
   */
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }

    if (config.signal && config.signal.aborted) {
      throw new CanceledError$1(null, config);
    }
  }

  /**
   * Dispatch a request to the server using the configured adapter.
   *
   * @param {object} config The config that is to be used for the request
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  function dispatchRequest(config) {
    throwIfCancellationRequested(config);

    config.headers = AxiosHeaders$1.from(config.headers);

    // Transform request data
    config.data = transformData.call(
      config,
      config.transformRequest
    );

    if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
      config.headers.setContentType('application/x-www-form-urlencoded', false);
    }

    const adapter = adapters.getAdapter(config.adapter || defaults.adapter);

    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);

      // Transform response data
      response.data = transformData.call(
        config,
        config.transformResponse,
        response
      );

      response.headers = AxiosHeaders$1.from(response.headers);

      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel$1(reason)) {
        throwIfCancellationRequested(config);

        // Transform response data
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
        }
      }

      return Promise.reject(reason);
    });
  }

  const VERSION$1 = "1.11.0";

  const validators$1 = {};

  // eslint-disable-next-line func-names
  ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
    validators$1[type] = function validator(thing) {
      return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
    };
  });

  const deprecatedWarnings = {};

  /**
   * Transitional option validator
   *
   * @param {function|boolean?} validator - set to false if the transitional option has been removed
   * @param {string?} version - deprecated version / removed since version
   * @param {string?} message - some message with additional info
   *
   * @returns {function}
   */
  validators$1.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
      return '[Axios v' + VERSION$1 + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
    }

    // eslint-disable-next-line func-names
    return (value, opt, opts) => {
      if (validator === false) {
        throw new AxiosError$1(
          formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
          AxiosError$1.ERR_DEPRECATED
        );
      }

      if (version && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        // eslint-disable-next-line no-console
        console.warn(
          formatMessage(
            opt,
            ' has been deprecated since v' + version + ' and will be removed in the near future'
          )
        );
      }

      return validator ? validator(value, opt, opts) : true;
    };
  };

  validators$1.spelling = function spelling(correctSpelling) {
    return (value, opt) => {
      // eslint-disable-next-line no-console
      console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
      return true;
    }
  };

  /**
   * Assert object's properties type
   *
   * @param {object} options
   * @param {object} schema
   * @param {boolean?} allowUnknown
   *
   * @returns {object}
   */

  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== 'object') {
      throw new AxiosError$1('options must be an object', AxiosError$1.ERR_BAD_OPTION_VALUE);
    }
    const keys = Object.keys(options);
    let i = keys.length;
    while (i-- > 0) {
      const opt = keys[i];
      const validator = schema[opt];
      if (validator) {
        const value = options[opt];
        const result = value === undefined || validator(value, opt, options);
        if (result !== true) {
          throw new AxiosError$1('option ' + opt + ' must be ' + result, AxiosError$1.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError$1('Unknown option ' + opt, AxiosError$1.ERR_BAD_OPTION);
      }
    }
  }

  var validator = {
    assertOptions,
    validators: validators$1
  };

  const validators = validator.validators;

  /**
   * Create a new instance of Axios
   *
   * @param {Object} instanceConfig The default config for the instance
   *
   * @return {Axios} A new instance of Axios
   */
  let Axios$1 = class Axios {
    constructor(instanceConfig) {
      this.defaults = instanceConfig || {};
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    async request(configOrUrl, config) {
      try {
        return await this._request(configOrUrl, config);
      } catch (err) {
        if (err instanceof Error) {
          let dummy = {};

          Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());

          // slice off the Error: ... line
          const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
          try {
            if (!err.stack) {
              err.stack = stack;
              // match without the 2 top stack lines
            } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
              err.stack += '\n' + stack;
            }
          } catch (e) {
            // ignore the case where "stack" is an un-writable property
          }
        }

        throw err;
      }
    }

    _request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      config = mergeConfig$1(this.defaults, config);

      const {transitional, paramsSerializer, headers} = config;

      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }

      if (paramsSerializer != null) {
        if (utils$4.isFunction(paramsSerializer)) {
          config.paramsSerializer = {
            serialize: paramsSerializer
          };
        } else {
          validator.assertOptions(paramsSerializer, {
            encode: validators.function,
            serialize: validators.function
          }, true);
        }
      }

      // Set config.allowAbsoluteUrls
      if (config.allowAbsoluteUrls !== undefined) ; else if (this.defaults.allowAbsoluteUrls !== undefined) {
        config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
      } else {
        config.allowAbsoluteUrls = true;
      }

      validator.assertOptions(config, {
        baseUrl: validators.spelling('baseURL'),
        withXsrfToken: validators.spelling('withXSRFToken')
      }, true);

      // Set config.method
      config.method = (config.method || this.defaults.method || 'get').toLowerCase();

      // Flatten headers
      let contextHeaders = headers && utils$4.merge(
        headers.common,
        headers[config.method]
      );

      headers && utils$4.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        (method) => {
          delete headers[method];
        }
      );

      config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

      // filter out skipped interceptors
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      let promise;
      let i = 0;
      let len;

      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), undefined];
        chain.unshift(...requestInterceptorChain);
        chain.push(...responseInterceptorChain);
        len = chain.length;

        promise = Promise.resolve(config);

        while (i < len) {
          promise = promise.then(chain[i++], chain[i++]);
        }

        return promise;
      }

      len = requestInterceptorChain.length;

      let newConfig = config;

      i = 0;

      while (i < len) {
        const onFulfilled = requestInterceptorChain[i++];
        const onRejected = requestInterceptorChain[i++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected.call(this, error);
          break;
        }
      }

      try {
        promise = dispatchRequest.call(this, newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      i = 0;
      len = responseInterceptorChain.length;

      while (i < len) {
        promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
      }

      return promise;
    }

    getUri(config) {
      config = mergeConfig$1(this.defaults, config);
      const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    }
  };

  // Provide aliases for supported request methods
  utils$4.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    /*eslint func-names:0*/
    Axios$1.prototype[method] = function(url, config) {
      return this.request(mergeConfig$1(config || {}, {
        method,
        url,
        data: (config || {}).data
      }));
    };
  });

  utils$4.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    /*eslint func-names:0*/

    function generateHTTPMethod(isForm) {
      return function httpMethod(url, data, config) {
        return this.request(mergeConfig$1(config || {}, {
          method,
          headers: isForm ? {
            'Content-Type': 'multipart/form-data'
          } : {},
          url,
          data
        }));
      };
    }

    Axios$1.prototype[method] = generateHTTPMethod();

    Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true);
  });

  /**
   * A `CancelToken` is an object that can be used to request cancellation of an operation.
   *
   * @param {Function} executor The executor function.
   *
   * @returns {CancelToken}
   */
  let CancelToken$1 = class CancelToken {
    constructor(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      let resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      const token = this;

      // eslint-disable-next-line func-names
      this.promise.then(cancel => {
        if (!token._listeners) return;

        let i = token._listeners.length;

        while (i-- > 0) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = onfulfilled => {
        let _resolve;
        // eslint-disable-next-line func-names
        const promise = new Promise(resolve => {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message, config, request) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new CanceledError$1(message, config, request);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }

    /**
     * Subscribe to the cancel signal
     */

    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }

    /**
     * Unsubscribe from the cancel signal
     */

    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    }

    toAbortSignal() {
      const controller = new AbortController();

      const abort = (err) => {
        controller.abort(err);
      };

      this.subscribe(abort);

      controller.signal.unsubscribe = () => this.unsubscribe(abort);

      return controller.signal;
    }

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel;
      const token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    }
  };

  /**
   * Syntactic sugar for invoking a function and expanding an array for arguments.
   *
   * Common use case would be to use `Function.prototype.apply`.
   *
   *  ```js
   *  function f(x, y, z) {}
   *  var args = [1, 2, 3];
   *  f.apply(null, args);
   *  ```
   *
   * With `spread` this example can be re-written.
   *
   *  ```js
   *  spread(function(x, y, z) {})([1, 2, 3]);
   *  ```
   *
   * @param {Function} callback
   *
   * @returns {Function}
   */
  function spread$1(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }

  /**
   * Determines whether the payload is an error thrown by Axios
   *
   * @param {*} payload The value to test
   *
   * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
   */
  function isAxiosError$1(payload) {
    return utils$4.isObject(payload) && (payload.isAxiosError === true);
  }

  const HttpStatusCode$1 = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511,
  };

  Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
    HttpStatusCode$1[value] = key;
  });

  /**
   * Create an instance of Axios
   *
   * @param {Object} defaultConfig The default config for the instance
   *
   * @returns {Axios} A new instance of Axios
   */
  function createInstance(defaultConfig) {
    const context = new Axios$1(defaultConfig);
    const instance = bind(Axios$1.prototype.request, context);

    // Copy axios.prototype to instance
    utils$4.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});

    // Copy context to instance
    utils$4.extend(instance, context, null, {allOwnKeys: true});

    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig$1(defaultConfig, instanceConfig));
    };

    return instance;
  }

  // Create the default instance to be exported
  const axios = createInstance(defaults);

  // Expose Axios class to allow class inheritance
  axios.Axios = Axios$1;

  // Expose Cancel & CancelToken
  axios.CanceledError = CanceledError$1;
  axios.CancelToken = CancelToken$1;
  axios.isCancel = isCancel$1;
  axios.VERSION = VERSION$1;
  axios.toFormData = toFormData$1;

  // Expose AxiosError class
  axios.AxiosError = AxiosError$1;

  // alias for CanceledError for backward compatibility
  axios.Cancel = axios.CanceledError;

  // Expose all/spread
  axios.all = function all(promises) {
    return Promise.all(promises);
  };

  axios.spread = spread$1;

  // Expose isAxiosError
  axios.isAxiosError = isAxiosError$1;

  // Expose mergeConfig
  axios.mergeConfig = mergeConfig$1;

  axios.AxiosHeaders = AxiosHeaders$1;

  axios.formToJSON = thing => formDataToJSON(utils$4.isHTMLForm(thing) ? new FormData(thing) : thing);

  axios.getAdapter = adapters.getAdapter;

  axios.HttpStatusCode = HttpStatusCode$1;

  axios.default = axios;

  // This module is intended to unwrap Axios default export as named.
  // Keep top-level export same with static properties
  // so that it can keep same with es module or cjs
  const {
    Axios,
    AxiosError,
    CanceledError,
    isCancel,
    CancelToken,
    VERSION,
    all,
    Cancel,
    isAxiosError,
    spread,
    toFormData,
    AxiosHeaders,
    HttpStatusCode,
    formToJSON,
    getAdapter,
    mergeConfig
  } = axios;

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function a () {
  			if (this instanceof a) {
          return Reflect.construct(f, arguments, this.constructor);
  			}
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var editor_cjs = {};

  var api_cjs = {};

  var utils_cjs = {};

  Object.defineProperty(utils_cjs, '__esModule', { value: true });

  var React$2 = React__default.default;

  function _interopNamespace$3(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var React__namespace$2 = /*#__PURE__*/_interopNamespace$3(React$2);

  function _arrayWithHoles$2(r) {
    if (Array.isArray(r)) return r;
  }

  function _iterableToArrayLimit$2(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }

  function _arrayLikeToArray$2$1(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }

  function _unsupportedIterableToArray$2$1(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray$2$1(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$2$1(r, a) : void 0;
    }
  }

  function _nonIterableRest$2() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray$2(r, e) {
    return _arrayWithHoles$2(r) || _iterableToArrayLimit$2(r, e) || _unsupportedIterableToArray$2$1(r, e) || _nonIterableRest$2();
  }

  function _typeof$3(o) {
    "@babel/helpers - typeof";

    return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof$3(o);
  }

  function classNames() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args) {
      var classes = [];
      for (var i = 0; i < args.length; i++) {
        var className = args[i];
        if (!className) {
          continue;
        }
        var type = _typeof$3(className);
        if (type === 'string' || type === 'number') {
          classes.push(className);
        } else if (type === 'object') {
          var _classes = Array.isArray(className) ? className : Object.entries(className).map(function (_ref) {
            var _ref2 = _slicedToArray$2(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];
            return value ? key : null;
          });
          classes = _classes.length ? classes.concat(_classes.filter(function (c) {
            return !!c;
          })) : classes;
        }
      }
      return classes.join(' ').trim();
    }
    return undefined;
  }

  function _arrayWithoutHoles$2(r) {
    if (Array.isArray(r)) return _arrayLikeToArray$2$1(r);
  }

  function _iterableToArray$2(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }

  function _nonIterableSpread$2() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray$2(r) {
    return _arrayWithoutHoles$2(r) || _iterableToArray$2(r) || _unsupportedIterableToArray$2$1(r) || _nonIterableSpread$2();
  }

  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }

  function toPrimitive$3(t, r) {
    if ("object" != _typeof$3(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != _typeof$3(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }

  function toPropertyKey$3(t) {
    var i = toPrimitive$3(t, "string");
    return "symbol" == _typeof$3(i) ? i : i + "";
  }

  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey$3(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: false
    }), e;
  }

  function _defineProperty$3(e, r, t) {
    return (r = toPropertyKey$3(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }

  function _createForOfIteratorHelper$1(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$1$1(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$1$1(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$1$1(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1$1(r, a) : void 0; } }
  function _arrayLikeToArray$1$1(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var DomHandler = /*#__PURE__*/function () {
    function DomHandler() {
      _classCallCheck(this, DomHandler);
    }
    return _createClass(DomHandler, null, [{
      key: "innerWidth",
      value: function innerWidth(el) {
        if (el) {
          var width = el.offsetWidth;
          var style = getComputedStyle(el);
          width = width + (parseFloat(style.paddingLeft) + parseFloat(style.paddingRight));
          return width;
        }
        return 0;
      }
    }, {
      key: "width",
      value: function width(el) {
        if (el) {
          var _width = el.offsetWidth;
          var style = getComputedStyle(el);
          _width = _width - (parseFloat(style.paddingLeft) + parseFloat(style.paddingRight));
          return _width;
        }
        return 0;
      }
    }, {
      key: "getBrowserLanguage",
      value: function getBrowserLanguage() {
        return navigator.userLanguage || navigator.languages && navigator.languages.length && navigator.languages[0] || navigator.language || navigator.browserLanguage || navigator.systemLanguage || 'en';
      }
    }, {
      key: "getWindowScrollTop",
      value: function getWindowScrollTop() {
        var doc = document.documentElement;
        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
      }
    }, {
      key: "getWindowScrollLeft",
      value: function getWindowScrollLeft() {
        var doc = document.documentElement;
        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
      }
    }, {
      key: "getOuterWidth",
      value: function getOuterWidth(el, margin) {
        if (el) {
          var width = el.getBoundingClientRect().width || el.offsetWidth;
          if (margin) {
            var style = getComputedStyle(el);
            width = width + (parseFloat(style.marginLeft) + parseFloat(style.marginRight));
          }
          return width;
        }
        return 0;
      }
    }, {
      key: "getOuterHeight",
      value: function getOuterHeight(el, margin) {
        if (el) {
          var height = el.getBoundingClientRect().height || el.offsetHeight;
          if (margin) {
            var style = getComputedStyle(el);
            height = height + (parseFloat(style.marginTop) + parseFloat(style.marginBottom));
          }
          return height;
        }
        return 0;
      }
    }, {
      key: "getClientHeight",
      value: function getClientHeight(el, margin) {
        if (el) {
          var height = el.clientHeight;
          if (margin) {
            var style = getComputedStyle(el);
            height = height + (parseFloat(style.marginTop) + parseFloat(style.marginBottom));
          }
          return height;
        }
        return 0;
      }
    }, {
      key: "getClientWidth",
      value: function getClientWidth(el, margin) {
        if (el) {
          var width = el.clientWidth;
          if (margin) {
            var style = getComputedStyle(el);
            width = width + (parseFloat(style.marginLeft) + parseFloat(style.marginRight));
          }
          return width;
        }
        return 0;
      }
    }, {
      key: "getViewport",
      value: function getViewport() {
        var win = window;
        var d = document;
        var e = d.documentElement;
        var g = d.getElementsByTagName('body')[0];
        var w = win.innerWidth || e.clientWidth || g.clientWidth;
        var h = win.innerHeight || e.clientHeight || g.clientHeight;
        return {
          width: w,
          height: h
        };
      }
    }, {
      key: "getOffset",
      value: function getOffset(el) {
        if (el) {
          var rect = el.getBoundingClientRect();
          return {
            top: rect.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0),
            left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0)
          };
        }
        return {
          top: 'auto',
          left: 'auto'
        };
      }
    }, {
      key: "index",
      value: function index(element) {
        if (element) {
          var children = element.parentNode.childNodes;
          var num = 0;
          for (var i = 0; i < children.length; i++) {
            if (children[i] === element) {
              return num;
            }
            if (children[i].nodeType === 1) {
              num++;
            }
          }
        }
        return -1;
      }
    }, {
      key: "addMultipleClasses",
      value: function addMultipleClasses(element, className) {
        if (element && className) {
          if (element.classList) {
            var styles = className.split(' ');
            for (var i = 0; i < styles.length; i++) {
              element.classList.add(styles[i]);
            }
          } else {
            var _styles = className.split(' ');
            for (var _i = 0; _i < _styles.length; _i++) {
              element.className = element.className + (' ' + _styles[_i]);
            }
          }
        }
      }
    }, {
      key: "removeMultipleClasses",
      value: function removeMultipleClasses(element, className) {
        if (element && className) {
          if (element.classList) {
            var styles = className.split(' ');
            for (var i = 0; i < styles.length; i++) {
              element.classList.remove(styles[i]);
            }
          } else {
            var _styles2 = className.split(' ');
            for (var _i2 = 0; _i2 < _styles2.length; _i2++) {
              element.className = element.className.replace(new RegExp('(^|\\b)' + _styles2[_i2].split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
            }
          }
        }
      }
    }, {
      key: "addClass",
      value: function addClass(element, className) {
        if (element && className) {
          if (element.classList) {
            element.classList.add(className);
          } else {
            element.className = element.className + (' ' + className);
          }
        }
      }
    }, {
      key: "removeClass",
      value: function removeClass(element, className) {
        if (element && className) {
          if (element.classList) {
            element.classList.remove(className);
          } else {
            element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
          }
        }
      }
    }, {
      key: "hasClass",
      value: function hasClass(element, className) {
        if (element) {
          if (element.classList) {
            return element.classList.contains(className);
          }
          return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
        }
        return false;
      }
    }, {
      key: "addStyles",
      value: function addStyles(element) {
        var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (element) {
          Object.entries(styles).forEach(function (_ref) {
            var _ref2 = _slicedToArray$2(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];
            return element.style[key] = value;
          });
        }
      }
    }, {
      key: "find",
      value: function find(element, selector) {
        return element ? Array.from(element.querySelectorAll(selector)) : [];
      }
    }, {
      key: "findSingle",
      value: function findSingle(element, selector) {
        if (element) {
          return element.querySelector(selector);
        }
        return null;
      }
    }, {
      key: "setAttributes",
      value: function setAttributes(element) {
        var _this = this;
        var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        if (element) {
          var _computedStyles = function computedStyles(rule, value) {
            var _element$$attrs, _element$$attrs2;
            var styles = element !== null && element !== void 0 && (_element$$attrs = element.$attrs) !== null && _element$$attrs !== void 0 && _element$$attrs[rule] ? [element === null || element === void 0 || (_element$$attrs2 = element.$attrs) === null || _element$$attrs2 === void 0 ? void 0 : _element$$attrs2[rule]] : [];
            return [value].flat().reduce(function (cv, v) {
              if (v !== null && v !== undefined) {
                var type = _typeof$3(v);
                if (type === 'string' || type === 'number') {
                  cv.push(v);
                } else if (type === 'object') {
                  var _cv = Array.isArray(v) ? _computedStyles(rule, v) : Object.entries(v).map(function (_ref3) {
                    var _ref4 = _slicedToArray$2(_ref3, 2),
                      _k = _ref4[0],
                      _v = _ref4[1];
                    return rule === 'style' && (!!_v || _v === 0) ? "".concat(_k.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(), ":").concat(_v) : _v ? _k : undefined;
                  });
                  cv = _cv.length ? cv.concat(_cv.filter(function (c) {
                    return !!c;
                  })) : cv;
                }
              }
              return cv;
            }, styles);
          };
          Object.entries(attributes).forEach(function (_ref5) {
            var _ref6 = _slicedToArray$2(_ref5, 2),
              key = _ref6[0],
              value = _ref6[1];
            if (value !== undefined && value !== null) {
              var matchedEvent = key.match(/^on(.+)/);
              if (matchedEvent) {
                element.addEventListener(matchedEvent[1].toLowerCase(), value);
              } else if (key === 'p-bind') {
                _this.setAttributes(element, value);
              } else {
                value = key === 'class' ? _toConsumableArray$2(new Set(_computedStyles('class', value))).join(' ').trim() : key === 'style' ? _computedStyles('style', value).join(';').trim() : value;
                (element.$attrs = element.$attrs || {}) && (element.$attrs[key] = value);
                element.setAttribute(key, value);
              }
            }
          });
        }
      }
    }, {
      key: "getAttribute",
      value: function getAttribute(element, name) {
        if (element) {
          var value = element.getAttribute(name);
          if (!isNaN(value)) {
            return +value;
          }
          if (value === 'true' || value === 'false') {
            return value === 'true';
          }
          return value;
        }
        return undefined;
      }
    }, {
      key: "isAttributeEquals",
      value: function isAttributeEquals(element, name, value) {
        return element ? this.getAttribute(element, name) === value : false;
      }
    }, {
      key: "isAttributeNotEquals",
      value: function isAttributeNotEquals(element, name, value) {
        return !this.isAttributeEquals(element, name, value);
      }
    }, {
      key: "getHeight",
      value: function getHeight(el) {
        if (el) {
          var height = el.offsetHeight;
          var style = getComputedStyle(el);
          height = height - (parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth));
          return height;
        }
        return 0;
      }
    }, {
      key: "getWidth",
      value: function getWidth(el) {
        if (el) {
          var width = el.offsetWidth;
          var style = getComputedStyle(el);
          width = width - (parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth));
          return width;
        }
        return 0;
      }
    }, {
      key: "alignOverlay",
      value: function alignOverlay(overlay, target, appendTo) {
        var calculateMinWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
        if (overlay && target) {
          if (appendTo === 'self') {
            this.relativePosition(overlay, target);
          } else {
            calculateMinWidth && (overlay.style.minWidth = DomHandler.getOuterWidth(target) + 'px');
            this.absolutePosition(overlay, target);
          }
        }
      }
    }, {
      key: "absolutePosition",
      value: function absolutePosition(element, target) {
        var align = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left';
        if (element && target) {
          var elementDimensions = element.offsetParent ? {
            width: element.offsetWidth,
            height: element.offsetHeight
          } : this.getHiddenElementDimensions(element);
          var elementOuterHeight = elementDimensions.height;
          var elementOuterWidth = elementDimensions.width;
          var targetOuterHeight = target.offsetHeight;
          var targetOuterWidth = target.offsetWidth;
          var targetOffset = target.getBoundingClientRect();
          var windowScrollTop = this.getWindowScrollTop();
          var windowScrollLeft = this.getWindowScrollLeft();
          var viewport = this.getViewport();
          var top;
          var left;
          if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
            top = targetOffset.top + windowScrollTop - elementOuterHeight;
            if (top < 0) {
              top = windowScrollTop;
            }
            element.style.transformOrigin = 'bottom';
          } else {
            top = targetOuterHeight + targetOffset.top + windowScrollTop;
            element.style.transformOrigin = 'top';
          }
          var targetOffsetPx = targetOffset.left;
          if (align === 'left') {
            if (targetOffsetPx + elementOuterWidth > viewport.width) {
              left = Math.max(0, targetOffsetPx + windowScrollLeft + targetOuterWidth - elementOuterWidth);
            } else {
              left = targetOffsetPx + windowScrollLeft;
            }
          } else {
            if (targetOffsetPx + targetOuterWidth - elementOuterWidth < 0) {
              left = windowScrollLeft;
            } else {
              left = targetOffsetPx + targetOuterWidth - elementOuterWidth + windowScrollLeft;
            }
          }
          element.style.top = top + 'px';
          element.style.left = left + 'px';
        }
      }
    }, {
      key: "relativePosition",
      value: function relativePosition(element, target) {
        if (element && target) {
          var elementDimensions = element.offsetParent ? {
            width: element.offsetWidth,
            height: element.offsetHeight
          } : this.getHiddenElementDimensions(element);
          var targetHeight = target.offsetHeight;
          var targetOffset = target.getBoundingClientRect();
          var viewport = this.getViewport();
          var top;
          var left;
          if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {
            top = -1 * elementDimensions.height;
            if (targetOffset.top + top < 0) {
              top = -1 * targetOffset.top;
            }
            element.style.transformOrigin = 'bottom';
          } else {
            top = targetHeight;
            element.style.transformOrigin = 'top';
          }
          if (elementDimensions.width > viewport.width) {
            // element wider then viewport and cannot fit on screen (align at left side of viewport)
            left = targetOffset.left * -1;
          } else if (targetOffset.left + elementDimensions.width > viewport.width) {
            // element wider then viewport but can be fit on screen (align at right side of viewport)
            left = (targetOffset.left + elementDimensions.width - viewport.width) * -1;
          } else {
            // element fits on screen (align with target)
            left = 0;
          }
          element.style.top = top + 'px';
          element.style.left = left + 'px';
        }
      }
    }, {
      key: "flipfitCollision",
      value: function flipfitCollision(element, target) {
        var _this2 = this;
        var my = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left top';
        var at = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'left bottom';
        var callback = arguments.length > 4 ? arguments[4] : undefined;
        if (element && target) {
          var targetOffset = target.getBoundingClientRect();
          var viewport = this.getViewport();
          var myArr = my.split(' ');
          var atArr = at.split(' ');
          var getPositionValue = function getPositionValue(arr, isOffset) {
            return isOffset ? +arr.substring(arr.search(/(\+|-)/g)) || 0 : arr.substring(0, arr.search(/(\+|-)/g)) || arr;
          };
          var position = {
            my: {
              x: getPositionValue(myArr[0]),
              y: getPositionValue(myArr[1] || myArr[0]),
              offsetX: getPositionValue(myArr[0], true),
              offsetY: getPositionValue(myArr[1] || myArr[0], true)
            },
            at: {
              x: getPositionValue(atArr[0]),
              y: getPositionValue(atArr[1] || atArr[0]),
              offsetX: getPositionValue(atArr[0], true),
              offsetY: getPositionValue(atArr[1] || atArr[0], true)
            }
          };
          var myOffset = {
            left: function left() {
              var totalOffset = position.my.offsetX + position.at.offsetX;
              return totalOffset + targetOffset.left + (position.my.x === 'left' ? 0 : -1 * (position.my.x === 'center' ? _this2.getOuterWidth(element) / 2 : _this2.getOuterWidth(element)));
            },
            top: function top() {
              var totalOffset = position.my.offsetY + position.at.offsetY;
              return totalOffset + targetOffset.top + (position.my.y === 'top' ? 0 : -1 * (position.my.y === 'center' ? _this2.getOuterHeight(element) / 2 : _this2.getOuterHeight(element)));
            }
          };
          var alignWithAt = {
            count: {
              x: 0,
              y: 0
            },
            left: function left() {
              var left = myOffset.left();
              var scrollLeft = DomHandler.getWindowScrollLeft();
              element.style.left = left + scrollLeft + 'px';
              if (this.count.x === 2) {
                element.style.left = scrollLeft + 'px';
                this.count.x = 0;
              } else if (left < 0) {
                this.count.x++;
                position.my.x = 'left';
                position.at.x = 'right';
                position.my.offsetX *= -1;
                position.at.offsetX *= -1;
                this.right();
              }
            },
            right: function right() {
              var left = myOffset.left() + DomHandler.getOuterWidth(target);
              var scrollLeft = DomHandler.getWindowScrollLeft();
              element.style.left = left + scrollLeft + 'px';
              if (this.count.x === 2) {
                element.style.left = viewport.width - DomHandler.getOuterWidth(element) + scrollLeft + 'px';
                this.count.x = 0;
              } else if (left + DomHandler.getOuterWidth(element) > viewport.width) {
                this.count.x++;
                position.my.x = 'right';
                position.at.x = 'left';
                position.my.offsetX *= -1;
                position.at.offsetX *= -1;
                this.left();
              }
            },
            top: function top() {
              var top = myOffset.top();
              var scrollTop = DomHandler.getWindowScrollTop();
              element.style.top = top + scrollTop + 'px';
              if (this.count.y === 2) {
                element.style.left = scrollTop + 'px';
                this.count.y = 0;
              } else if (top < 0) {
                this.count.y++;
                position.my.y = 'top';
                position.at.y = 'bottom';
                position.my.offsetY *= -1;
                position.at.offsetY *= -1;
                this.bottom();
              }
            },
            bottom: function bottom() {
              var top = myOffset.top() + DomHandler.getOuterHeight(target);
              var scrollTop = DomHandler.getWindowScrollTop();
              element.style.top = top + scrollTop + 'px';
              if (this.count.y === 2) {
                element.style.left = viewport.height - DomHandler.getOuterHeight(element) + scrollTop + 'px';
                this.count.y = 0;
              } else if (top + DomHandler.getOuterHeight(target) > viewport.height) {
                this.count.y++;
                position.my.y = 'bottom';
                position.at.y = 'top';
                position.my.offsetY *= -1;
                position.at.offsetY *= -1;
                this.top();
              }
            },
            center: function center(axis) {
              if (axis === 'y') {
                var top = myOffset.top() + DomHandler.getOuterHeight(target) / 2;
                element.style.top = top + DomHandler.getWindowScrollTop() + 'px';
                if (top < 0) {
                  this.bottom();
                } else if (top + DomHandler.getOuterHeight(target) > viewport.height) {
                  this.top();
                }
              } else {
                var left = myOffset.left() + DomHandler.getOuterWidth(target) / 2;
                element.style.left = left + DomHandler.getWindowScrollLeft() + 'px';
                if (left < 0) {
                  this.left();
                } else if (left + DomHandler.getOuterWidth(element) > viewport.width) {
                  this.right();
                }
              }
            }
          };
          alignWithAt[position.at.x]('x');
          alignWithAt[position.at.y]('y');
          if (this.isFunction(callback)) {
            callback(position);
          }
        }
      }
    }, {
      key: "findCollisionPosition",
      value: function findCollisionPosition(position) {
        if (position) {
          var isAxisY = position === 'top' || position === 'bottom';
          var myXPosition = position === 'left' ? 'right' : 'left';
          var myYPosition = position === 'top' ? 'bottom' : 'top';
          if (isAxisY) {
            return {
              axis: 'y',
              my: "center ".concat(myYPosition),
              at: "center ".concat(position)
            };
          }
          return {
            axis: 'x',
            my: "".concat(myXPosition, " center"),
            at: "".concat(position, " center")
          };
        }
      }
    }, {
      key: "getParents",
      value: function getParents(element) {
        var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        return element.parentNode === null ? parents : this.getParents(element.parentNode, parents.concat([element.parentNode]));
      }

      /**
       * Gets all scrollable parent elements of a given element
       * @param {HTMLElement} element - The element to find scrollable parents for
       * @returns {Array} Array of scrollable parent elements
       */
    }, {
      key: "getScrollableParents",
      value: function getScrollableParents(element) {
        var _this3 = this;
        var scrollableParents = [];
        if (element) {
          // Get all parent elements
          var parents = this.getParents(element);
          // Regex to match auto or scroll overflow values
          var overflowRegex = /(auto|scroll)/;

          /**
           * Checks if an element has overflow scroll/auto in any direction
           * @param {HTMLElement} node - Element to check
           * @returns {boolean} True if element has overflow scroll/auto
           */
          var overflowCheck = function overflowCheck(node) {
            var styleDeclaration = node ? getComputedStyle(node) : null;
            return styleDeclaration && (overflowRegex.test(styleDeclaration.getPropertyValue('overflow')) || overflowRegex.test(styleDeclaration.getPropertyValue('overflow-x')) || overflowRegex.test(styleDeclaration.getPropertyValue('overflow-y')));
          };

          /**
           * Adds a scrollable parent element to the collection
           * @param {HTMLElement} node - Element to add
           */
          var addScrollableParent = function addScrollableParent(node) {
            // For document/body/html elements, add window instead
            scrollableParents.push(node.nodeName === 'BODY' || node.nodeName === 'HTML' || _this3.isDocument(node) ? window : node);
          };

          // Iterate through all parent elements
          var _iterator = _createForOfIteratorHelper$1(parents),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _parent$dataset;
              var parent = _step.value;
              // Check for custom scroll selectors in data attribute
              var scrollSelectors = parent.nodeType === 1 && ((_parent$dataset = parent.dataset) === null || _parent$dataset === void 0 ? void 0 : _parent$dataset.scrollselectors);
              if (scrollSelectors) {
                var selectors = scrollSelectors.split(',');

                // Check each selector
                var _iterator2 = _createForOfIteratorHelper$1(selectors),
                  _step2;
                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var selector = _step2.value;
                    var el = this.findSingle(parent, selector);
                    if (el && overflowCheck(el)) {
                      addScrollableParent(el);
                    }
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }
              }

              // Check if the parent itself is scrollable
              if (parent.nodeType === 1 && overflowCheck(parent)) {
                addScrollableParent(parent);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
        return scrollableParents;
      }
    }, {
      key: "getHiddenElementOuterHeight",
      value: function getHiddenElementOuterHeight(element) {
        if (element) {
          element.style.visibility = 'hidden';
          element.style.display = 'block';
          var elementHeight = element.offsetHeight;
          element.style.display = 'none';
          element.style.visibility = 'visible';
          return elementHeight;
        }
        return 0;
      }
    }, {
      key: "getHiddenElementOuterWidth",
      value: function getHiddenElementOuterWidth(element) {
        if (element) {
          element.style.visibility = 'hidden';
          element.style.display = 'block';
          var elementWidth = element.offsetWidth;
          element.style.display = 'none';
          element.style.visibility = 'visible';
          return elementWidth;
        }
        return 0;
      }
    }, {
      key: "getHiddenElementDimensions",
      value: function getHiddenElementDimensions(element) {
        var dimensions = {};
        if (element) {
          element.style.visibility = 'hidden';
          element.style.display = 'block';
          dimensions.width = element.offsetWidth;
          dimensions.height = element.offsetHeight;
          element.style.display = 'none';
          element.style.visibility = 'visible';
        }
        return dimensions;
      }
    }, {
      key: "fadeIn",
      value: function fadeIn(element, duration) {
        if (element) {
          element.style.opacity = 0;
          var last = +new Date();
          var opacity = 0;
          var _tick = function tick() {
            opacity = +element.style.opacity + (new Date().getTime() - last) / duration;
            element.style.opacity = opacity;
            last = +new Date();
            if (+opacity < 1) {
              window.requestAnimationFrame && requestAnimationFrame(_tick) || setTimeout(_tick, 16);
            }
          };
          _tick();
        }
      }
    }, {
      key: "fadeOut",
      value: function fadeOut(element, duration) {
        if (element) {
          var opacity = 1;
          var interval = 50;
          var gap = interval / duration;
          var fading = setInterval(function () {
            opacity = opacity - gap;
            if (opacity <= 0) {
              opacity = 0;
              clearInterval(fading);
            }
            element.style.opacity = opacity;
          }, interval);
        }
      }
    }, {
      key: "getUserAgent",
      value: function getUserAgent() {
        return navigator.userAgent;
      }
    }, {
      key: "isIOS",
      value: function isIOS() {
        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
      }
    }, {
      key: "isAndroid",
      value: function isAndroid() {
        return /(android)/i.test(navigator.userAgent);
      }
    }, {
      key: "isChrome",
      value: function isChrome() {
        return /(chrome)/i.test(navigator.userAgent);
      }
    }, {
      key: "isClient",
      value: function isClient() {
        return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
      }
    }, {
      key: "isTouchDevice",
      value: function isTouchDevice() {
        return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
      }
    }, {
      key: "isFunction",
      value: function isFunction(obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
      }
    }, {
      key: "appendChild",
      value: function appendChild(element, target) {
        if (this.isElement(target)) {
          target.appendChild(element);
        } else if (target.el && target.el.nativeElement) {
          target.el.nativeElement.appendChild(element);
        } else {
          throw new Error('Cannot append ' + target + ' to ' + element);
        }
      }
    }, {
      key: "removeChild",
      value: function removeChild(element, target) {
        if (this.isElement(target)) {
          target.removeChild(element);
        } else if (target.el && target.el.nativeElement) {
          target.el.nativeElement.removeChild(element);
        } else {
          throw new Error('Cannot remove ' + element + ' from ' + target);
        }
      }
    }, {
      key: "isElement",
      value: function isElement(obj) {
        return (typeof HTMLElement === "undefined" ? "undefined" : _typeof$3(HTMLElement)) === 'object' ? obj instanceof HTMLElement : obj && _typeof$3(obj) === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string';
      }
    }, {
      key: "isDocument",
      value: function isDocument(obj) {
        return (typeof Document === "undefined" ? "undefined" : _typeof$3(Document)) === 'object' ? obj instanceof Document : obj && _typeof$3(obj) === 'object' && obj !== null && obj.nodeType === 9;
      }
    }, {
      key: "scrollInView",
      value: function scrollInView(container, item) {
        var borderTopValue = getComputedStyle(container).getPropertyValue('border-top-width');
        var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
        var paddingTopValue = getComputedStyle(container).getPropertyValue('padding-top');
        var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
        var containerRect = container.getBoundingClientRect();
        var itemRect = item.getBoundingClientRect();
        var offset = itemRect.top + document.body.scrollTop - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
        var scroll = container.scrollTop;
        var elementHeight = container.clientHeight;
        var itemHeight = this.getOuterHeight(item);
        if (offset < 0) {
          container.scrollTop = scroll + offset;
        } else if (offset + itemHeight > elementHeight) {
          container.scrollTop = scroll + offset - elementHeight + itemHeight;
        }
      }
    }, {
      key: "clearSelection",
      value: function clearSelection() {
        if (window.getSelection) {
          if (window.getSelection().empty) {
            window.getSelection().empty();
          } else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {
            window.getSelection().removeAllRanges();
          }
        } else if (document.selection && document.selection.empty) {
          try {
            document.selection.empty();
          } catch (error) {
            //ignore IE bug
          }
        }
      }
    }, {
      key: "calculateScrollbarWidth",
      value: function calculateScrollbarWidth(el) {
        if (el) {
          var style = getComputedStyle(el);
          return el.offsetWidth - el.clientWidth - parseFloat(style.borderLeftWidth) - parseFloat(style.borderRightWidth);
        }
        if (this.calculatedScrollbarWidth != null) {
          return this.calculatedScrollbarWidth;
        }
        var scrollDiv = document.createElement('div');
        scrollDiv.className = 'p-scrollbar-measure';
        document.body.appendChild(scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        this.calculatedScrollbarWidth = scrollbarWidth;
        return scrollbarWidth;
      }
    }, {
      key: "calculateBodyScrollbarWidth",
      value: function calculateBodyScrollbarWidth() {
        return window.innerWidth - document.documentElement.offsetWidth;
      }
    }, {
      key: "getBrowser",
      value: function getBrowser() {
        if (!this.browser) {
          var matched = this.resolveUserAgent();
          this.browser = {};
          if (matched.browser) {
            this.browser[matched.browser] = true;
            this.browser.version = matched.version;
          }
          if (this.browser.chrome) {
            this.browser.webkit = true;
          } else if (this.browser.webkit) {
            this.browser.safari = true;
          }
        }
        return this.browser;
      }
    }, {
      key: "resolveUserAgent",
      value: function resolveUserAgent() {
        var ua = navigator.userAgent.toLowerCase();
        var match = /(chrome)[ ]([\w.]+)/.exec(ua) || /(webkit)[ ]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ ]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
        return {
          browser: match[1] || '',
          version: match[2] || '0'
        };
      }
    }, {
      key: "blockBodyScroll",
      value: function blockBodyScroll() {
        var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'p-overflow-hidden';
        /* PR Ref: https://github.com/primefaces/primereact/pull/4976
         * @todo This method is called several times after this PR. Refactors will be made to prevent this in future releases.
         */
        var hasScrollbarWidth = !!document.body.style.getPropertyValue('--scrollbar-width');
        !hasScrollbarWidth && document.body.style.setProperty('--scrollbar-width', this.calculateBodyScrollbarWidth() + 'px');
        this.addClass(document.body, className);
      }
    }, {
      key: "unblockBodyScroll",
      value: function unblockBodyScroll() {
        var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'p-overflow-hidden';
        document.body.style.removeProperty('--scrollbar-width');
        this.removeClass(document.body, className);
      }
    }, {
      key: "isVisible",
      value: function isVisible(element) {
        // https://stackoverflow.com/a/59096915/502366 (in future use IntersectionObserver)
        return element && (element.clientHeight !== 0 || element.getClientRects().length !== 0 || getComputedStyle(element).display !== 'none');
      }
    }, {
      key: "isExist",
      value: function isExist(element) {
        return !!(element !== null && typeof element !== 'undefined' && element.nodeName && element.parentNode);
      }
    }, {
      key: "getFocusableElements",
      value: function getFocusableElements(element) {
        var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var focusableElements = DomHandler.find(element, "button:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])".concat(selector, ",\n                [href][clientHeight][clientWidth]:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector, ",\n                input:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector, ",\n                select:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector, ",\n                textarea:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector, ",\n                [tabIndex]:not([tabIndex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector, ",\n                [contenteditable]:not([tabIndex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector));
        var visibleFocusableElements = [];
        var _iterator3 = _createForOfIteratorHelper$1(focusableElements),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var focusableElement = _step3.value;
            if (getComputedStyle(focusableElement).display !== 'none' && getComputedStyle(focusableElement).visibility !== 'hidden') {
              visibleFocusableElements.push(focusableElement);
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        return visibleFocusableElements;
      }
    }, {
      key: "getFirstFocusableElement",
      value: function getFirstFocusableElement(element, selector) {
        var focusableElements = DomHandler.getFocusableElements(element, selector);
        return focusableElements.length > 0 ? focusableElements[0] : null;
      }
    }, {
      key: "getLastFocusableElement",
      value: function getLastFocusableElement(element, selector) {
        var focusableElements = DomHandler.getFocusableElements(element, selector);
        return focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : null;
      }

      /**
       * Focus an input element if it does not already have focus.
       *
       * @param {HTMLElement} el a HTML element
       * @param {boolean} scrollTo flag to control whether to scroll to the element, false by default
       */
    }, {
      key: "focus",
      value: function focus(el, scrollTo) {
        var preventScroll = scrollTo === undefined ? true : !scrollTo;
        el && document.activeElement !== el && el.focus({
          preventScroll: preventScroll
        });
      }

      /**
       * Focus the first focusable element if it does not already have focus.
       *
       * @param {HTMLElement} el a HTML element
       * @param {boolean} scrollTo flag to control whether to scroll to the element, false by default
       * @return {HTMLElement | undefined} the first focusable HTML element found
       */
    }, {
      key: "focusFirstElement",
      value: function focusFirstElement(el, scrollTo) {
        if (!el) {
          return;
        }
        var firstFocusableElement = DomHandler.getFirstFocusableElement(el);
        firstFocusableElement && DomHandler.focus(firstFocusableElement, scrollTo);
        return firstFocusableElement;
      }
    }, {
      key: "getCursorOffset",
      value: function getCursorOffset(el, prevText, nextText, currentText) {
        if (el) {
          var style = getComputedStyle(el);
          var ghostDiv = document.createElement('div');
          ghostDiv.style.position = 'absolute';
          ghostDiv.style.top = '0px';
          ghostDiv.style.left = '0px';
          ghostDiv.style.visibility = 'hidden';
          ghostDiv.style.pointerEvents = 'none';
          ghostDiv.style.overflow = style.overflow;
          ghostDiv.style.width = style.width;
          ghostDiv.style.height = style.height;
          ghostDiv.style.padding = style.padding;
          ghostDiv.style.border = style.border;
          ghostDiv.style.overflowWrap = style.overflowWrap;
          ghostDiv.style.whiteSpace = style.whiteSpace;
          ghostDiv.style.lineHeight = style.lineHeight;
          ghostDiv.innerHTML = prevText.replace(/\r\n|\r|\n/g, '<br />');
          var ghostSpan = document.createElement('span');
          ghostSpan.textContent = currentText;
          ghostDiv.appendChild(ghostSpan);
          var text = document.createTextNode(nextText);
          ghostDiv.appendChild(text);
          document.body.appendChild(ghostDiv);
          var offsetLeft = ghostSpan.offsetLeft,
            offsetTop = ghostSpan.offsetTop,
            clientHeight = ghostSpan.clientHeight;
          document.body.removeChild(ghostDiv);
          return {
            left: Math.abs(offsetLeft - el.scrollLeft),
            top: Math.abs(offsetTop - el.scrollTop) + clientHeight
          };
        }
        return {
          top: 'auto',
          left: 'auto'
        };
      }
    }, {
      key: "invokeElementMethod",
      value: function invokeElementMethod(element, methodName, args) {
        element[methodName].apply(element, args);
      }
    }, {
      key: "isClickable",
      value: function isClickable(element) {
        var targetNode = element.nodeName;
        var parentNode = element.parentElement && element.parentElement.nodeName;
        return targetNode === 'INPUT' || targetNode === 'TEXTAREA' || targetNode === 'BUTTON' || targetNode === 'A' || parentNode === 'INPUT' || parentNode === 'TEXTAREA' || parentNode === 'BUTTON' || parentNode === 'A' || this.hasClass(element, 'p-button') || this.hasClass(element.parentElement, 'p-button') || this.hasClass(element.parentElement, 'p-checkbox') || this.hasClass(element.parentElement, 'p-radiobutton');
      }
    }, {
      key: "applyStyle",
      value: function applyStyle(element, style) {
        if (typeof style === 'string') {
          element.style.cssText = style;
        } else {
          for (var prop in style) {
            element.style[prop] = style[prop];
          }
        }
      }
    }, {
      key: "exportCSV",
      value: function exportCSV(csv, filename) {
        var blob = new Blob([csv], {
          type: 'application/csv;charset=utf-8;'
        });
        if (window.navigator.msSaveOrOpenBlob) {
          navigator.msSaveOrOpenBlob(blob, filename + '.csv');
        } else {
          var isDownloaded = DomHandler.saveAs({
            name: filename + '.csv',
            src: URL.createObjectURL(blob)
          });
          if (!isDownloaded) {
            csv = 'data:text/csv;charset=utf-8,' + csv;
            window.open(encodeURI(csv));
          }
        }
      }
    }, {
      key: "saveAs",
      value: function saveAs(file) {
        if (file) {
          var link = document.createElement('a');
          if (link.download !== undefined) {
            var name = file.name,
              src = file.src;
            link.setAttribute('href', src);
            link.setAttribute('download', name);
            link.style.display = 'none';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            return true;
          }
        }
        return false;
      }
    }, {
      key: "createInlineStyle",
      value: function createInlineStyle(nonce, styleContainer) {
        var styleElement = document.createElement('style');
        DomHandler.addNonce(styleElement, nonce);
        if (!styleContainer) {
          styleContainer = document.head;
        }
        styleContainer.appendChild(styleElement);
        return styleElement;
      }
    }, {
      key: "removeInlineStyle",
      value: function removeInlineStyle(styleElement) {
        if (this.isExist(styleElement)) {
          try {
            styleElement.parentNode.removeChild(styleElement);
          } catch (error) {
            // style element may have already been removed in a fast refresh
          }
          styleElement = null;
        }
        return styleElement;
      }
    }, {
      key: "addNonce",
      value: function addNonce(styleElement, nonce) {
        try {
          if (!nonce) {
            nonce = AdminJS.env.REACT_APP_CSS_NONCE;
          }
        } catch (error) {
          // NOOP
        }
        nonce && styleElement.setAttribute('nonce', nonce);
      }
    }, {
      key: "getTargetElement",
      value: function getTargetElement(target) {
        if (!target) {
          return null;
        }
        if (target === 'document') {
          return document;
        } else if (target === 'window') {
          return window;
        } else if (_typeof$3(target) === 'object' && target.hasOwnProperty('current')) {
          return this.isExist(target.current) ? target.current : null;
        }
        var isFunction = function isFunction(obj) {
          return !!(obj && obj.constructor && obj.call && obj.apply);
        };
        var element = isFunction(target) ? target() : target;
        return this.isDocument(element) || this.isExist(element) ? element : null;
      }

      /**
       * Get the attribute names for an element and sorts them alpha for comparison
       */
    }, {
      key: "getAttributeNames",
      value: function getAttributeNames(node) {
        var index;
        var rv;
        var attrs;
        rv = [];
        attrs = node.attributes;
        for (index = 0; index < attrs.length; ++index) {
          rv.push(attrs[index].nodeName);
        }
        rv.sort();
        return rv;
      }

      /**
       * Compare two elements for equality.  Even will compare if the style element
       * is out of order for example:
       *
       * elem1 = style="color: red; font-size: 28px"
       * elem2 = style="font-size: 28px; color: red"
       */
    }, {
      key: "isEqualElement",
      value: function isEqualElement(elm1, elm2) {
        var attrs1;
        var attrs2;
        var name;
        var node1;
        var node2;

        // Compare attributes without order sensitivity
        attrs1 = DomHandler.getAttributeNames(elm1);
        attrs2 = DomHandler.getAttributeNames(elm2);
        if (attrs1.join(',') !== attrs2.join(',')) {
          // console.log("Found nodes with different sets of attributes; not equiv");
          return false;
        }

        // ...and values
        // unless you want to compare DOM0 event handlers
        // (onclick="...")
        for (var index = 0; index < attrs1.length; ++index) {
          name = attrs1[index];
          if (name === 'style') {
            var astyle = elm1.style;
            var bstyle = elm2.style;
            var rexDigitsOnly = /^\d+$/;
            for (var _i3 = 0, _Object$keys = Object.keys(astyle); _i3 < _Object$keys.length; _i3++) {
              var key = _Object$keys[_i3];
              if (!rexDigitsOnly.test(key) && astyle[key] !== bstyle[key]) {
                // Not equivalent, stop
                //console.log("Found nodes with mis-matched values for attribute '" + name + "'; not equiv");
                return false;
              }
            }
          } else if (elm1.getAttribute(name) !== elm2.getAttribute(name)) {
            // console.log("Found nodes with mis-matched values for attribute '" + name + "'; not equiv");
            return false;
          }
        }

        // Walk the children
        for (node1 = elm1.firstChild, node2 = elm2.firstChild; node1 && node2; node1 = node1.nextSibling, node2 = node2.nextSibling) {
          if (node1.nodeType !== node2.nodeType) {
            // display("Found nodes of different types; not equiv");
            return false;
          }
          if (node1.nodeType === 1) {
            // Element
            if (!DomHandler.isEqualElement(node1, node2)) {
              return false;
            }
          } else if (node1.nodeValue !== node2.nodeValue) {
            // console.log("Found nodes with mis-matched nodeValues; not equiv");
            return false;
          }
        }
        if (node1 || node2) {
          // One of the elements had more nodes than the other
          // console.log("Found more children of one element than the other; not equivalent");
          return false;
        }

        // Seem the same
        return true;
      }
    }, {
      key: "hasCSSAnimation",
      value: function hasCSSAnimation(element) {
        if (element) {
          var style = getComputedStyle(element);
          var animationDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');
          return animationDuration > 0;
        }
        return false;
      }
    }, {
      key: "hasCSSTransition",
      value: function hasCSSTransition(element) {
        if (element) {
          var style = getComputedStyle(element);
          var transitionDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');
          return transitionDuration > 0;
        }
        return false;
      }
    }]);
  }();
  /**
   * All data- properties like data-test-id
   */
  _defineProperty$3(DomHandler, "DATA_PROPS", ['data-']);
  /**
   * All ARIA properties like aria-label and focus-target for https://www.npmjs.com/package/@q42/floating-focus-a11y
   */
  _defineProperty$3(DomHandler, "ARIA_PROPS", ['aria', 'focus-target']);

  function EventBus() {
    var allHandlers = new Map();
    return {
      on: function on(type, handler) {
        var handlers = allHandlers.get(type);
        if (!handlers) {
          handlers = [handler];
        } else {
          handlers.push(handler);
        }
        allHandlers.set(type, handlers);
      },
      off: function off(type, handler) {
        var handlers = allHandlers.get(type);
        handlers && handlers.splice(handlers.indexOf(handler) >>> 0, 1);
      },
      emit: function emit(type, evt) {
        var handlers = allHandlers.get(type);
        handlers && handlers.slice().forEach(function (handler) {
          return handler(evt);
        });
      }
    };
  }

  function _extends$1() {
    return _extends$1 = Object.assign ? Object.assign.bind() : function (n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends$1.apply(null, arguments);
  }

  function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$3(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  function _unsupportedIterableToArray$3(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$3(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$3(r, a) : void 0; } }
  function _arrayLikeToArray$3(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  var ObjectUtils = /*#__PURE__*/function () {
    function ObjectUtils() {
      _classCallCheck(this, ObjectUtils);
    }
    return _createClass(ObjectUtils, null, [{
      key: "equals",
      value: function equals(obj1, obj2, field) {
        if (field && obj1 && _typeof$3(obj1) === 'object' && obj2 && _typeof$3(obj2) === 'object') {
          return this.deepEquals(this.resolveFieldData(obj1, field), this.resolveFieldData(obj2, field));
        }
        return this.deepEquals(obj1, obj2);
      }

      /**
       * Compares two JSON objects for deep equality recursively comparing both objects.
       * @param {*} a the first JSON object
       * @param {*} b the second JSON object
       * @returns true if equals, false it not
       */
    }, {
      key: "deepEquals",
      value: function deepEquals(a, b) {
        if (a === b) {
          return true;
        }
        if (a && b && _typeof$3(a) === 'object' && _typeof$3(b) === 'object') {
          var arrA = Array.isArray(a);
          var arrB = Array.isArray(b);
          var i;
          var length;
          var key;
          if (arrA && arrB) {
            length = a.length;
            if (length !== b.length) {
              return false;
            }
            for (i = length; i-- !== 0;) {
              if (!this.deepEquals(a[i], b[i])) {
                return false;
              }
            }
            return true;
          }
          if (arrA !== arrB) {
            return false;
          }
          var dateA = a instanceof Date;
          var dateB = b instanceof Date;
          if (dateA !== dateB) {
            return false;
          }
          if (dateA && dateB) {
            return a.getTime() === b.getTime();
          }
          var regexpA = a instanceof RegExp;
          var regexpB = b instanceof RegExp;
          if (regexpA !== regexpB) {
            return false;
          }
          if (regexpA && regexpB) {
            return a.toString() === b.toString();
          }
          var keys = Object.keys(a);
          length = keys.length;
          if (length !== Object.keys(b).length) {
            return false;
          }
          for (i = length; i-- !== 0;) {
            if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {
              return false;
            }
          }
          for (i = length; i-- !== 0;) {
            key = keys[i];
            if (!this.deepEquals(a[key], b[key])) {
              return false;
            }
          }
          return true;
        }

        /*eslint no-self-compare: "off"*/
        return a !== a && b !== b;
      }
    }, {
      key: "resolveFieldData",
      value: function resolveFieldData(data, field) {
        if (!data || !field) {
          // short circuit if there is nothing to resolve
          return null;
        }
        try {
          var value = data[field];
          if (this.isNotEmpty(value)) {
            return value;
          }
        } catch (_unused) {
          // Performance optimization: https://github.com/primefaces/primereact/issues/4797
          // do nothing and continue to other methods to resolve field data
        }
        if (Object.keys(data).length) {
          if (this.isFunction(field)) {
            return field(data);
          } else if (this.isNotEmpty(data[field])) {
            return data[field];
          } else if (field.indexOf('.') === -1) {
            return data[field];
          }
          var fields = field.split('.');
          var _value = data;
          for (var i = 0, len = fields.length; i < len; ++i) {
            if (_value == null) {
              return null;
            }
            _value = _value[fields[i]];
          }
          return _value;
        }
        return null;
      }
    }, {
      key: "findDiffKeys",
      value: function findDiffKeys(obj1, obj2) {
        if (!obj1 || !obj2) {
          return {};
        }
        return Object.keys(obj1).filter(function (key) {
          return !obj2.hasOwnProperty(key);
        }).reduce(function (result, current) {
          result[current] = obj1[current];
          return result;
        }, {});
      }

      /**
       * Removes keys from a JSON object that start with a string such as "data" to get all "data-id" type properties.
       *
       * @param {any} obj the JSON object to reduce
       * @param {string[]} startsWiths the string(s) to check if the property starts with this key
       * @returns the JSON object containing only the key/values that match the startsWith string
       */
    }, {
      key: "reduceKeys",
      value: function reduceKeys(obj, startsWiths) {
        var result = {};
        if (!obj || !startsWiths || startsWiths.length === 0) {
          return result;
        }
        Object.keys(obj).filter(function (key) {
          return startsWiths.some(function (value) {
            return key.startsWith(value);
          });
        }).forEach(function (key) {
          result[key] = obj[key];
          delete obj[key];
        });
        return result;
      }
    }, {
      key: "reorderArray",
      value: function reorderArray(value, from, to) {
        if (value && from !== to) {
          if (to >= value.length) {
            to = to % value.length;
            from = from % value.length;
          }
          value.splice(to, 0, value.splice(from, 1)[0]);
        }
      }
    }, {
      key: "findIndexInList",
      value: function findIndexInList(value, list, dataKey) {
        var _this = this;
        if (list) {
          return dataKey ? list.findIndex(function (item) {
            return _this.equals(item, value, dataKey);
          }) : list.findIndex(function (item) {
            return item === value;
          });
        }
        return -1;
      }
    }, {
      key: "getJSXElement",
      value: function getJSXElement(obj) {
        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }
        return this.isFunction(obj) ? obj.apply(void 0, params) : obj;
      }
    }, {
      key: "getItemValue",
      value: function getItemValue(obj) {
        for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          params[_key2 - 1] = arguments[_key2];
        }
        return this.isFunction(obj) ? obj.apply(void 0, params) : obj;
      }
    }, {
      key: "getProp",
      value: function getProp(props) {
        var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var value = props ? props[prop] : undefined;
        return value === undefined ? defaultProps[prop] : value;
      }
    }, {
      key: "getPropCaseInsensitive",
      value: function getPropCaseInsensitive(props, prop) {
        var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var fkey = this.toFlatCase(prop);
        for (var key in props) {
          if (props.hasOwnProperty(key) && this.toFlatCase(key) === fkey) {
            return props[key];
          }
        }
        for (var _key3 in defaultProps) {
          if (defaultProps.hasOwnProperty(_key3) && this.toFlatCase(_key3) === fkey) {
            return defaultProps[_key3];
          }
        }
        return undefined; // Property not found
      }
    }, {
      key: "getMergedProps",
      value: function getMergedProps(props, defaultProps) {
        return Object.assign({}, defaultProps, props);
      }
    }, {
      key: "getDiffProps",
      value: function getDiffProps(props, defaultProps) {
        return this.findDiffKeys(props, defaultProps);
      }

      /**
       * Gets the value of a property which can be a function or a direct value.
       * If the property is a function, it will be invoked with the provided parameters.
       * @param {*} obj - The object to get the value from
       * @param {...*} params - Parameters to pass to the function if obj is a function
       * @returns {*} The resolved value
       */
    }, {
      key: "getPropValue",
      value: function getPropValue(obj) {
        // If obj is not a function, return it directly
        if (!this.isFunction(obj)) {
          return obj;
        }

        // Handle function invocation
        for (var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key4 = 1; _key4 < _len3; _key4++) {
          params[_key4 - 1] = arguments[_key4];
        }
        if (params.length === 1) {
          // For single parameter case, unwrap array if needed to avoid extra nesting
          var param = params[0];
          return obj(Array.isArray(param) ? param[0] : param);
        }

        // Pass all parameters to function
        return obj.apply(void 0, params);
      }
    }, {
      key: "getComponentProp",
      value: function getComponentProp(component) {
        var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return this.isNotEmpty(component) ? this.getProp(component.props, prop, defaultProps) : undefined;
      }
    }, {
      key: "getComponentProps",
      value: function getComponentProps(component, defaultProps) {
        return this.isNotEmpty(component) ? this.getMergedProps(component.props, defaultProps) : undefined;
      }
    }, {
      key: "getComponentDiffProps",
      value: function getComponentDiffProps(component, defaultProps) {
        return this.isNotEmpty(component) ? this.getDiffProps(component.props, defaultProps) : undefined;
      }
    }, {
      key: "isValidChild",
      value: function isValidChild(child, type, validTypes) {
        /* eslint-disable */
        if (child) {
          var _child$type;
          var childType = this.getComponentProp(child, '__TYPE') || (child.type ? child.type.displayName : undefined);

          // for App Router in Next.js ^14,
          if (!childType && child !== null && child !== void 0 && (_child$type = child.type) !== null && _child$type !== void 0 && (_child$type = _child$type._payload) !== null && _child$type !== void 0 && _child$type.value) {
            childType = child.type._payload.value.find(function (v) {
              return v === type;
            });
          }
          var isValid = childType === type;
          try {
            var messageTypes; if ("production" !== 'production' && !isValid) ;
          } catch (error) {
            // NOOP
          }
          return isValid;
        }
        return false;
        /* eslint-enable */
      }
    }, {
      key: "getRefElement",
      value: function getRefElement(ref) {
        if (ref) {
          return _typeof$3(ref) === 'object' && ref.hasOwnProperty('current') ? ref.current : ref;
        }
        return null;
      }
    }, {
      key: "combinedRefs",
      value: function combinedRefs(innerRef, forwardRef) {
        if (innerRef && forwardRef) {
          if (typeof forwardRef === 'function') {
            forwardRef(innerRef.current);
          } else {
            forwardRef.current = innerRef.current;
          }
        }
      }
    }, {
      key: "removeAccents",
      value: function removeAccents(str) {
        if (str && str.search(/[\xC0-\xFF]/g) > -1) {
          str = str.replace(/[\xC0-\xC5]/g, 'A').replace(/[\xC6]/g, 'AE').replace(/[\xC7]/g, 'C').replace(/[\xC8-\xCB]/g, 'E').replace(/[\xCC-\xCF]/g, 'I').replace(/[\xD0]/g, 'D').replace(/[\xD1]/g, 'N').replace(/[\xD2-\xD6\xD8]/g, 'O').replace(/[\xD9-\xDC]/g, 'U').replace(/[\xDD]/g, 'Y').replace(/[\xDE]/g, 'P').replace(/[\xE0-\xE5]/g, 'a').replace(/[\xE6]/g, 'ae').replace(/[\xE7]/g, 'c').replace(/[\xE8-\xEB]/g, 'e').replace(/[\xEC-\xEF]/g, 'i').replace(/[\xF1]/g, 'n').replace(/[\xF2-\xF6\xF8]/g, 'o').replace(/[\xF9-\xFC]/g, 'u').replace(/[\xFE]/g, 'p').replace(/[\xFD\xFF]/g, 'y');
        }
        return str;
      }
    }, {
      key: "toFlatCase",
      value: function toFlatCase(str) {
        // convert snake, kebab, camel and pascal cases to flat case
        return this.isNotEmpty(str) && this.isString(str) ? str.replace(/(-|_)/g, '').toLowerCase() : str;
      }
    }, {
      key: "toCapitalCase",
      value: function toCapitalCase(str) {
        return this.isNotEmpty(str) && this.isString(str) ? str[0].toUpperCase() + str.slice(1) : str;
      }
    }, {
      key: "trim",
      value: function trim(value) {
        // trim only if the value is actually a string
        return this.isNotEmpty(value) && this.isString(value) ? value.trim() : value;
      }
    }, {
      key: "isEmpty",
      value: function isEmpty(value) {
        return value === null || value === undefined || value === '' || Array.isArray(value) && value.length === 0 || !(value instanceof Date) && _typeof$3(value) === 'object' && Object.keys(value).length === 0;
      }
    }, {
      key: "isNotEmpty",
      value: function isNotEmpty(value) {
        return !this.isEmpty(value);
      }
    }, {
      key: "isFunction",
      value: function isFunction(value) {
        return !!(value && value.constructor && value.call && value.apply);
      }
    }, {
      key: "isObject",
      value: function isObject(value) {
        return value !== null && value instanceof Object && value.constructor === Object;
      }
    }, {
      key: "isDate",
      value: function isDate(value) {
        return value !== null && value instanceof Date && value.constructor === Date;
      }
    }, {
      key: "isArray",
      value: function isArray(value) {
        return value !== null && Array.isArray(value);
      }
    }, {
      key: "isString",
      value: function isString(value) {
        return value !== null && typeof value === 'string';
      }
    }, {
      key: "isPrintableCharacter",
      value: function isPrintableCharacter() {
        var _char = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        return this.isNotEmpty(_char) && _char.length === 1 && _char.match(/\S| /);
      }
    }, {
      key: "isLetter",
      value: function isLetter(_char2) {
        return /^[a-zA-Z\u00C0-\u017F]$/.test(_char2);
      }
    }, {
      key: "isScalar",
      value: function isScalar(value) {
        return value != null && (typeof value === 'string' || typeof value === 'number' || typeof value === 'bigint' || typeof value === 'boolean');
      }

      /**
       * Firefox-v103 does not currently support the "findLast" method. It is stated that this method will be supported with Firefox-v104.
       * https://caniuse.com/mdn-javascript_builtins_array_findlast
       */
    }, {
      key: "findLast",
      value: function findLast(arr, callback) {
        var item;
        if (this.isNotEmpty(arr)) {
          try {
            item = arr.findLast(callback);
          } catch (_unused2) {
            item = _toConsumableArray$2(arr).reverse().find(callback);
          }
        }
        return item;
      }

      /**
       * Firefox-v103 does not currently support the "findLastIndex" method. It is stated that this method will be supported with Firefox-v104.
       * https://caniuse.com/mdn-javascript_builtins_array_findlastindex
       */
    }, {
      key: "findLastIndex",
      value: function findLastIndex(arr, callback) {
        var index = -1;
        if (this.isNotEmpty(arr)) {
          try {
            index = arr.findLastIndex(callback);
          } catch (_unused3) {
            index = arr.lastIndexOf(_toConsumableArray$2(arr).reverse().find(callback));
          }
        }
        return index;
      }
    }, {
      key: "sort",
      value: function sort(value1, value2) {
        var order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var comparator = arguments.length > 3 ? arguments[3] : undefined;
        var nullSortOrder = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
        var result = this.compare(value1, value2, comparator, order);
        var finalSortOrder = order;

        // nullSortOrder == 1 means Excel like sort nulls at bottom
        if (this.isEmpty(value1) || this.isEmpty(value2)) {
          finalSortOrder = nullSortOrder === 1 ? order : nullSortOrder;
        }
        return finalSortOrder * result;
      }
    }, {
      key: "compare",
      value: function compare(value1, value2, comparator) {
        var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        var result = -1;
        var emptyValue1 = this.isEmpty(value1);
        var emptyValue2 = this.isEmpty(value2);
        if (emptyValue1 && emptyValue2) {
          result = 0;
        } else if (emptyValue1) {
          result = order;
        } else if (emptyValue2) {
          result = -order;
        } else if (typeof value1 === 'string' && typeof value2 === 'string') {
          result = comparator(value1, value2);
        } else {
          result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;
        }
        return result;
      }
    }, {
      key: "localeComparator",
      value: function localeComparator(locale) {
        //performance gain using Int.Collator. It is not recommended to use localeCompare against large arrays.
        return new Intl.Collator(locale, {
          numeric: true
        }).compare;
      }
    }, {
      key: "findChildrenByKey",
      value: function findChildrenByKey(data, key) {
        var _iterator = _createForOfIteratorHelper(data),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;
            if (item.key === key) {
              return item.children || [];
            } else if (item.children) {
              var result = this.findChildrenByKey(item.children, key);
              if (result.length > 0) {
                return result;
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return [];
      }

      /**
       * This function takes mutates and object with a new value given
       * a specific field. This will handle deeply nested fields that
       * need to be modified or created.
       *
       * e.g:
       * data = {
       *  nested: {
       *      foo: "bar"
       *  }
       * }
       *
       * field = "nested.foo"
       * value = "baz"
       *
       * The function will mutate data to be
       * e.g:
       * data = {
       *  nested: {
       *      foo: "baz"
       *  }
       * }
       *
       * @param {object} data the object to be modified
       * @param {string} field the field in the object to replace
       * @param {any} value the value to have replaced in the field
       */
    }, {
      key: "mutateFieldData",
      value: function mutateFieldData(data, field, value) {
        if (_typeof$3(data) !== 'object' || typeof field !== 'string') {
          // short circuit if there is nothing to resolve
          return;
        }
        var fields = field.split('.');
        var obj = data;
        for (var i = 0, len = fields.length; i < len; ++i) {
          // Check if we are on the last field
          if (i + 1 - len === 0) {
            obj[fields[i]] = value;
            break;
          }
          if (!obj[fields[i]]) {
            obj[fields[i]] = {};
          }
          obj = obj[fields[i]];
        }
      }

      /**
       * This helper function takes an object and a dot-separated key path. It traverses the object based on the path,
       * returning the value at the specified depth. If any part of the path is missing or undefined, it returns undefined.
       *
       * Example:
       * const obj = { name: 'Alice', address: { city: 'Wonderland', zip: 12345 } };
       * const path = 'address.city';
       * const result = ObjectUtils.getNestedValue(obj, path);
       * console.log(result); // Output: "Wonderland"
       *
       * @param {object} obj - The object to traverse.
       * @param {string} path - The dot-separated key path.
       * @returns {*} The value at the specified depth, or undefined if any part of the path is missing or undefined.
       */
    }, {
      key: "getNestedValue",
      value: function getNestedValue(obj, path) {
        return path.split('.').reduce(function (acc, part) {
          return acc && acc[part] !== undefined ? acc[part] : undefined;
        }, obj);
      }

      /**
       * This function takes an object and a dot-separated key path. It traverses the object based on the path,
       * returning the value at the specified depth. If any part of the path is missing or undefined, it returns undefined.
       *
       * Example:
       * const objA = { name: 'Alice', address: { city: 'Wonderland', zip: 12345 } };
       * const objB = { name: 'Alice', address: { city: 'Wonderland', zip: 12345 } };
       * const result = ObjectUtils.absoluteCompare(objA, objB);
       * console.log(result); // Output: true
       *
       * const objC = { name: 'Alice', address: { city: 'Wonderland', zip: 12346 } };
       * const result2 = ObjectUtils.absoluteCompare(objA, objC);
       * console.log(result2); // Output: false
       *
       * @param {object} objA - The first object to compare.
       * @param {object} objB - The second object to compare.
       * @param {number} [maxDepth=1] - The maximum depth to compare.
       * @param {number} [currentDepth=0] - The current depth (used internally for recursion).
       * @returns {boolean} True if the objects are equal within the specified depth, false otherwise.
       *
       */
    }, {
      key: "absoluteCompare",
      value: function absoluteCompare(objA, objB) {
        var maxDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var currentDepth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        if (!objA || !objB) return true;
        if (currentDepth > maxDepth) return true;
        if (_typeof$3(objA) !== _typeof$3(objB)) return false;
        var aKeys = Object.keys(objA);
        var bKeys = Object.keys(objB);
        if (aKeys.length !== bKeys.length) return false;
        for (var _i = 0, _aKeys = aKeys; _i < _aKeys.length; _i++) {
          var key = _aKeys[_i];
          var aValue = objA[key];
          var bValue = objB[key];

          // Skip comparison if values are objects
          var isObject = ObjectUtils.isObject(aValue) && ObjectUtils.isObject(bValue);
          var isFunction = ObjectUtils.isFunction(aValue) && ObjectUtils.isFunction(bValue);
          if ((isObject || isFunction) && !this.absoluteCompare(aValue, bValue, maxDepth, currentDepth + 1)) return false;
          if (!isObject && aValue !== bValue) return false;
        }
        return true;
      }

      /**
       * This helper function takes two objects and a list of keys to compare. It compares the values of the specified keys
       * in both objects. If any comparison fails, it returns false. If all specified properties are equal, it returns true.
       * It performs a shallow comparison using absoluteCompare if no keys are provided.
       *
       * Example:
       * const objA = { name: 'Alice', address: { city: 'Wonderland', zip: 12345 } };
       * const objB = { name: 'Alice', address: { city: 'Wonderland', zip: 12345 } };
       * const keysToCompare = ['name', 'address.city', 'address.zip'];
       * const result = ObjectUtils.selectiveCompare(objA, objB, keysToCompare);
       * console.log(result); // Output: true
       *
       * const objC = { name: 'Alice', address: { city: 'Wonderland', zip: 12346 } };
       * const result2 = ObjectUtils.selectiveCompare(objA, objC, keysToCompare);
       * console.log(result2); // Output: false
       *
       * @param {object} a - The first object to compare.
       * @param {object} b - The second object to compare.
       * @param {string[]} [keysToCompare] - The keys to compare. If not provided, performs a shallow comparison using absoluteCompare.
       * @param {number} [maxDepth=1] - The maximum depth to compare if the variables are objects.
       * @returns {boolean} True if all specified properties are equal, false otherwise.
       */
    }, {
      key: "selectiveCompare",
      value: function selectiveCompare(a, b, keysToCompare) {
        var maxDepth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        if (a === b) return true;
        if (!a || !b || _typeof$3(a) !== 'object' || _typeof$3(b) !== 'object') return false;
        if (!keysToCompare) return this.absoluteCompare(a, b, 1); // If no keys are provided, the comparison is limited to one depth level.
        var _iterator2 = _createForOfIteratorHelper(keysToCompare),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var key = _step2.value;
            var aValue = this.getNestedValue(a, key);
            var bValue = this.getNestedValue(b, key);
            var isObject = _typeof$3(aValue) === 'object' && aValue !== null && _typeof$3(bValue) === 'object' && bValue !== null;

            // If the current key is an object, they are compared in one further level only.
            if (isObject && !this.absoluteCompare(aValue, bValue, maxDepth)) return false;
            if (!isObject && aValue !== bValue) return false;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        return true;
      }
    }]);
  }();

  var lastId = 0;
  function UniqueComponentId() {
    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'pr_id_';
    lastId++;
    return "".concat(prefix).concat(lastId);
  }

  function ownKeys$2$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2$1(Object(t), true).forEach(function (r) { _defineProperty$3(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var IconUtils = /*#__PURE__*/function () {
    function IconUtils() {
      _classCallCheck(this, IconUtils);
    }
    return _createClass(IconUtils, null, [{
      key: "getJSXIcon",
      value: function getJSXIcon(icon) {
        var iconProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var content = null;
        if (icon !== null) {
          var iconType = _typeof$3(icon);
          var className = classNames(iconProps.className, iconType === 'string' && icon);
          content = /*#__PURE__*/React__namespace$2.createElement("span", _extends$1({}, iconProps, {
            className: className,
            key: UniqueComponentId('icon')
          }));
          if (iconType !== 'string') {
            var defaultContentOptions = _objectSpread$2$1({
              iconProps: iconProps,
              element: content
            }, options);
            return ObjectUtils.getJSXElement(icon, defaultContentOptions);
          }
        }
        return content;
      }
    }]);
  }();

  function ownKeys$1$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1$2(Object(t), true).forEach(function (r) { _defineProperty$3(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function mask(el, options) {
    var defaultOptions = {
      mask: null,
      slotChar: '_',
      autoClear: true,
      unmask: false,
      readOnly: false,
      onComplete: null,
      onChange: null,
      onFocus: null,
      onBlur: null
    };
    options = _objectSpread$1$2(_objectSpread$1$2({}, defaultOptions), options);
    var tests;
    var partialPosition;
    var len;
    var firstNonMaskPos;
    var defs;
    var androidChrome;
    var lastRequiredNonMaskPos;
    var oldVal;
    var focusText;
    var caretTimeoutId;
    var buffer;
    var defaultBuffer;
    var caret = function caret(first, last) {
      var range;
      var begin;
      var end;
      if (!el.offsetParent || el !== document.activeElement) {
        return;
      }
      if (typeof first === 'number') {
        begin = first;
        end = typeof last === 'number' ? last : begin;
        if (el.setSelectionRange) {
          el.setSelectionRange(begin, end);
        } else if (el.createTextRange) {
          range = el.createTextRange();
          range.collapse(true);
          range.moveEnd('character', end);
          range.moveStart('character', begin);
          range.select();
        }
      } else {
        if (el.setSelectionRange) {
          begin = el.selectionStart;
          end = el.selectionEnd;
        } else if (document.selection && document.selection.createRange) {
          range = document.selection.createRange();
          begin = 0 - range.duplicate().moveStart('character', -1e5);
          end = begin + range.text.length;
        }
        return {
          begin: begin,
          end: end
        };
      }
    };
    var isCompleted = function isCompleted() {
      for (var i = firstNonMaskPos; i <= lastRequiredNonMaskPos; i++) {
        if (tests[i] && buffer[i] === getPlaceholder(i)) {
          return false;
        }
      }
      return true;
    };
    var getPlaceholder = function getPlaceholder(i) {
      if (i < options.slotChar.length) {
        return options.slotChar.charAt(i);
      }
      return options.slotChar.charAt(0);
    };
    var getValue = function getValue() {
      return options.unmask ? getUnmaskedValue() : el && el.value;
    };
    var seekNext = function seekNext(pos) {
      while (++pos < len && !tests[pos]) {}
      return pos;
    };
    var seekPrev = function seekPrev(pos) {
      while (--pos >= 0 && !tests[pos]) {}
      return pos;
    };
    var shiftL = function shiftL(begin, end) {
      var i;
      var j;
      if (begin < 0) {
        return;
      }
      for (i = begin, j = seekNext(end); i < len; i++) {
        if (tests[i]) {
          if (j < len && tests[i].test(buffer[j])) {
            buffer[i] = buffer[j];
            buffer[j] = getPlaceholder(j);
          } else {
            break;
          }
          j = seekNext(j);
        }
      }
      writeBuffer();
      caret(Math.max(firstNonMaskPos, begin));
    };
    var shiftR = function shiftR(pos) {
      var i;
      var c;
      var j;
      var t;
      for (i = pos, c = getPlaceholder(pos); i < len; i++) {
        if (tests[i]) {
          j = seekNext(i);
          t = buffer[i];
          buffer[i] = c;
          if (j < len && tests[j].test(t)) {
            c = t;
          } else {
            break;
          }
        }
      }
    };
    var handleAndroidInput = function handleAndroidInput(e) {
      var curVal = el.value;
      var pos = caret();
      if (oldVal && oldVal.length && oldVal.length > curVal.length) {
        // a deletion or backspace happened
        checkVal(true);
        while (pos.begin > 0 && !tests[pos.begin - 1]) {
          pos.begin--;
        }
        if (pos.begin === 0) {
          while (pos.begin < firstNonMaskPos && !tests[pos.begin]) {
            pos.begin++;
          }
        }
        caret(pos.begin, pos.begin);
      } else {
        checkVal(true);
        while (pos.begin < len && !tests[pos.begin]) {
          pos.begin++;
        }
        caret(pos.begin, pos.begin);
      }
      if (options.onComplete && isCompleted()) {
        options.onComplete({
          originalEvent: e,
          value: getValue()
        });
      }
    };
    var onBlur = function onBlur(e) {
      checkVal();
      options.onBlur && options.onBlur(e);
      updateModel(e);
      if (el.value !== focusText) {
        var event = document.createEvent('HTMLEvents');
        event.initEvent('change', true, false);
        el.dispatchEvent(event);
      }
    };
    var onKeyDown = function onKeyDown(e) {
      if (options.readOnly) {
        return;
      }
      var k = e.which || e.keyCode;
      var pos;
      var begin;
      var end;
      oldVal = el.value;

      //backspace, delete, and escape get special treatment
      if (k === 8 || k === 46 || DomHandler.isIOS() && k === 127) {
        pos = caret();
        begin = pos.begin;
        end = pos.end;
        if (end - begin === 0) {
          begin = k !== 46 ? seekPrev(begin) : end = seekNext(begin - 1);
          end = k === 46 ? seekNext(end) : end;
        }
        clearBuffer(begin, end);
        shiftL(begin, end - 1);
        updateModel(e);
        e.preventDefault();
      } else if (k === 13) {
        // enter
        onBlur(e);
        updateModel(e);
      } else if (k === 27) {
        // escape
        el.value = focusText;
        caret(0, checkVal());
        updateModel(e);
        e.preventDefault();
      }
    };
    var onKeyPress = function onKeyPress(e) {
      if (options.readOnly) {
        return;
      }
      var k = e.which || e.keyCode;
      var pos = caret();
      var p;
      var c;
      var next;
      var completed;
      if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {
        //Ignore
        return;
      } else if (k && k !== 13) {
        if (pos.end - pos.begin !== 0) {
          clearBuffer(pos.begin, pos.end);
          shiftL(pos.begin, pos.end - 1);
        }
        p = seekNext(pos.begin - 1);
        if (p < len) {
          c = String.fromCharCode(k);
          if (tests[p].test(c)) {
            shiftR(p);
            buffer[p] = c;
            writeBuffer();
            next = seekNext(p);
            if (DomHandler.isAndroid()) {
              //Path for CSP Violation on FireFox OS 1.1
              var proxy = function proxy() {
                caret(next);
              };
              setTimeout(proxy, 0);
            } else {
              caret(next);
            }
            if (pos.begin <= lastRequiredNonMaskPos) {
              completed = isCompleted();
            }
          }
        }
        e.preventDefault();
      }
      updateModel(e);
      if (options.onComplete && completed) {
        options.onComplete({
          originalEvent: e,
          value: getValue()
        });
      }
    };
    var clearBuffer = function clearBuffer(start, end) {
      var i;
      for (i = start; i < end && i < len; i++) {
        if (tests[i]) {
          buffer[i] = getPlaceholder(i);
        }
      }
    };
    var writeBuffer = function writeBuffer() {
      el.value = buffer.join('');
    };
    var checkVal = function checkVal(allow) {
      //try to place characters where they belong
      var test = el.value;
      var lastMatch = -1;
      var i;
      var c;
      var pos;
      for (i = 0, pos = 0; i < len; i++) {
        if (tests[i]) {
          buffer[i] = getPlaceholder(i);
          while (pos++ < test.length) {
            c = test.charAt(pos - 1);
            if (tests[i].test(c)) {
              buffer[i] = c;
              lastMatch = i;
              break;
            }
          }
          if (pos > test.length) {
            clearBuffer(i + 1, len);
            break;
          }
        } else {
          if (buffer[i] === test.charAt(pos)) {
            pos++;
          }
          if (i < partialPosition) {
            lastMatch = i;
          }
        }
      }
      if (allow) {
        writeBuffer();
      } else if (lastMatch + 1 < partialPosition) {
        if (options.autoClear || buffer.join('') === defaultBuffer) {
          // Invalid value. Remove it and replace it with the
          // mask, which is the default behavior.
          if (el.value) {
            el.value = '';
          }
          clearBuffer(0, len);
        } else {
          // Invalid value, but we opt to show the value to the
          // user and allow them to correct their mistake.
          writeBuffer();
        }
      } else {
        writeBuffer();
        el.value = el.value.substring(0, lastMatch + 1);
      }
      return partialPosition ? i : firstNonMaskPos;
    };
    var onFocus = function onFocus(e) {
      if (options.readOnly) {
        return;
      }
      clearTimeout(caretTimeoutId);
      var pos;
      focusText = el.value;
      pos = checkVal();
      caretTimeoutId = setTimeout(function () {
        if (el !== document.activeElement) {
          return;
        }
        writeBuffer();
        if (pos === options.mask.replace('?', '').length) {
          caret(0, pos);
        } else {
          caret(pos);
        }
      }, 100);
      if (options.onFocus) {
        options.onFocus(e);
      }
    };
    var onInput = function onInput(event) {
      if (androidChrome) {
        handleAndroidInput(event);
      } else {
        handleInputChange(event);
      }
    };
    var handleInputChange = function handleInputChange(e) {
      if (options.readOnly) {
        return;
      }
      var pos = checkVal(true);
      caret(pos);
      updateModel(e);
      if (options.onComplete && isCompleted()) {
        options.onComplete({
          originalEvent: e,
          value: getValue()
        });
      }
    };
    var getUnmaskedValue = function getUnmaskedValue() {
      var unmaskedBuffer = [];
      for (var i = 0; i < buffer.length; i++) {
        var c = buffer[i];
        if (tests[i] && c !== getPlaceholder(i)) {
          unmaskedBuffer.push(c);
        }
      }
      return unmaskedBuffer.join('');
    };
    var updateModel = function updateModel(e) {
      if (options.onChange) {
        var val = getValue();
        options.onChange({
          originalEvent: e,
          value: defaultBuffer !== val ? val : '',
          stopPropagation: function stopPropagation() {
            e.stopPropagation();
          },
          preventDefault: function preventDefault() {
            e.preventDefault();
          },
          target: {
            value: defaultBuffer !== val ? val : ''
          }
        });
      }
    };
    var bindEvents = function bindEvents() {
      el.addEventListener('focus', onFocus);
      el.addEventListener('blur', onBlur);
      el.addEventListener('keydown', onKeyDown);
      el.addEventListener('keypress', onKeyPress);
      el.addEventListener('input', onInput);
      el.addEventListener('paste', handleInputChange);
    };
    var unbindEvents = function unbindEvents() {
      el.removeEventListener('focus', onFocus);
      el.removeEventListener('blur', onBlur);
      el.removeEventListener('keydown', onKeyDown);
      el.removeEventListener('keypress', onKeyPress);
      el.removeEventListener('input', onInput);
      el.removeEventListener('paste', handleInputChange);
    };
    var init = function init() {
      tests = [];
      partialPosition = options.mask.length;
      len = options.mask.length;
      firstNonMaskPos = null;
      defs = {
        9: '[0-9]',
        a: '[A-Za-z]',
        '*': '[A-Za-z0-9]'
      };
      androidChrome = DomHandler.isChrome() && DomHandler.isAndroid();
      var maskTokens = options.mask.split('');
      for (var i = 0; i < maskTokens.length; i++) {
        var c = maskTokens[i];
        if (c === '?') {
          len--;
          partialPosition = i;
        } else if (defs[c]) {
          tests.push(new RegExp(defs[c]));
          if (firstNonMaskPos === null) {
            firstNonMaskPos = tests.length - 1;
          }
          if (i < partialPosition) {
            lastRequiredNonMaskPos = tests.length - 1;
          }
        } else {
          tests.push(null);
        }
      }
      buffer = [];
      for (var _i = 0; _i < maskTokens.length; _i++) {
        var _c = maskTokens[_i];
        if (_c !== '?') {
          if (defs[_c]) {
            buffer.push(getPlaceholder(_i));
          } else {
            buffer.push(_c);
          }
        }
      }
      defaultBuffer = buffer.join('');
    };
    if (el && options.mask) {
      init();
      bindEvents();
    }
    return {
      init: init,
      bindEvents: bindEvents,
      unbindEvents: unbindEvents,
      updateModel: updateModel,
      getValue: getValue
    };
  }

  function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), true).forEach(function (r) { _defineProperty$3(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  /**
   * Merges properties together taking an Array of props and merging into one single set of
   * properties. The options can contain a "classNameMergeFunction" which can be something
   * like Tailwind Merge for properly merging Tailwind classes.
   *
   * @param {object[]} props the array of object properties to merge
   * @param {*} options either empty or could contain a custom merge function like TailwindMerge
   * @returns the single properties value after merging
   */
  function mergeProps(props) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!props) {
      return undefined;
    }
    var isFunction = function isFunction(obj) {
      return typeof obj === 'function';
    };
    var classNameMergeFunction = options.classNameMergeFunction;
    var hasMergeFunction = isFunction(classNameMergeFunction);
    return props.reduce(function (merged, ps) {
      if (!ps) {
        return merged;
      }
      var _loop = function _loop() {
        var value = ps[key];
        if (key === 'style') {
          merged.style = _objectSpread$3(_objectSpread$3({}, merged.style), ps.style);
        } else if (key === 'className') {
          var newClassName = '';
          if (hasMergeFunction) {
            newClassName = classNameMergeFunction(merged.className, ps.className);
          } else {
            newClassName = [merged.className, ps.className].join(' ').trim();
          }
          merged.className = newClassName || undefined;
        } else if (isFunction(value)) {
          var existingFn = merged[key];
          merged[key] = existingFn ? function () {
            existingFn.apply(void 0, arguments);
            value.apply(void 0, arguments);
          } : value;
        } else {
          merged[key] = value;
        }
      };
      for (var key in ps) {
        _loop();
      }
      return merged;
    }, {});
  }

  function handler() {
    var zIndexes = [];
    var generateZIndex = function generateZIndex(key, autoZIndex) {
      var baseZIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 999;
      var lastZIndex = getLastZIndex(key, autoZIndex, baseZIndex);
      var newZIndex = lastZIndex.value + (lastZIndex.key === key ? 0 : baseZIndex) + 1;
      zIndexes.push({
        key: key,
        value: newZIndex
      });
      return newZIndex;
    };
    var revertZIndex = function revertZIndex(zIndex) {
      zIndexes = zIndexes.filter(function (obj) {
        return obj.value !== zIndex;
      });
    };
    var getCurrentZIndex = function getCurrentZIndex(key, autoZIndex) {
      return getLastZIndex(key, autoZIndex).value;
    };
    var getLastZIndex = function getLastZIndex(key, autoZIndex) {
      var baseZIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      return _toConsumableArray$2(zIndexes).reverse().find(function (obj) {
        return autoZIndex ? true : obj.key === key;
      }) || {
        key: key,
        value: baseZIndex
      };
    };
    var getZIndex = function getZIndex(el) {
      return el ? parseInt(el.style.zIndex, 10) || 0 : 0;
    };
    return {
      get: getZIndex,
      set: function set(key, el, autoZIndex, baseZIndex) {
        if (el) {
          el.style.zIndex = String(generateZIndex(key, autoZIndex, baseZIndex));
        }
      },
      clear: function clear(el) {
        if (el) {
          revertZIndex(ZIndexUtils.get(el));
          el.style.zIndex = '';
        }
      },
      getCurrent: function getCurrent(key, autoZIndex) {
        return getCurrentZIndex(key, autoZIndex);
      }
    };
  }
  var ZIndexUtils = handler();

  utils_cjs.DomHandler = DomHandler;
  utils_cjs.EventBus = EventBus;
  utils_cjs.IconUtils = IconUtils;
  utils_cjs.ObjectUtils = ObjectUtils;
  utils_cjs.UniqueComponentId = UniqueComponentId;
  utils_cjs.ZIndexUtils = ZIndexUtils;
  utils_cjs.classNames = classNames;
  utils_cjs.mask = mask;
  utils_cjs.mergeProps = mergeProps;

  (function (exports) {
  	'use client';

  	Object.defineProperty(exports, '__esModule', { value: true });

  	var utils = utils_cjs;
  	var React = React__default.default;

  	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  	var React__default$1 = /*#__PURE__*/_interopDefaultLegacy(React);

  	var FilterMatchMode = Object.freeze({
  	  STARTS_WITH: 'startsWith',
  	  CONTAINS: 'contains',
  	  NOT_CONTAINS: 'notContains',
  	  ENDS_WITH: 'endsWith',
  	  EQUALS: 'equals',
  	  NOT_EQUALS: 'notEquals',
  	  IN: 'in',
  	  NOT_IN: 'notIn',
  	  LESS_THAN: 'lt',
  	  LESS_THAN_OR_EQUAL_TO: 'lte',
  	  GREATER_THAN: 'gt',
  	  GREATER_THAN_OR_EQUAL_TO: 'gte',
  	  BETWEEN: 'between',
  	  DATE_IS: 'dateIs',
  	  DATE_IS_NOT: 'dateIsNot',
  	  DATE_BEFORE: 'dateBefore',
  	  DATE_AFTER: 'dateAfter',
  	  CUSTOM: 'custom'
  	});

  	var FilterOperator = Object.freeze({
  	  AND: 'and',
  	  OR: 'or'
  	});

  	function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$1(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: true } : { done: false, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = true, u = false; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = true, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
  	function _unsupportedIterableToArray$1(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$1(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0; } }
  	function _arrayLikeToArray$1(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
  	var FilterService = {
  	  filter: function filter(value, fields, filterValue, filterMatchMode, filterLocale) {
  	    var filteredItems = [];
  	    if (!value) {
  	      return filteredItems;
  	    }
  	    var _iterator = _createForOfIteratorHelper(value),
  	      _step;
  	    try {
  	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
  	        var item = _step.value;
  	        if (typeof item === 'string') {
  	          if (this.filters[filterMatchMode](item, filterValue, filterLocale)) {
  	            filteredItems.push(item);
  	            continue;
  	          }
  	        } else {
  	          var _iterator2 = _createForOfIteratorHelper(fields),
  	            _step2;
  	          try {
  	            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
  	              var field = _step2.value;
  	              var fieldValue = utils.ObjectUtils.resolveFieldData(item, field);
  	              if (this.filters[filterMatchMode](fieldValue, filterValue, filterLocale)) {
  	                filteredItems.push(item);
  	                break;
  	              }
  	            }
  	          } catch (err) {
  	            _iterator2.e(err);
  	          } finally {
  	            _iterator2.f();
  	          }
  	        }
  	      }
  	    } catch (err) {
  	      _iterator.e(err);
  	    } finally {
  	      _iterator.f();
  	    }
  	    return filteredItems;
  	  },
  	  filters: {
  	    startsWith: function startsWith(value, filter, filterLocale) {
  	      if (filter === undefined || filter === null || filter.trim() === '') {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      var filterValue = utils.ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
  	      var stringValue = utils.ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
  	      return stringValue.slice(0, filterValue.length) === filterValue;
  	    },
  	    contains: function contains(value, filter, filterLocale) {
  	      if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      var filterValue = utils.ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
  	      var stringValue = utils.ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
  	      return stringValue.indexOf(filterValue) !== -1;
  	    },
  	    notContains: function notContains(value, filter, filterLocale) {
  	      if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      var filterValue = utils.ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
  	      var stringValue = utils.ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
  	      return stringValue.indexOf(filterValue) === -1;
  	    },
  	    endsWith: function endsWith(value, filter, filterLocale) {
  	      if (filter === undefined || filter === null || filter.trim() === '') {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      var filterValue = utils.ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
  	      var stringValue = utils.ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
  	      return stringValue.indexOf(filterValue, stringValue.length - filterValue.length) !== -1;
  	    },
  	    equals: function equals(value, filter, filterLocale) {
  	      if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      if (value.getTime && filter.getTime) {
  	        return value.getTime() === filter.getTime();
  	      }
  	      return utils.ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale) === utils.ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
  	    },
  	    notEquals: function notEquals(value, filter, filterLocale) {
  	      if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return true;
  	      }
  	      if (value.getTime && filter.getTime) {
  	        return value.getTime() !== filter.getTime();
  	      }
  	      return utils.ObjectUtils.removeAccents(value.toString()).toLocaleLowerCase(filterLocale) !== utils.ObjectUtils.removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
  	    },
  	    "in": function _in(value, filter) {
  	      if (filter === undefined || filter === null || filter.length === 0) {
  	        return true;
  	      }
  	      for (var i = 0; i < filter.length; i++) {
  	        if (utils.ObjectUtils.equals(value, filter[i])) {
  	          return true;
  	        }
  	      }
  	      return false;
  	    },
  	    notIn: function notIn(value, filter) {
  	      if (filter === undefined || filter === null || filter.length === 0) {
  	        return true;
  	      }
  	      for (var i = 0; i < filter.length; i++) {
  	        if (utils.ObjectUtils.equals(value, filter[i])) {
  	          return false;
  	        }
  	      }
  	      return true;
  	    },
  	    between: function between(value, filter) {
  	      if (filter == null || filter[0] == null || filter[1] == null) {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      if (value.getTime) {
  	        return filter[0].getTime() <= value.getTime() && value.getTime() <= filter[1].getTime();
  	      }
  	      return filter[0] <= value && value <= filter[1];
  	    },
  	    lt: function lt(value, filter) {
  	      if (filter === undefined || filter === null) {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      if (value.getTime && filter.getTime) {
  	        return value.getTime() < filter.getTime();
  	      }
  	      return value < filter;
  	    },
  	    lte: function lte(value, filter) {
  	      if (filter === undefined || filter === null) {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      if (value.getTime && filter.getTime) {
  	        return value.getTime() <= filter.getTime();
  	      }
  	      return value <= filter;
  	    },
  	    gt: function gt(value, filter) {
  	      if (filter === undefined || filter === null) {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      if (value.getTime && filter.getTime) {
  	        return value.getTime() > filter.getTime();
  	      }
  	      return value > filter;
  	    },
  	    gte: function gte(value, filter) {
  	      if (filter === undefined || filter === null) {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      if (value.getTime && filter.getTime) {
  	        return value.getTime() >= filter.getTime();
  	      }
  	      return value >= filter;
  	    },
  	    dateIs: function dateIs(value, filter) {
  	      if (filter === undefined || filter === null) {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      return value.toDateString() === filter.toDateString();
  	    },
  	    dateIsNot: function dateIsNot(value, filter) {
  	      if (filter === undefined || filter === null) {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      return value.toDateString() !== filter.toDateString();
  	    },
  	    dateBefore: function dateBefore(value, filter) {
  	      if (filter === undefined || filter === null) {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      return value.getTime() < filter.getTime();
  	    },
  	    dateAfter: function dateAfter(value, filter) {
  	      if (filter === undefined || filter === null) {
  	        return true;
  	      }
  	      if (value === undefined || value === null) {
  	        return false;
  	      }
  	      return value.getTime() > filter.getTime();
  	    }
  	  },
  	  register: function register(rule, fn) {
  	    this.filters[rule] = fn;
  	  }
  	};

  	function _typeof(o) {
  	  "@babel/helpers - typeof";

  	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
  	    return typeof o;
  	  } : function (o) {
  	    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  	  }, _typeof(o);
  	}

  	function toPrimitive(t, r) {
  	  if ("object" != _typeof(t) || !t) return t;
  	  var e = t[Symbol.toPrimitive];
  	  if (void 0 !== e) {
  	    var i = e.call(t, r);
  	    if ("object" != _typeof(i)) return i;
  	    throw new TypeError("@@toPrimitive must return a primitive value.");
  	  }
  	  return ("string" === r ? String : Number)(t);
  	}

  	function toPropertyKey(t) {
  	  var i = toPrimitive(t, "string");
  	  return "symbol" == _typeof(i) ? i : i + "";
  	}

  	function _defineProperty(e, r, t) {
  	  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
  	    value: t,
  	    enumerable: true,
  	    configurable: true,
  	    writable: true
  	  }) : e[r] = t, e;
  	}
  	function _createClass(e, r, t) {
  	  return Object.defineProperty(e, "prototype", {
  	    writable: false
  	  }), e;
  	}

  	function _classCallCheck(a, n) {
  	  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  	}

  	/**
  	 * @deprecated please use PrimeReactContext
  	 */
  	var PrimeReact$1 = /*#__PURE__*/_createClass(function PrimeReact() {
  	  _classCallCheck(this, PrimeReact);
  	});
  	_defineProperty(PrimeReact$1, "ripple", false);
  	_defineProperty(PrimeReact$1, "inputStyle", 'outlined');
  	_defineProperty(PrimeReact$1, "locale", 'en');
  	_defineProperty(PrimeReact$1, "appendTo", null);
  	_defineProperty(PrimeReact$1, "cssTransition", true);
  	_defineProperty(PrimeReact$1, "autoZIndex", true);
  	_defineProperty(PrimeReact$1, "hideOverlaysOnDocumentScrolling", false);
  	_defineProperty(PrimeReact$1, "nonce", null);
  	_defineProperty(PrimeReact$1, "nullSortOrder", 1);
  	_defineProperty(PrimeReact$1, "zIndex", {
  	  modal: 1100,
  	  overlay: 1000,
  	  menu: 1000,
  	  tooltip: 1100,
  	  toast: 1200
  	});
  	_defineProperty(PrimeReact$1, "pt", undefined);
  	_defineProperty(PrimeReact$1, "filterMatchModeOptions", {
  	  text: [FilterMatchMode.STARTS_WITH, FilterMatchMode.CONTAINS, FilterMatchMode.NOT_CONTAINS, FilterMatchMode.ENDS_WITH, FilterMatchMode.EQUALS, FilterMatchMode.NOT_EQUALS],
  	  numeric: [FilterMatchMode.EQUALS, FilterMatchMode.NOT_EQUALS, FilterMatchMode.LESS_THAN, FilterMatchMode.LESS_THAN_OR_EQUAL_TO, FilterMatchMode.GREATER_THAN, FilterMatchMode.GREATER_THAN_OR_EQUAL_TO],
  	  date: [FilterMatchMode.DATE_IS, FilterMatchMode.DATE_IS_NOT, FilterMatchMode.DATE_BEFORE, FilterMatchMode.DATE_AFTER]
  	});
  	_defineProperty(PrimeReact$1, "changeTheme", function (currentTheme, newTheme, linkElementId, callback) {
  	  var _linkElement$parentNo;
  	  var linkElement = document.getElementById(linkElementId);
  	  if (!linkElement) {
  	    throw Error("Element with id ".concat(linkElementId, " not found."));
  	  }
  	  var newThemeUrl = linkElement.getAttribute('href').replace(currentTheme, newTheme);
  	  var newLinkElement = document.createElement('link');
  	  newLinkElement.setAttribute('rel', 'stylesheet');
  	  newLinkElement.setAttribute('id', linkElementId);
  	  newLinkElement.setAttribute('href', newThemeUrl);
  	  newLinkElement.addEventListener('load', function () {
  	    if (callback) {
  	      callback();
  	    }
  	  });
  	  (_linkElement$parentNo = linkElement.parentNode) === null || _linkElement$parentNo === void 0 || _linkElement$parentNo.replaceChild(newLinkElement, linkElement);
  	});

  	function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  	function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  	var locales = {
  	  en: {
  	    accept: 'Yes',
  	    addRule: 'Add Rule',
  	    am: 'AM',
  	    apply: 'Apply',
  	    cancel: 'Cancel',
  	    choose: 'Choose',
  	    chooseDate: 'Choose Date',
  	    chooseMonth: 'Choose Month',
  	    chooseYear: 'Choose Year',
  	    clear: 'Clear',
  	    completed: 'Completed',
  	    contains: 'Contains',
  	    custom: 'Custom',
  	    dateAfter: 'Date is after',
  	    dateBefore: 'Date is before',
  	    dateFormat: 'mm/dd/yy',
  	    dateIs: 'Date is',
  	    dateIsNot: 'Date is not',
  	    dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
  	    dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  	    dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  	    emptyFilterMessage: 'No results found',
  	    emptyMessage: 'No available options',
  	    emptySearchMessage: 'No results found',
  	    emptySelectionMessage: 'No selected item',
  	    endsWith: 'Ends with',
  	    equals: 'Equals',
  	    fileChosenMessage: '{0} files',
  	    fileSizeTypes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
  	    filter: 'Filter',
  	    firstDayOfWeek: 0,
  	    gt: 'Greater than',
  	    gte: 'Greater than or equal to',
  	    lt: 'Less than',
  	    lte: 'Less than or equal to',
  	    matchAll: 'Match All',
  	    matchAny: 'Match Any',
  	    medium: 'Medium',
  	    monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
  	    monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  	    nextDecade: 'Next Decade',
  	    nextHour: 'Next Hour',
  	    nextMinute: 'Next Minute',
  	    nextMonth: 'Next Month',
  	    nextSecond: 'Next Second',
  	    nextYear: 'Next Year',
  	    noFileChosenMessage: 'No file chosen',
  	    noFilter: 'No Filter',
  	    notContains: 'Not contains',
  	    notEquals: 'Not equals',
  	    now: 'Now',
  	    passwordPrompt: 'Enter a password',
  	    pending: 'Pending',
  	    pm: 'PM',
  	    prevDecade: 'Previous Decade',
  	    prevHour: 'Previous Hour',
  	    prevMinute: 'Previous Minute',
  	    prevMonth: 'Previous Month',
  	    prevSecond: 'Previous Second',
  	    prevYear: 'Previous Year',
  	    reject: 'No',
  	    removeRule: 'Remove Rule',
  	    searchMessage: '{0} results are available',
  	    selectionMessage: '{0} items selected',
  	    showMonthAfterYear: false,
  	    startsWith: 'Starts with',
  	    strong: 'Strong',
  	    today: 'Today',
  	    upload: 'Upload',
  	    weak: 'Weak',
  	    weekHeader: 'Wk',
  	    aria: {
  	      cancelEdit: 'Cancel Edit',
  	      close: 'Close',
  	      collapseLabel: 'Collapse',
  	      collapseRow: 'Row Collapsed',
  	      editRow: 'Edit Row',
  	      expandLabel: 'Expand',
  	      expandRow: 'Row Expanded',
  	      falseLabel: 'False',
  	      filterConstraint: 'Filter Constraint',
  	      filterOperator: 'Filter Operator',
  	      firstPageLabel: 'First Page',
  	      gridView: 'Grid View',
  	      hideFilterMenu: 'Hide Filter Menu',
  	      jumpToPageDropdownLabel: 'Jump to Page Dropdown',
  	      jumpToPageInputLabel: 'Jump to Page Input',
  	      lastPageLabel: 'Last Page',
  	      listLabel: 'Option List',
  	      listView: 'List View',
  	      moveAllToSource: 'Move All to Source',
  	      moveAllToTarget: 'Move All to Target',
  	      moveBottom: 'Move Bottom',
  	      moveDown: 'Move Down',
  	      moveToSource: 'Move to Source',
  	      moveToTarget: 'Move to Target',
  	      moveTop: 'Move Top',
  	      moveUp: 'Move Up',
  	      navigation: 'Navigation',
  	      next: 'Next',
  	      nextPageLabel: 'Next Page',
  	      nullLabel: 'Not Selected',
  	      otpLabel: 'Please enter one time password character {0}',
  	      pageLabel: 'Page {page}',
  	      passwordHide: 'Hide Password',
  	      passwordShow: 'Show Password',
  	      previous: 'Previous',
  	      prevPageLabel: 'Previous Page',
  	      removeLabel: 'Remove',
  	      rotateLeft: 'Rotate Left',
  	      rotateRight: 'Rotate Right',
  	      rowsPerPageLabel: 'Rows per page',
  	      saveEdit: 'Save Edit',
  	      scrollTop: 'Scroll Top',
  	      selectAll: 'All items selected',
  	      selectLabel: 'Select',
  	      selectRow: 'Row Selected',
  	      showFilterMenu: 'Show Filter Menu',
  	      slide: 'Slide',
  	      slideNumber: '{slideNumber}',
  	      star: '1 star',
  	      stars: '{star} stars',
  	      trueLabel: 'True',
  	      unselectAll: 'All items unselected',
  	      unselectLabel: 'Unselect',
  	      unselectRow: 'Row Unselected',
  	      zoomImage: 'Zoom Image',
  	      zoomIn: 'Zoom In',
  	      zoomOut: 'Zoom Out'
  	    }
  	  }
  	};
  	function locale(locale) {
  	  locale && (PrimeReact$1.locale = locale);
  	  return {
  	    locale: PrimeReact$1.locale,
  	    options: locales[PrimeReact$1.locale]
  	  };
  	}
  	function addLocale(locale, options) {
  	  if (locale.includes('__proto__') || locale.includes('prototype')) {
  	    throw new Error('Unsafe locale detected');
  	  }
  	  locales[locale] = _objectSpread(_objectSpread({}, locales.en), options);
  	}
  	function updateLocaleOption(key, value, locale) {
  	  if (key.includes('__proto__') || key.includes('prototype')) {
  	    throw new Error('Unsafe key detected');
  	  }
  	  localeOptions(locale)[key] = value;
  	}
  	function updateLocaleOptions(options, locale) {
  	  if (locale.includes('__proto__') || locale.includes('prototype')) {
  	    throw new Error('Unsafe locale detected');
  	  }
  	  var _locale = locale || PrimeReact$1.locale;
  	  locales[_locale] = _objectSpread(_objectSpread({}, locales[_locale]), options);
  	}
  	function localeOption(key, locale) {
  	  if (key.includes('__proto__') || key.includes('prototype')) {
  	    throw new Error('Unsafe key detected');
  	  }
  	  var _locale = locale || PrimeReact$1.locale;
  	  try {
  	    return localeOptions(_locale)[key];
  	  } catch (error) {
  	    throw new Error("The ".concat(key, " option is not found in the current locale('").concat(_locale, "')."));
  	  }
  	}

  	/**
  	 * Find an ARIA label in the locale by key.  If options are passed it will replace all options:
  	 * ```ts
  	 * const ariaValue = "Page {page}, User {user}, Role {role}";
  	 * const options = { page: 2, user: "John", role: "Admin" };
  	 * const result = ariaLabel('yourLabel', { page: 2, user: "John", role: "Admin" })
  	 * console.log(result); // Output: Page 2, User John, Role Admin
  	 * ```
  	 * @param {string} ariaKey key of the ARIA label to look up in locale.
  	 * @param {any} options JSON options like { page: 2, user: "John", role: "Admin" }
  	 * @returns the ARIA label with replaced values
  	 */
  	function ariaLabel(ariaKey, options) {
  	  if (ariaKey.includes('__proto__') || ariaKey.includes('prototype')) {
  	    throw new Error('Unsafe ariaKey detected');
  	  }
  	  var _locale = PrimeReact$1.locale;
  	  try {
  	    var _ariaLabel = localeOptions(_locale).aria[ariaKey];
  	    if (_ariaLabel) {
  	      for (var key in options) {
  	        if (options.hasOwnProperty(key)) {
  	          _ariaLabel = _ariaLabel.replace("{".concat(key, "}"), options[key]);
  	        }
  	      }
  	    }
  	    return _ariaLabel;
  	  } catch (error) {
  	    throw new Error("The ".concat(ariaKey, " option is not found in the current locale('").concat(_locale, "')."));
  	  }
  	}
  	function localeOptions(locale) {
  	  var _locale = locale || PrimeReact$1.locale;
  	  if (_locale.includes('__proto__') || _locale.includes('prototype')) {
  	    throw new Error('Unsafe locale detected');
  	  }
  	  return locales[_locale];
  	}

  	var MessageSeverity = Object.freeze({
  	  SUCCESS: 'success',
  	  INFO: 'info',
  	  WARN: 'warn',
  	  ERROR: 'error',
  	  SECONDARY: 'secondary',
  	  CONTRAST: 'contrast'
  	});

  	var PrimeIcons = Object.freeze({
  	  ADDRESS_BOOK: 'pi pi-address-book',
  	  ALIGN_CENTER: 'pi pi-align-center',
  	  ALIGN_JUSTIFY: 'pi pi-align-justify',
  	  ALIGN_LEFT: 'pi pi-align-left',
  	  ALIGN_RIGHT: 'pi pi-align-right',
  	  AMAZON: 'pi pi-amazon',
  	  ANDROID: 'pi pi-android',
  	  ANGLE_DOUBLE_DOWN: 'pi pi-angle-double-down',
  	  ANGLE_DOUBLE_LEFT: 'pi pi-angle-double-left',
  	  ANGLE_DOUBLE_RIGHT: 'pi pi-angle-double-right',
  	  ANGLE_DOUBLE_UP: 'pi pi-angle-double-up',
  	  ANGLE_DOWN: 'pi pi-angle-down',
  	  ANGLE_LEFT: 'pi pi-angle-left',
  	  ANGLE_RIGHT: 'pi pi-angle-right',
  	  ANGLE_UP: 'pi pi-angle-up',
  	  APPLE: 'pi pi-apple',
  	  ARROW_CIRCLE_DOWN: 'pi pi-arrow-circle-down',
  	  ARROW_CIRCLE_LEFT: 'pi pi-arrow-circle-left',
  	  ARROW_CIRCLE_RIGHT: 'pi pi-arrow-circle-right',
  	  ARROW_CIRCLE_UP: 'pi pi-arrow-circle-up',
  	  ARROW_DOWN_LEFT_AND_ARROW_UP_RIGHT_TO_CENTER: 'pi pi-arrow-down-left-and-arrow-up-right-to-center',
  	  ARROW_DOWN_LEFT: 'pi pi-arrow-down-left',
  	  ARROW_DOWN_RIGHT: 'pi pi-arrow-down-right',
  	  ARROW_DOWN: 'pi pi-arrow-down',
  	  ARROW_LEFT: 'pi pi-arrow-left',
  	  ARROW_RIGHT_ARROW_LEFT: 'pi pi-arrow-right-arrow-left',
  	  ARROW_RIGHT: 'pi pi-arrow-right',
  	  ARROW_UP_LEFT: 'pi pi-arrow-up-left',
  	  ARROW_UP_RIGHT_AND_ARROW_DOWN_LEFT_FROM_CENTER: 'pi pi-arrow-up-right-and-arrow-down-left-from-center',
  	  ARROW_UP_RIGHT: 'pi pi-arrow-up-right',
  	  ARROW_UP: 'pi pi-arrow-up',
  	  ARROWS_ALT: 'pi pi-arrows-alt',
  	  ARROWS_H: 'pi pi-arrows-h',
  	  ARROWS_V: 'pi pi-arrows-v',
  	  ASTERISK: 'pi pi-asterisk',
  	  AT: 'pi pi-at',
  	  BACKWARD: 'pi pi-backward',
  	  BAN: 'pi pi-ban',
  	  BARCODE: 'pi pi-barcode',
  	  BARS: 'pi pi-bars',
  	  BELL_SLASH: 'pi pi-bell-slash',
  	  BELL: 'pi pi-bell',
  	  BITCOIN: 'pi pi-bitcoin',
  	  BOLT: 'pi pi-bolt',
  	  BOOK: 'pi pi-book',
  	  BOOKMARK_FILL: 'pi pi-bookmark-fill',
  	  BOOKMARK: 'pi pi-bookmark',
  	  BOX: 'pi pi-box',
  	  BRIEFCASE: 'pi pi-briefcase',
  	  BUILDING_COLUMNS: 'pi pi-building-columns',
  	  BUILDING: 'pi pi-building',
  	  BULLSEYE: 'pi pi-bullseye',
  	  CALCULATOR: 'pi pi-calculator',
  	  CALENDAR_CLOCK: 'pi pi-calendar-clock',
  	  CALENDAR_MINUS: 'pi pi-calendar-minus',
  	  CALENDAR_PLUS: 'pi pi-calendar-plus',
  	  CALENDAR_TIMES: 'pi pi-calendar-times',
  	  CALENDAR: 'pi pi-calendar',
  	  CAMERA: 'pi pi-camera',
  	  CAR: 'pi pi-car',
  	  CARET_DOWN: 'pi pi-caret-down',
  	  CARET_LEFT: 'pi pi-caret-left',
  	  CARET_RIGHT: 'pi pi-caret-right',
  	  CARET_UP: 'pi pi-caret-up',
  	  CART_ARROW_DOWN: 'pi pi-cart-arrow-down',
  	  CART_MINUS: 'pi pi-cart-minus',
  	  CART_PLUS: 'pi pi-cart-plus',
  	  CHART_BAR: 'pi pi-chart-bar',
  	  CHART_LINE: 'pi pi-chart-line',
  	  CHART_PIE: 'pi pi-chart-pie',
  	  CHART_SCATTER: 'pi pi-chart-scatter',
  	  CHECK_CIRCLE: 'pi pi-check-circle',
  	  CHECK_SQUARE: 'pi pi-check-square',
  	  CHECK: 'pi pi-check',
  	  CHEVRON_CIRCLE_DOWN: 'pi pi-chevron-circle-down',
  	  CHEVRON_CIRCLE_LEFT: 'pi pi-chevron-circle-left',
  	  CHEVRON_CIRCLE_RIGHT: 'pi pi-chevron-circle-right',
  	  CHEVRON_CIRCLE_UP: 'pi pi-chevron-circle-up',
  	  CHEVRON_DOWN: 'pi pi-chevron-down',
  	  CHEVRON_LEFT: 'pi pi-chevron-left',
  	  CHEVRON_RIGHT: 'pi pi-chevron-right',
  	  CHEVRON_UP: 'pi pi-chevron-up',
  	  CIRCLE_FILL: 'pi pi-circle-fill',
  	  CIRCLE_OFF: 'pi pi-circle-off',
  	  CIRCLE_ON: 'pi pi-circle-on',
  	  CIRCLE: 'pi pi-circle',
  	  CLIPBOARD: 'pi pi-clipboard',
  	  CLOCK: 'pi pi-clock',
  	  CLONE: 'pi pi-clone',
  	  CLOUD_DOWNLOAD: 'pi pi-cloud-download',
  	  CLOUD_UPLOAD: 'pi pi-cloud-upload',
  	  CLOUD: 'pi pi-cloud',
  	  CODE: 'pi pi-code',
  	  COG: 'pi pi-cog',
  	  COMMENT: 'pi pi-comment',
  	  COMMENTS: 'pi pi-comments',
  	  COMPASS: 'pi pi-compass',
  	  COPY: 'pi pi-copy',
  	  CREDIT_CARD: 'pi pi-credit-card',
  	  CROWN: 'pi pi-crown',
  	  DATABASE: 'pi pi-database',
  	  DELETE_LEFT: 'pi pi-delete-left',
  	  DESKTOP: 'pi pi-desktop',
  	  DIRECTIONS_ALT: 'pi pi-directions-alt',
  	  DIRECTIONS: 'pi pi-directions',
  	  DISCORD: 'pi pi-discord',
  	  DOLLAR: 'pi pi-dollar',
  	  DOWNLOAD: 'pi pi-download',
  	  EJECT: 'pi pi-eject',
  	  ELLIPSIS_H: 'pi pi-ellipsis-h',
  	  ELLIPSIS_V: 'pi pi-ellipsis-v',
  	  ENVELOPE: 'pi pi-envelope',
  	  EQUALS: 'pi pi-equals',
  	  ERASER: 'pi pi-eraser',
  	  ETHEREUM: 'pi pi-ethereum',
  	  EURO: 'pi pi-euro',
  	  EXCLAMATION_CIRCLE: 'pi pi-exclamation-circle',
  	  EXCLAMATION_TRIANGLE: 'pi pi-exclamation-triangle',
  	  EXPAND: 'pi pi-expand',
  	  EXTERNAL_LINK: 'pi pi-external-link',
  	  EYE_SLASH: 'pi pi-eye-slash',
  	  EYE: 'pi pi-eye',
  	  FACE_SMILE: 'pi pi-face-smile',
  	  FACEBOOK: 'pi pi-facebook',
  	  FAST_BACKWARD: 'pi pi-fast-backward',
  	  FAST_FORWARD: 'pi pi-fast-forward',
  	  FILE_ARROW_UP: 'pi pi-file-arrow-up',
  	  FILE_CHECK: 'pi pi-file-check',
  	  FILE_EDIT: 'pi pi-file-edit',
  	  FILE_EXCEL: 'pi pi-file-excel',
  	  FILE_EXPORT: 'pi pi-file-export',
  	  FILE_IMPORT: 'pi pi-file-import',
  	  FILE_O: 'pi pi-file-o',
  	  FILE_PDF: 'pi pi-file-pdf',
  	  FILE_PLUS: 'pi pi-file-plus',
  	  FILE_WORD: 'pi pi-file-word',
  	  FILE: 'pi pi-file',
  	  FILTER_FILL: 'pi pi-filter-fill',
  	  FILTER_SLASH: 'pi pi-filter-slash',
  	  FILTER: 'pi pi-filter',
  	  FLAG_FILL: 'pi pi-flag-fill',
  	  FLAG: 'pi pi-flag',
  	  FOLDER_OPEN: 'pi pi-folder-open',
  	  FOLDER_PLUS: 'pi pi-folder-plus',
  	  FOLDER: 'pi pi-folder',
  	  FORWARD: 'pi pi-forward',
  	  GAUGE: 'pi pi-gauge',
  	  GIFT: 'pi pi-gift',
  	  GITHUB: 'pi pi-github',
  	  GLOBE: 'pi pi-globe',
  	  GOOGLE: 'pi pi-google',
  	  GRADUATION_CAP: 'pi pi-graduation-cap',
  	  HAMMER: 'pi pi-hammer',
  	  HASHTAG: 'pi pi-hashtag',
  	  HEADPHONES: 'pi pi-headphones',
  	  HEART_FILL: 'pi pi-heart-fill',
  	  HEART: 'pi pi-heart',
  	  HISTORY: 'pi pi-history',
  	  HOME: 'pi pi-home',
  	  HOURGLASS: 'pi pi-hourglass',
  	  ID_CARD: 'pi pi-id-card',
  	  IMAGE: 'pi pi-image',
  	  IMAGES: 'pi pi-images',
  	  INBOX: 'pi pi-inbox',
  	  INDIAN_RUPEE: 'pi pi-indian-rupee',
  	  INFO_CIRCLE: 'pi pi-info-circle',
  	  INFO: 'pi pi-info',
  	  INSTAGRAM: 'pi pi-instagram',
  	  KEY: 'pi pi-key',
  	  LANGUAGE: 'pi pi-language',
  	  LIGHTBULB: 'pi pi-lightbulb',
  	  LINK: 'pi pi-link',
  	  LINKEDIN: 'pi pi-linkedin',
  	  LIST_CHECK: 'pi pi-list-check',
  	  LIST: 'pi pi-list',
  	  LOCK_OPEN: 'pi pi-lock-open',
  	  LOCK: 'pi pi-lock',
  	  MAP_MARKER: 'pi pi-map-marker',
  	  MAP: 'pi pi-map',
  	  MARS: 'pi pi-mars',
  	  MEGAPHONE: 'pi pi-megaphone',
  	  MICROCHIP_AI: 'pi pi-microchip-ai',
  	  MICROCHIP: 'pi pi-microchip',
  	  MICROPHONE: 'pi pi-microphone',
  	  MICROSOFT: 'pi pi-microsoft',
  	  MINUS_CIRCLE: 'pi pi-minus-circle',
  	  MINUS: 'pi pi-minus',
  	  MOBILE: 'pi pi-mobile',
  	  MONEY_BILL: 'pi pi-money-bill',
  	  MOON: 'pi pi-moon',
  	  OBJECTS_COLUMN: 'pi pi-objects-column',
  	  PALETTE: 'pi pi-palette',
  	  PAPERCLIP: 'pi pi-paperclip',
  	  PAUSE_CIRCLE: 'pi pi-pause-circle',
  	  PAUSE: 'pi pi-pause',
  	  PAYPAL: 'pi pi-paypal',
  	  PEN_TO_SQUARE: 'pi pi-pen-to-square',
  	  PENCIL: 'pi pi-pencil',
  	  PERCENTAGE: 'pi pi-percentage',
  	  PHONE: 'pi pi-phone',
  	  PINTEREST: 'pi pi-pinterest',
  	  PLAY_CIRCLE: 'pi pi-play-circle',
  	  PLAY: 'pi pi-play',
  	  PLUS_CIRCLE: 'pi pi-plus-circle',
  	  PLUS: 'pi pi-plus',
  	  POUND: 'pi pi-pound',
  	  POWER_OFF: 'pi pi-power-off',
  	  PRIME: 'pi pi-prime',
  	  PRINT: 'pi pi-print',
  	  QRCODE: 'pi pi-qrcode',
  	  QUESTION_CIRCLE: 'pi pi-question-circle',
  	  QUESTION: 'pi pi-question',
  	  RECEIPT: 'pi pi-receipt',
  	  REDDIT: 'pi pi-reddit',
  	  REFRESH: 'pi pi-refresh',
  	  REPLAY: 'pi pi-replay',
  	  REPLY: 'pi pi-reply',
  	  SAVE: 'pi pi-save',
  	  SEARCH_MINUS: 'pi pi-search-minus',
  	  SEARCH_PLUS: 'pi pi-search-plus',
  	  SEARCH: 'pi pi-search',
  	  SEND: 'pi pi-send',
  	  SERVER: 'pi pi-server',
  	  SHARE_ALT: 'pi pi-share-alt',
  	  SHIELD: 'pi pi-shield',
  	  SHOP: 'pi pi-shop',
  	  SHOPPING_BAG: 'pi pi-shopping-bag',
  	  SHOPPING_CART: 'pi pi-shopping-cart',
  	  SIGN_IN: 'pi pi-sign-in',
  	  SIGN_OUT: 'pi pi-sign-out',
  	  SITEMAP: 'pi pi-sitemap',
  	  SLACK: 'pi pi-slack',
  	  SLIDERS_H: 'pi pi-sliders-h',
  	  SLIDERS_V: 'pi pi-sliders-v',
  	  SORT_ALPHA_DOWN_ALT: 'pi pi-sort-alpha-down-alt',
  	  SORT_ALPHA_DOWN: 'pi pi-sort-alpha-down',
  	  SORT_ALPHA_UP_ALT: 'pi pi-sort-alpha-up-alt',
  	  SORT_ALPHA_UP: 'pi pi-sort-alpha-up',
  	  SORT_ALT_SLASH: 'pi pi-sort-alt-slash',
  	  SORT_ALT: 'pi pi-sort-alt',
  	  SORT_AMOUNT_DOWN_ALT: 'pi pi-sort-amount-down-alt',
  	  SORT_AMOUNT_DOWN: 'pi pi-sort-amount-down',
  	  SORT_AMOUNT_UP_ALT: 'pi pi-sort-amount-up-alt',
  	  SORT_AMOUNT_UP: 'pi pi-sort-amount-up',
  	  SORT_DOWN_FILL: 'pi pi-sort-down-fill',
  	  SORT_DOWN: 'pi pi-sort-down',
  	  SORT_NUMERIC_DOWN_ALT: 'pi pi-sort-numeric-down-alt',
  	  SORT_NUMERIC_DOWN: 'pi pi-sort-numeric-down',
  	  SORT_NUMERIC_UP_ALT: 'pi pi-sort-numeric-up-alt',
  	  SORT_NUMERIC_UP: 'pi pi-sort-numeric-up',
  	  SORT_UP_FILL: 'pi pi-sort-up-fill',
  	  SORT_UP: 'pi pi-sort-up',
  	  SORT: 'pi pi-sort',
  	  SPARKLES: 'pi pi-sparkles',
  	  SPINNER_DOTTED: 'pi pi-spinner-dotted',
  	  SPINNER: 'pi pi-spinner',
  	  STAR_FILL: 'pi pi-star-fill',
  	  STAR_HALF_FILL: 'pi pi-star-half-fill',
  	  STAR_HALF: 'pi pi-star-half',
  	  STAR: 'pi pi-star',
  	  STEP_BACKWARD_ALT: 'pi pi-step-backward-alt',
  	  STEP_BACKWARD: 'pi pi-step-backward',
  	  STEP_FORWARD_ALT: 'pi pi-step-forward-alt',
  	  STEP_FORWARD: 'pi pi-step-forward',
  	  STOP_CIRCLE: 'pi pi-stop-circle',
  	  STOP: 'pi pi-stop',
  	  STOPWATCH: 'pi pi-stopwatch',
  	  SUN: 'pi pi-sun',
  	  SYNC: 'pi pi-sync',
  	  TABLE: 'pi pi-table',
  	  TABLET: 'pi pi-tablet',
  	  TAG: 'pi pi-tag',
  	  TAGS: 'pi pi-tags',
  	  TELEGRAM: 'pi pi-telegram',
  	  TH_LARGE: 'pi pi-th-large',
  	  THUMBS_DOWN_FILL: 'pi pi-thumbs-down-fill',
  	  THUMBS_DOWN: 'pi pi-thumbs-down',
  	  THUMBS_UP_FILL: 'pi pi-thumbs-up-fill',
  	  THUMBS_UP: 'pi pi-thumbs-up',
  	  THUMBTACK: 'pi pi-thumbtack',
  	  TICKET: 'pi pi-ticket',
  	  TIKTOK: 'pi pi-tiktok',
  	  TIMES_CIRCLE: 'pi pi-times-circle',
  	  TIMES: 'pi pi-times',
  	  TRASH: 'pi pi-trash',
  	  TROPHY: 'pi pi-trophy',
  	  TRUCK: 'pi pi-truck',
  	  TURKISH_LIRA: 'pi pi-turkish-lira',
  	  TWITCH: 'pi pi-twitch',
  	  TWITTER: 'pi pi-twitter',
  	  UNDO: 'pi pi-undo',
  	  UNLOCK: 'pi pi-unlock',
  	  UPLOAD: 'pi pi-upload',
  	  USER_EDIT: 'pi pi-user-edit',
  	  USER_MINUS: 'pi pi-user-minus',
  	  USER_PLUS: 'pi pi-user-plus',
  	  USER: 'pi pi-user',
  	  USERS: 'pi pi-users',
  	  VENUS: 'pi pi-venus',
  	  VERIFIED: 'pi pi-verified',
  	  VIDEO: 'pi pi-video',
  	  VIMEO: 'pi pi-vimeo',
  	  VOLUME_DOWN: 'pi pi-volume-down',
  	  VOLUME_OFF: 'pi pi-volume-off',
  	  VOLUME_UP: 'pi pi-volume-up',
  	  WALLET: 'pi pi-wallet',
  	  WAREHOUSE: 'pi pi-warehouse',
  	  WAVE_PULSE: 'pi pi-wave-pulse',
  	  WHATSAPP: 'pi pi-whatsapp',
  	  WIFI: 'pi pi-wifi',
  	  WINDOW_MAXIMIZE: 'pi pi-window-maximize',
  	  WINDOW_MINIMIZE: 'pi pi-window-minimize',
  	  WRENCH: 'pi pi-wrench',
  	  YOUTUBE: 'pi pi-youtube'
  	});

  	var SortOrder = Object.freeze({
  	  DESC: -1,
  	  UNSORTED: 0,
  	  ASC: 1
  	});

  	function _arrayWithHoles(r) {
  	  if (Array.isArray(r)) return r;
  	}

  	function _iterableToArrayLimit(r, l) {
  	  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  	  if (null != t) {
  	    var e,
  	      n,
  	      i,
  	      u,
  	      a = [],
  	      f = true,
  	      o = false;
  	    try {
  	      if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
  	    } catch (r) {
  	      o = true, n = r;
  	    } finally {
  	      try {
  	        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
  	      } finally {
  	        if (o) throw n;
  	      }
  	    }
  	    return a;
  	  }
  	}

  	function _arrayLikeToArray(r, a) {
  	  (null == a || a > r.length) && (a = r.length);
  	  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  	  return n;
  	}

  	function _unsupportedIterableToArray(r, a) {
  	  if (r) {
  	    if ("string" == typeof r) return _arrayLikeToArray(r, a);
  	    var t = {}.toString.call(r).slice(8, -1);
  	    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  	  }
  	}

  	function _nonIterableRest() {
  	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  	}

  	function _slicedToArray(r, e) {
  	  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  	}

  	var PrimeReactContext = /*#__PURE__*/React__default$1["default"].createContext();
  	var PrimeReactProvider = function PrimeReactProvider(props) {
  	  var _props$value, _propsValue$ripple, _propsValue$inputStyl, _propsValue$locale, _propsValue$appendTo, _propsValue$styleCont, _propsValue$cssTransi, _propsValue$autoZInde, _propsValue$hideOverl, _propsValue$nonce, _propsValue$nullSortO, _propsValue$zIndex, _propsValue$ptOptions, _propsValue$pt, _propsValue$unstyled, _propsValue$filterMat;
  	  var propsValue = (_props$value = props.value) !== null && _props$value !== void 0 ? _props$value : {};
  	  var _useState = React.useState((_propsValue$ripple = propsValue.ripple) !== null && _propsValue$ripple !== void 0 ? _propsValue$ripple : false),
  	    _useState2 = _slicedToArray(_useState, 2),
  	    ripple = _useState2[0],
  	    setRipple = _useState2[1];
  	  var _useState3 = React.useState((_propsValue$inputStyl = propsValue.inputStyle) !== null && _propsValue$inputStyl !== void 0 ? _propsValue$inputStyl : 'outlined'),
  	    _useState4 = _slicedToArray(_useState3, 2),
  	    inputStyle = _useState4[0],
  	    setInputStyle = _useState4[1];
  	  var _useState5 = React.useState((_propsValue$locale = propsValue.locale) !== null && _propsValue$locale !== void 0 ? _propsValue$locale : 'en'),
  	    _useState6 = _slicedToArray(_useState5, 2),
  	    locale = _useState6[0],
  	    setLocale = _useState6[1];
  	  var _useState7 = React.useState((_propsValue$appendTo = propsValue.appendTo) !== null && _propsValue$appendTo !== void 0 ? _propsValue$appendTo : null),
  	    _useState8 = _slicedToArray(_useState7, 2),
  	    appendTo = _useState8[0],
  	    setAppendTo = _useState8[1];
  	  var _useState9 = React.useState((_propsValue$styleCont = propsValue.styleContainer) !== null && _propsValue$styleCont !== void 0 ? _propsValue$styleCont : null),
  	    _useState10 = _slicedToArray(_useState9, 2),
  	    styleContainer = _useState10[0],
  	    setStyleContainer = _useState10[1];
  	  var _useState11 = React.useState((_propsValue$cssTransi = propsValue.cssTransition) !== null && _propsValue$cssTransi !== void 0 ? _propsValue$cssTransi : true),
  	    _useState12 = _slicedToArray(_useState11, 2),
  	    cssTransition = _useState12[0],
  	    setCssTransition = _useState12[1];
  	  var _useState13 = React.useState((_propsValue$autoZInde = propsValue.autoZIndex) !== null && _propsValue$autoZInde !== void 0 ? _propsValue$autoZInde : true),
  	    _useState14 = _slicedToArray(_useState13, 2),
  	    autoZIndex = _useState14[0],
  	    setAutoZIndex = _useState14[1];
  	  var _useState15 = React.useState((_propsValue$hideOverl = propsValue.hideOverlaysOnDocumentScrolling) !== null && _propsValue$hideOverl !== void 0 ? _propsValue$hideOverl : false),
  	    _useState16 = _slicedToArray(_useState15, 2),
  	    hideOverlaysOnDocumentScrolling = _useState16[0],
  	    setHideOverlaysOnDocumentScrolling = _useState16[1];
  	  var _useState17 = React.useState((_propsValue$nonce = propsValue.nonce) !== null && _propsValue$nonce !== void 0 ? _propsValue$nonce : null),
  	    _useState18 = _slicedToArray(_useState17, 2),
  	    nonce = _useState18[0],
  	    setNonce = _useState18[1];
  	  var _useState19 = React.useState((_propsValue$nullSortO = propsValue.nullSortOrder) !== null && _propsValue$nullSortO !== void 0 ? _propsValue$nullSortO : 1),
  	    _useState20 = _slicedToArray(_useState19, 2),
  	    nullSortOrder = _useState20[0],
  	    setNullSortOrder = _useState20[1];
  	  var _useState21 = React.useState((_propsValue$zIndex = propsValue.zIndex) !== null && _propsValue$zIndex !== void 0 ? _propsValue$zIndex : {
  	      modal: 1100,
  	      overlay: 1000,
  	      menu: 1000,
  	      tooltip: 1100,
  	      toast: 1200
  	    }),
  	    _useState22 = _slicedToArray(_useState21, 2),
  	    zIndex = _useState22[0],
  	    setZIndex = _useState22[1];
  	  var _useState23 = React.useState((_propsValue$ptOptions = propsValue.ptOptions) !== null && _propsValue$ptOptions !== void 0 ? _propsValue$ptOptions : {
  	      mergeSections: true,
  	      mergeProps: true
  	    }),
  	    _useState24 = _slicedToArray(_useState23, 2),
  	    ptOptions = _useState24[0],
  	    setPtOptions = _useState24[1];
  	  var _useState25 = React.useState((_propsValue$pt = propsValue.pt) !== null && _propsValue$pt !== void 0 ? _propsValue$pt : undefined),
  	    _useState26 = _slicedToArray(_useState25, 2),
  	    pt = _useState26[0],
  	    setPt = _useState26[1];
  	  var _useState27 = React.useState((_propsValue$unstyled = propsValue.unstyled) !== null && _propsValue$unstyled !== void 0 ? _propsValue$unstyled : false),
  	    _useState28 = _slicedToArray(_useState27, 2),
  	    unstyled = _useState28[0],
  	    setUnstyled = _useState28[1];
  	  var _useState29 = React.useState((_propsValue$filterMat = propsValue.filterMatchModeOptions) !== null && _propsValue$filterMat !== void 0 ? _propsValue$filterMat : {
  	      text: [FilterMatchMode.STARTS_WITH, FilterMatchMode.CONTAINS, FilterMatchMode.NOT_CONTAINS, FilterMatchMode.ENDS_WITH, FilterMatchMode.EQUALS, FilterMatchMode.NOT_EQUALS],
  	      numeric: [FilterMatchMode.EQUALS, FilterMatchMode.NOT_EQUALS, FilterMatchMode.LESS_THAN, FilterMatchMode.LESS_THAN_OR_EQUAL_TO, FilterMatchMode.GREATER_THAN, FilterMatchMode.GREATER_THAN_OR_EQUAL_TO],
  	      date: [FilterMatchMode.DATE_IS, FilterMatchMode.DATE_IS_NOT, FilterMatchMode.DATE_BEFORE, FilterMatchMode.DATE_AFTER]
  	    }),
  	    _useState30 = _slicedToArray(_useState29, 2),
  	    filterMatchModeOptions = _useState30[0],
  	    setFilterMatchModeOptions = _useState30[1];
  	  var changeTheme = function changeTheme(currentTheme, newTheme, linkElementId, callback) {
  	    var _linkElement$parentNo;
  	    var linkElement = document.getElementById(linkElementId);
  	    if (!linkElement) {
  	      throw Error("Element with id ".concat(linkElementId, " not found."));
  	    }
  	    var newThemeUrl = linkElement.getAttribute('href').replace(currentTheme, newTheme);
  	    var newLinkElement = document.createElement('link');
  	    newLinkElement.setAttribute('rel', 'stylesheet');
  	    newLinkElement.setAttribute('id', linkElementId);
  	    newLinkElement.setAttribute('href', newThemeUrl);
  	    newLinkElement.addEventListener('load', function () {
  	      if (callback) {
  	        callback();
  	      }
  	    });
  	    (_linkElement$parentNo = linkElement.parentNode) === null || _linkElement$parentNo === void 0 || _linkElement$parentNo.replaceChild(newLinkElement, linkElement);
  	  };

  	  /**
  	   * @deprecated
  	   */
  	  React__default$1["default"].useEffect(function () {
  	    PrimeReact$1.ripple = ripple;
  	  }, [ripple]);

  	  /**
  	   * @deprecated
  	   */
  	  React__default$1["default"].useEffect(function () {
  	    PrimeReact$1.inputStyle = inputStyle;
  	  }, [inputStyle]);

  	  /**
  	   * @deprecated
  	   */
  	  React__default$1["default"].useEffect(function () {
  	    PrimeReact$1.locale = locale;
  	  }, [locale]);
  	  var value = {
  	    changeTheme: changeTheme,
  	    ripple: ripple,
  	    setRipple: setRipple,
  	    inputStyle: inputStyle,
  	    setInputStyle: setInputStyle,
  	    locale: locale,
  	    setLocale: setLocale,
  	    appendTo: appendTo,
  	    setAppendTo: setAppendTo,
  	    styleContainer: styleContainer,
  	    setStyleContainer: setStyleContainer,
  	    cssTransition: cssTransition,
  	    setCssTransition: setCssTransition,
  	    autoZIndex: autoZIndex,
  	    setAutoZIndex: setAutoZIndex,
  	    hideOverlaysOnDocumentScrolling: hideOverlaysOnDocumentScrolling,
  	    setHideOverlaysOnDocumentScrolling: setHideOverlaysOnDocumentScrolling,
  	    nonce: nonce,
  	    setNonce: setNonce,
  	    nullSortOrder: nullSortOrder,
  	    setNullSortOrder: setNullSortOrder,
  	    zIndex: zIndex,
  	    setZIndex: setZIndex,
  	    ptOptions: ptOptions,
  	    setPtOptions: setPtOptions,
  	    pt: pt,
  	    setPt: setPt,
  	    filterMatchModeOptions: filterMatchModeOptions,
  	    setFilterMatchModeOptions: setFilterMatchModeOptions,
  	    unstyled: unstyled,
  	    setUnstyled: setUnstyled
  	  };
  	  return /*#__PURE__*/React__default$1["default"].createElement(PrimeReactContext.Provider, {
  	    value: value
  	  }, props.children);
  	};

  	var PrimeReact = PrimeReact$1;

  	exports.FilterMatchMode = FilterMatchMode;
  	exports.FilterOperator = FilterOperator;
  	exports.FilterService = FilterService;
  	exports.MessageSeverity = MessageSeverity;
  	exports.PrimeIcons = PrimeIcons;
  	exports.PrimeReactContext = PrimeReactContext;
  	exports.PrimeReactProvider = PrimeReactProvider;
  	exports.SortOrder = SortOrder;
  	exports.addLocale = addLocale;
  	exports.ariaLabel = ariaLabel;
  	exports["default"] = PrimeReact;
  	exports.locale = locale;
  	exports.localeOption = localeOption;
  	exports.localeOptions = localeOptions;
  	exports.updateLocaleOption = updateLocaleOption;
  	exports.updateLocaleOptions = updateLocaleOptions; 
  } (api_cjs));

  var componentbase_cjs = {};

  var hooks_cjs = {};

  Object.defineProperty(hooks_cjs, '__esModule', { value: true });

  var React$1 = React__default.default;
  var utils$2 = utils_cjs;
  var PrimeReact$1 = api_cjs;

  function _interopDefaultLegacy$1 (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  function _interopNamespace$2(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var React__namespace$1 = /*#__PURE__*/_interopNamespace$2(React$1);
  var PrimeReact__default$1 = /*#__PURE__*/_interopDefaultLegacy$1(PrimeReact$1);

  function _arrayWithHoles$1(r) {
    if (Array.isArray(r)) return r;
  }

  function _iterableToArrayLimit$1(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }

  function _arrayLikeToArray$2(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }

  function _unsupportedIterableToArray$2(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray$2(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$2(r, a) : void 0;
    }
  }

  function _nonIterableRest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray$1(r, e) {
    return _arrayWithHoles$1(r) || _iterableToArrayLimit$1(r, e) || _unsupportedIterableToArray$2(r, e) || _nonIterableRest$1();
  }

  var usePrevious = function usePrevious(newValue) {
    var ref = React__namespace$1.useRef(null);
    React__namespace$1.useEffect(function () {
      ref.current = newValue;
      return function () {
        ref.current = null;
      };
    }, [newValue]);
    return ref.current;
  };

  /* eslint-disable */
  var useUnmountEffect = function useUnmountEffect(fn) {
    return React__namespace$1.useEffect(function () {
      return fn;
    }, []);
  };
  /* eslint-enable */

  var useEventListener = function useEventListener(_ref) {
    var _ref$target = _ref.target,
      target = _ref$target === void 0 ? 'document' : _ref$target,
      type = _ref.type,
      listener = _ref.listener,
      options = _ref.options,
      _ref$when = _ref.when,
      when = _ref$when === void 0 ? true : _ref$when;
    var targetRef = React__namespace$1.useRef(null);
    var listenerRef = React__namespace$1.useRef(null);
    var prevListener = usePrevious(listener);
    var prevOptions = usePrevious(options);
    var bind = function bind() {
      var bindOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var bindTarget = bindOptions.target;
      if (utils$2.ObjectUtils.isNotEmpty(bindTarget)) {
        unbind();
        (bindOptions.when || when) && (targetRef.current = utils$2.DomHandler.getTargetElement(bindTarget));
      }
      if (!listenerRef.current && targetRef.current) {
        listenerRef.current = function (event) {
          return listener && listener(event);
        };
        targetRef.current.addEventListener(type, listenerRef.current, options);
      }
    };
    var unbind = function unbind() {
      if (listenerRef.current) {
        targetRef.current.removeEventListener(type, listenerRef.current, options);
        listenerRef.current = null;
      }
    };
    var dispose = function dispose() {
      unbind();
      // Prevent memory leak by releasing
      prevListener = null;
      prevOptions = null;
    };
    var updateTarget = React__namespace$1.useCallback(function () {
      if (when) {
        targetRef.current = utils$2.DomHandler.getTargetElement(target);
      } else {
        unbind();
        targetRef.current = null;
      }
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [target, when]);
    React__namespace$1.useEffect(function () {
      updateTarget();
    }, [updateTarget]);
    React__namespace$1.useEffect(function () {
      var listenerChanged = "".concat(prevListener) !== "".concat(listener);
      var optionsChanged = prevOptions !== options;
      var listenerExists = listenerRef.current;
      if (listenerExists && (listenerChanged || optionsChanged)) {
        unbind();
        when && bind();
      } else if (!listenerExists) {
        dispose();
      }
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [listener, options, when]);
    useUnmountEffect(function () {
      dispose();
    });
    return [bind, unbind];
  };

  var useClickOutside = function useClickOutside(ref, callback) {
    var isOutsideClicked = function isOutsideClicked(event) {
      if (!ref.current || ref.current.contains(event.target)) {
        return;
      }
      callback(event);
    };
    var _useEventListener = useEventListener({
        type: 'mousedown',
        listener: isOutsideClicked
      }),
      _useEventListener2 = _slicedToArray$1(_useEventListener, 2),
      bindMouseDownListener = _useEventListener2[0],
      unbindMouseDownListener = _useEventListener2[1];
    var _useEventListener3 = useEventListener({
        type: 'touchstart',
        listener: isOutsideClicked
      }),
      _useEventListener4 = _slicedToArray$1(_useEventListener3, 2),
      bindTouchStartListener = _useEventListener4[0],
      unbindTouchStartListener = _useEventListener4[1];
    React__namespace$1.useEffect(function () {
      if (!ref.current) {
        return;
      }
      bindMouseDownListener();
      bindTouchStartListener();
      return function () {
        unbindMouseDownListener();
        unbindTouchStartListener();
      };
    });
    return [ref, callback];
  };

  var useCounter = function useCounter() {
    var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      step: 1
    };
    var _React$useState = React__namespace$1.useState(initialValue),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      count = _React$useState2[0],
      setCount = _React$useState2[1];
    var increment = function increment() {
      if (options.max && count >= options.max) {
        return;
      }
      setCount(count + options.step);
    };
    var decrement = function decrement() {
      if (options.min || options.min === 0 && count <= options.min) {
        return null;
      }
      setCount(count - options.step);
    };
    var reset = function reset() {
      setCount(0);
    };
    return {
      count: count,
      increment: increment,
      decrement: decrement,
      reset: reset
    };
  };

  var useDebounce = function useDebounce(initialValue, delay) {
    var _React$useState = React__namespace$1.useState(initialValue),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      inputValue = _React$useState2[0],
      setInputValue = _React$useState2[1];
    var _React$useState3 = React__namespace$1.useState(initialValue),
      _React$useState4 = _slicedToArray$1(_React$useState3, 2),
      debouncedValue = _React$useState4[0],
      setDebouncedValue = _React$useState4[1];
    var mountedRef = React__namespace$1.useRef(false);
    var timeoutRef = React__namespace$1.useRef(null);
    var cancelTimer = function cancelTimer() {
      return window.clearTimeout(timeoutRef.current);
    };
    useMountEffect(function () {
      mountedRef.current = true;
    });
    useUnmountEffect(function () {
      cancelTimer();
    });
    React__namespace$1.useEffect(function () {
      if (!mountedRef.current) {
        return;
      }
      cancelTimer();
      timeoutRef.current = window.setTimeout(function () {
        setDebouncedValue(inputValue);
      }, delay);
    }, [inputValue, delay]);
    return [inputValue, debouncedValue, setInputValue];
  };

  var groupToDisplayedElements = {};
  var useDisplayOrder = function useDisplayOrder(group) {
    var isVisible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var _React$useState = React__namespace$1.useState(function () {
        return utils$2.UniqueComponentId();
      }),
      _React$useState2 = _slicedToArray$1(_React$useState, 1),
      uid = _React$useState2[0];
    var _React$useState3 = React__namespace$1.useState(0),
      _React$useState4 = _slicedToArray$1(_React$useState3, 2),
      displayOrder = _React$useState4[0],
      setDisplayOrder = _React$useState4[1];
    React__namespace$1.useEffect(function () {
      if (isVisible) {
        if (!groupToDisplayedElements[group]) {
          groupToDisplayedElements[group] = [];
        }
        var newDisplayOrder = groupToDisplayedElements[group].push(uid);
        setDisplayOrder(newDisplayOrder);
        return function () {
          delete groupToDisplayedElements[group][newDisplayOrder - 1];

          // Reduce array length, by removing undefined elements at the end of array:
          var lastIndex = groupToDisplayedElements[group].length - 1;
          var lastOrder = utils$2.ObjectUtils.findLastIndex(groupToDisplayedElements[group], function (el) {
            return el !== undefined;
          });
          if (lastOrder !== lastIndex) {
            groupToDisplayedElements[group].splice(lastOrder + 1);
          }
          setDisplayOrder(undefined);
        };
      }
    }, [group, uid, isVisible]);
    return displayOrder;
  };

  var TYPE_MAP = {
    ico: 'image/x-icon',
    png: 'image/png',
    svg: 'image/svg+xml',
    gif: 'image/gif'
  };
  var useFavicon = function useFavicon() {
    var newIcon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var rel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'shortcut icon';
    React__namespace$1.useLayoutEffect(function () {
      if (newIcon) {
        var linkElements = document.querySelectorAll("link[rel*='icon']");
        linkElements.forEach(function (linkEl) {
          document.head.removeChild(linkEl);
        });
        var link = document.createElement('link');
        link.setAttribute('type', TYPE_MAP[newIcon.split('.').pop()]);
        link.setAttribute('rel', rel);
        link.setAttribute('href', newIcon);
        document.head.appendChild(link);
      }
    }, [newIcon, rel]);
  };

  function _arrayWithoutHoles$1(r) {
    if (Array.isArray(r)) return _arrayLikeToArray$2(r);
  }

  function _iterableToArray$1(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }

  function _nonIterableSpread$1() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray$1(r) {
    return _arrayWithoutHoles$1(r) || _iterableToArray$1(r) || _unsupportedIterableToArray$2(r) || _nonIterableSpread$1();
  }

  /**
   * Priorities of different components (bigger number handled first)
   */
  var ESC_KEY_HANDLING_PRIORITIES = {
    SIDEBAR: 100,
    SLIDE_MENU: 200,
    DIALOG: 300,
    IMAGE: 400,
    MENU: 500,
    OVERLAY_PANEL: 600,
    PASSWORD: 700,
    CASCADE_SELECT: 800,
    SPLIT_BUTTON: 900,
    SPEED_DIAL: 1000,
    TOOLTIP: 1200
  };

  /**
   * Object, that manages global escape key handling logic
   */
  var globalEscKeyHandlingLogic = {
    /**
     * Mapping from ESC_KEY_HANDLING_PRIORITY to array of related listeners, grouped by priority
     * @example
     * Map<{
     *     [ESC_KEY_HANDLING_PRIORITIES.SIDEBAR]: Map<{
     *         1: () => {...},
     *         2: () => {...}
     *     }>,
     *     [ESC_KEY_HANDLING_PRIORITIES.DIALOG]: Map<{
     *         1: () => {...},
     *         2: () => {...}
     *     }>
     * }>;
     */
    escKeyListeners: new Map(),
    /**
     * Keydown handler (attached to any keydown)
     */
    onGlobalKeyDown: function onGlobalKeyDown(event) {
      // Do nothing if not an "esc" key is pressed:
      if (event.code !== 'Escape') {
        return;
      }
      var escKeyListeners = globalEscKeyHandlingLogic.escKeyListeners;
      var maxPrimaryPriority = Math.max.apply(Math, _toConsumableArray$1(escKeyListeners.keys()));
      var theMostImportantEscHandlersSet = escKeyListeners.get(maxPrimaryPriority);
      var maxSecondaryPriority = Math.max.apply(Math, _toConsumableArray$1(theMostImportantEscHandlersSet.keys()));
      var theMostImportantEscHandler = theMostImportantEscHandlersSet.get(maxSecondaryPriority);
      theMostImportantEscHandler(event);
    },
    /**
     * Attach global keydown listener if there are any "esc" key handlers assigned,
     * otherwise detach.
     */
    refreshGlobalKeyDownListener: function refreshGlobalKeyDownListener() {
      var document = utils$2.DomHandler.getTargetElement('document');
      if (this.escKeyListeners.size > 0) {
        document.addEventListener('keydown', this.onGlobalKeyDown);
      } else {
        document.removeEventListener('keydown', this.onGlobalKeyDown);
      }
    },
    /**
     * Add "Esc" key handler
     */
    addListener: function addListener(callback, _ref) {
      var _this = this;
      var _ref2 = _slicedToArray$1(_ref, 2),
        primaryPriority = _ref2[0],
        secondaryPriority = _ref2[1];
      var escKeyListeners = this.escKeyListeners;
      if (!escKeyListeners.has(primaryPriority)) {
        escKeyListeners.set(primaryPriority, new Map());
      }
      var primaryPriorityListeners = escKeyListeners.get(primaryPriority);

      // To prevent unexpected override of callback:
      if (primaryPriorityListeners.has(secondaryPriority)) {
        throw new Error("Unexpected: global esc key listener with priority [".concat(primaryPriority, ", ").concat(secondaryPriority, "] already exists."));
      }
      primaryPriorityListeners.set(secondaryPriority, callback);
      this.refreshGlobalKeyDownListener();
      return function () {
        primaryPriorityListeners["delete"](secondaryPriority);
        if (primaryPriorityListeners.size === 0) {
          escKeyListeners["delete"](primaryPriority);
        }
        _this.refreshGlobalKeyDownListener();
      };
    }
  };
  var useGlobalOnEscapeKey = function useGlobalOnEscapeKey(_ref3) {
    var callback = _ref3.callback,
      when = _ref3.when,
      priority = _ref3.priority;
    React$1.useEffect(function () {
      if (!when) {
        return;
      }
      return globalEscKeyHandlingLogic.addListener(callback, priority);
    }, [callback, when, priority]);
  };

  var useIntersectionObserver = function useIntersectionObserver(ref) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _React$useState = React__namespace$1.useState(false),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      isElementVisible = _React$useState2[0],
      setIsElementVisible = _React$useState2[1];
    React__namespace$1.useEffect(function () {
      if (!ref.current) {
        return;
      }
      var observer = new IntersectionObserver(function (_ref) {
        var _ref2 = _slicedToArray$1(_ref, 1),
          entry = _ref2[0];
        setIsElementVisible(entry.isIntersecting);
      }, options);
      observer.observe(ref.current);
      return function () {
        observer.disconnect();
      };
    }, [options, ref]);
    return isElementVisible;
  };

  /* eslint-disable */
  var useInterval = function useInterval(fn) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var when = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var timeout = React__namespace$1.useRef(null);
    var savedCallback = React__namespace$1.useRef(null);
    var clear = React__namespace$1.useCallback(function () {
      return clearInterval(timeout.current);
    }, [timeout.current]);
    React__namespace$1.useEffect(function () {
      savedCallback.current = fn;
    });
    React__namespace$1.useEffect(function () {
      function callback() {
        savedCallback.current();
      }
      if (when) {
        timeout.current = setInterval(callback, delay);
        return clear;
      } else {
        clear();
      }
    }, [delay, when]);
    useUnmountEffect(function () {
      clear();
    });
    return [clear];
  };
  /* eslint-enable */

  var useMatchMedia = function useMatchMedia(query) {
    var when = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var _React$useState = React__namespace$1.useState(false),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      matches = _React$useState2[0],
      setMatches = _React$useState2[1];
    var matchMedia = React__namespace$1.useRef(null);
    var handleChange = function handleChange(e) {
      return setMatches(e.matches);
    };
    var bind = function bind() {
      return matchMedia.current && matchMedia.current.addEventListener('change', handleChange);
    };
    var unbind = function unbind() {
      return matchMedia.current && matchMedia.current.removeEventListener('change', handleChange) && (matchMedia.current = null);
    };
    React__namespace$1.useEffect(function () {
      if (when) {
        matchMedia.current = window.matchMedia(query);
        setMatches(matchMedia.current.matches);
        bind();
      }
      return unbind;
    }, [query, when]);
    return matches;
  };
  /* eslint-enable */

  /**
   * Hook to merge properties including custom merge function for things like Tailwind merge.
   */
  var useMergeProps = function useMergeProps() {
    var context = React$1.useContext(PrimeReact$1.PrimeReactContext);
    return function () {
      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {
        props[_key] = arguments[_key];
      }
      return utils$2.mergeProps(props, context === null || context === void 0 ? void 0 : context.ptOptions);
    };
  };

  /* eslint-disable */

  /**
   * Custom hook to run a mount effect only once.
   * @param {*} fn the callback function
   * @returns the hook
   */
  var useMountEffect = function useMountEffect(fn) {
    var mounted = React__namespace$1.useRef(false);
    return React__namespace$1.useEffect(function () {
      if (!mounted.current) {
        mounted.current = true;
        return fn && fn();
      }
    }, []);
  };
  /* eslint-enable */

  function _typeof$2(o) {
    "@babel/helpers - typeof";

    return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof$2(o);
  }

  function toPrimitive$2(t, r) {
    if ("object" != _typeof$2(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != _typeof$2(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }

  function toPropertyKey$2(t) {
    var i = toPrimitive$2(t, "string");
    return "symbol" == _typeof$2(i) ? i : i + "";
  }

  function _defineProperty$2(e, r, t) {
    return (r = toPropertyKey$2(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }

  function ownKeys$1$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1$1(Object(t), true).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var useMouse = function useMouse() {
    var _React$useState = React__namespace$1.useState({
        x: 0,
        y: 0
      }),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      position = _React$useState2[0],
      setPosition = _React$useState2[1];
    var ref = React__namespace$1.useRef(null);
    var handleMouseMove = React__namespace$1.useCallback(function (event) {
      var x;
      var y;
      if (ref.current) {
        var rect = event.currentTarget.getBoundingClientRect();
        x = event.pageX - rect.left - (window.pageXOffset || window.scrollX);
        y = event.pageY - rect.top - (window.pageYOffset || window.scrollY);
      } else {
        x = event.clientX;
        y = event.clientY;
      }
      setPosition({
        x: Math.max(0, Math.round(x)),
        y: Math.max(0, Math.round(y))
      });
    }, []);
    var _useEventListener = useEventListener({
        target: ref,
        type: 'mousemove',
        listener: handleMouseMove
      }),
      _useEventListener2 = _slicedToArray$1(_useEventListener, 2),
      bindMouseMoveEventListener = _useEventListener2[0],
      unbindMouseMoveEventListener = _useEventListener2[1];
    var _useEventListener3 = useEventListener({
        type: 'mousemove',
        listener: handleMouseMove
      }),
      _useEventListener4 = _slicedToArray$1(_useEventListener3, 2),
      bindDocumentMoveEventListener = _useEventListener4[0],
      unbindDocumentMoveEventListener = _useEventListener4[1];
    var reset = function reset() {
      return setPosition({
        x: 0,
        y: 0
      });
    };
    React__namespace$1.useEffect(function () {
      bindMouseMoveEventListener();
      if (!ref.current) {
        bindDocumentMoveEventListener();
      }
      return function () {
        unbindMouseMoveEventListener();

        // eslint-disable-next-line react-hooks/exhaustive-deps
        if (!ref.current) {
          unbindDocumentMoveEventListener();
        }
      };
    }, [bindDocumentMoveEventListener, bindMouseMoveEventListener, unbindDocumentMoveEventListener, unbindMouseMoveEventListener]);
    return _objectSpread$1$1(_objectSpread$1$1({
      ref: ref
    }, position), {}, {
      reset: reset
    });
  };

  function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), true).forEach(function (r) { _defineProperty$2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function useMove(_ref) {
    var _ref$mode = _ref.mode,
      mode = _ref$mode === void 0 ? 'both' : _ref$mode,
      _ref$initialValue = _ref.initialValue,
      initialValue = _ref$initialValue === void 0 ? {
        x: 0,
        y: 0
      } : _ref$initialValue;
    var _React$useState = React__namespace$1.useState(initialValue),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      positions = _React$useState2[0],
      setPositions = _React$useState2[1];
    var _React$useState3 = React__namespace$1.useState(false),
      _React$useState4 = _slicedToArray$1(_React$useState3, 2),
      active = _React$useState4[0],
      setActive = _React$useState4[1];
    var isMounted = React__namespace$1.useRef(false);
    var isSliding = React__namespace$1.useRef(false);
    var ref = React__namespace$1.useRef(null);
    var onMouseMove = function onMouseMove(event) {
      return updateMousePosition({
        x: event.clientX,
        y: event.clientY
      });
    };
    var handlePositionChange = function handlePositionChange(_ref2) {
      var clampedX = _ref2.clampedX,
        clampedY = _ref2.clampedY;
      if (mode === 'vertical') {
        setPositions({
          y: 1 - clampedY
        });
      } else if (mode === 'horizontal') {
        setPositions({
          x: clampedX
        });
      } else if (mode === 'both') {
        setPositions({
          x: clampedX,
          y: clampedY
        });
      }
    };
    var onMouseDown = function onMouseDown(event) {
      startScrubbing();
      event.preventDefault();
      onMouseMove(event);
    };
    var stopScrubbing = function stopScrubbing() {
      if (isSliding.current && isMounted.current) {
        isSliding.current = false;
        setActive(false);
        unbindListeners();
      }
    };
    var onTouchMove = function onTouchMove(event) {
      if (event.cancelable) {
        event.preventDefault();
      }
      updateMousePosition({
        x: event.changedTouches[0].clientX,
        y: event.changedTouches[0].clientY
      });
    };
    var onTouchStart = function onTouchStart(event) {
      if (event.cancelable) {
        event.preventDefault();
      }
      startScrubbing();
      onTouchMove(event);
    };
    var _useEventListener = useEventListener({
        type: 'mousemove',
        listener: onMouseMove
      }),
      _useEventListener2 = _slicedToArray$1(_useEventListener, 2),
      bindDocumentMouseMoveListener = _useEventListener2[0],
      unbindDocumentMouseMoveListener = _useEventListener2[1];
    var _useEventListener3 = useEventListener({
        type: 'mouseup',
        listener: stopScrubbing
      }),
      _useEventListener4 = _slicedToArray$1(_useEventListener3, 2),
      bindDocumentMouseUpListener = _useEventListener4[0],
      unbindDocumentMouseUpListener = _useEventListener4[1];
    var _useEventListener5 = useEventListener({
        type: 'touchmove',
        listener: onTouchMove
      }),
      _useEventListener6 = _slicedToArray$1(_useEventListener5, 2),
      bindDocumentTouchMoveListener = _useEventListener6[0],
      unbindDocumentTouchMoveListener = _useEventListener6[1];
    var _useEventListener7 = useEventListener({
        type: 'touchend',
        listener: stopScrubbing
      }),
      _useEventListener8 = _slicedToArray$1(_useEventListener7, 2),
      bindDocumentTouchEndListener = _useEventListener8[0],
      unbindDocumentTouchEndListener = _useEventListener8[1];
    var _useEventListener9 = useEventListener({
        target: ref,
        type: 'mousedown',
        listener: onMouseDown
      }),
      _useEventListener10 = _slicedToArray$1(_useEventListener9, 2),
      bindMouseDownListener = _useEventListener10[0],
      unbindMouseDownListener = _useEventListener10[1];
    var _useEventListener11 = useEventListener({
        target: ref,
        type: 'touchstart',
        listener: onTouchStart,
        options: {
          passive: false
        }
      }),
      _useEventListener12 = _slicedToArray$1(_useEventListener11, 2),
      bindTouchStartListener = _useEventListener12[0],
      unbindTouchStartListener = _useEventListener12[1];
    var clamp = function clamp(value, min, max) {
      return Math.min(Math.max(value, min), max);
    };
    var clampPositions = function clampPositions(_ref3) {
      var x = _ref3.x,
        y = _ref3.y;
      return {
        clampedX: clamp(x, 0, 1),
        clampedY: clamp(y, 0, 1)
      };
    };
    var bindListeners = function bindListeners() {
      bindDocumentMouseMoveListener();
      bindDocumentMouseUpListener();
      bindDocumentTouchMoveListener();
      bindDocumentTouchEndListener();
    };
    var unbindListeners = function unbindListeners() {
      unbindDocumentMouseMoveListener();
      unbindDocumentMouseUpListener();
      unbindDocumentTouchMoveListener();
      unbindDocumentTouchEndListener();
    };
    var reset = function reset() {
      setPositions(initialValue);
    };
    React__namespace$1.useEffect(function () {
      isMounted.current = true;
    }, []);
    var startScrubbing = function startScrubbing() {
      if (!isSliding.current && isMounted.current) {
        isSliding.current = true;
        setActive(true);
        bindListeners();
      }
    };
    var updateMousePosition = function updateMousePosition(_ref4) {
      var x = _ref4.x,
        y = _ref4.y;
      if (isSliding.current) {
        var rect = ref.current.getBoundingClientRect();
        var _clampPositions = clampPositions({
            x: (x - rect.left) / rect.width,
            y: (y - rect.top) / rect.height
          }),
          clampedX = _clampPositions.clampedX,
          clampedY = _clampPositions.clampedY;
        handlePositionChange({
          clampedX: clampedX,
          clampedY: clampedY
        });
      }
    };
    React__namespace$1.useEffect(function () {
      if (ref.current) {
        bindMouseDownListener();
        bindTouchStartListener();
      }
      return function () {
        if (ref.current) {
          unbindMouseDownListener();
          unbindTouchStartListener();
        }
      };
    }, [bindMouseDownListener, bindTouchStartListener, positions, unbindMouseDownListener, unbindTouchStartListener]);
    return _objectSpread$2(_objectSpread$2({
      ref: ref
    }, positions), {}, {
      active: active,
      reset: reset
    });
  }

  var useOverlayScrollListener = function useOverlayScrollListener(_ref) {
    var target = _ref.target,
      listener = _ref.listener,
      options = _ref.options,
      _ref$when = _ref.when,
      when = _ref$when === void 0 ? true : _ref$when;
    var context = React__namespace$1.useContext(PrimeReact$1.PrimeReactContext);
    var targetRef = React__namespace$1.useRef(null);
    var listenerRef = React__namespace$1.useRef(null);
    var scrollableParentsRef = React__namespace$1.useRef([]);
    var prevListener = usePrevious(listener);
    var prevOptions = usePrevious(options);
    var bind = function bind() {
      var bindOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (utils$2.ObjectUtils.isNotEmpty(bindOptions.target)) {
        unbind();
        (bindOptions.when || when) && (targetRef.current = utils$2.DomHandler.getTargetElement(bindOptions.target));
      }
      if (!listenerRef.current && targetRef.current) {
        var hideOnScroll = context ? context.hideOverlaysOnDocumentScrolling : PrimeReact__default$1["default"].hideOverlaysOnDocumentScrolling;
        var nodes = scrollableParentsRef.current = utils$2.DomHandler.getScrollableParents(targetRef.current);

        // Ensure window/body is always included as fallback
        if (!nodes.some(function (node) {
          return node === document.body || node === window;
        })) {
          nodes.push(hideOnScroll ? window : document.body);
        }
        listenerRef.current = function (event) {
          return listener && listener(event);
        };
        nodes.forEach(function (node) {
          return node.addEventListener('scroll', listenerRef.current, options);
        });
      }
    };
    var unbind = function unbind() {
      if (listenerRef.current) {
        var nodes = scrollableParentsRef.current;
        nodes.forEach(function (node) {
          return node.removeEventListener('scroll', listenerRef.current, options);
        });
        listenerRef.current = null;
      }
    };
    var dispose = function dispose() {
      unbind();
      // #5927 prevent memory leak by releasing
      scrollableParentsRef.current = null;
      prevListener = null;
      prevOptions = null;
    };
    var updateTarget = React__namespace$1.useCallback(function () {
      if (when) {
        targetRef.current = utils$2.DomHandler.getTargetElement(target);
      } else {
        unbind();
        targetRef.current = null;
      }
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [target, when]);
    React__namespace$1.useEffect(function () {
      updateTarget();
    }, [updateTarget]);
    React__namespace$1.useEffect(function () {
      var listenerChanged = "".concat(prevListener) !== "".concat(listener);
      var optionsChanged = prevOptions !== options;
      var listenerExists = listenerRef.current;
      if (listenerExists && (listenerChanged || optionsChanged)) {
        unbind();
        when && bind();
      } else if (!listenerExists) {
        dispose();
      }
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [listener, options, when]);
    useUnmountEffect(function () {
      dispose();
    });
    return [bind, unbind];
  };

  var useResizeListener = function useResizeListener(_ref) {
    var listener = _ref.listener,
      _ref$when = _ref.when,
      when = _ref$when === void 0 ? true : _ref$when;
    return useEventListener({
      target: 'window',
      type: 'resize',
      listener: listener,
      when: when
    });
  };

  var useOverlayListener = function useOverlayListener(_ref) {
    var target = _ref.target,
      overlay = _ref.overlay,
      _listener = _ref.listener,
      _ref$when = _ref.when,
      when = _ref$when === void 0 ? true : _ref$when,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'click' : _ref$type;
    var targetRef = React__namespace$1.useRef(null);
    var overlayRef = React__namespace$1.useRef(null);

    /**
     * The parameters of the 'listener' method in the following event handlers;
     * @param {Event} event A click event of the document.
     * @param {string} options.type The custom type to detect event.
     * @param {boolean} options.valid It is controlled by PrimeReact. It is determined whether it is valid or not according to some custom validation.
     */
    var _useEventListener = useEventListener({
        target: 'window',
        type: type,
        listener: function listener(event) {
          _listener && _listener(event, {
            type: 'outside',
            valid: event.which !== 3 && isOutsideClicked(event)
          });
        },
        when: when
      }),
      _useEventListener2 = _slicedToArray$1(_useEventListener, 2),
      bindDocumentClickListener = _useEventListener2[0],
      unbindDocumentClickListener = _useEventListener2[1];
    var _useResizeListener = useResizeListener({
        listener: function listener(event) {
          _listener && _listener(event, {
            type: 'resize',
            valid: !utils$2.DomHandler.isTouchDevice()
          });
        },
        when: when
      }),
      _useResizeListener2 = _slicedToArray$1(_useResizeListener, 2),
      bindWindowResizeListener = _useResizeListener2[0],
      unbindWindowResizeListener = _useResizeListener2[1];
    var _useEventListener3 = useEventListener({
        target: 'window',
        type: 'orientationchange',
        listener: function listener(event) {
          _listener && _listener(event, {
            type: 'orientationchange',
            valid: true
          });
        },
        when: when
      }),
      _useEventListener4 = _slicedToArray$1(_useEventListener3, 2),
      bindWindowOrientationChangeListener = _useEventListener4[0],
      unbindWindowOrientationChangeListener = _useEventListener4[1];
    var _useOverlayScrollList = useOverlayScrollListener({
        target: target,
        listener: function listener(event) {
          _listener && _listener(event, {
            type: 'scroll',
            valid: true
          });
        },
        when: when
      }),
      _useOverlayScrollList2 = _slicedToArray$1(_useOverlayScrollList, 2),
      bindOverlayScrollListener = _useOverlayScrollList2[0],
      unbindOverlayScrollListener = _useOverlayScrollList2[1];
    var isOutsideClicked = function isOutsideClicked(event) {
      return targetRef.current && !(targetRef.current.isSameNode(event.target) || targetRef.current.contains(event.target) || overlayRef.current && overlayRef.current.contains(event.target));
    };
    var bind = function bind() {
      bindDocumentClickListener();
      bindWindowResizeListener();
      bindWindowOrientationChangeListener();
      bindOverlayScrollListener();
    };
    var unbind = function unbind() {
      unbindDocumentClickListener();
      unbindWindowResizeListener();
      unbindWindowOrientationChangeListener();
      unbindOverlayScrollListener();
    };
    React__namespace$1.useEffect(function () {
      if (when) {
        targetRef.current = utils$2.DomHandler.getTargetElement(target);
        overlayRef.current = utils$2.DomHandler.getTargetElement(overlay);
      } else {
        unbind();
        targetRef.current = overlayRef.current = null;
      }
    }, [target, overlay, when]);
    useUnmountEffect(function () {
      unbind();
    });
    return [bind, unbind];
  };
  /* eslint-enable */

  /**
   * Hook to wrap around useState that stores the value in the browser local/session storage.
   *
   * @param {any} initialValue the initial value to store
   * @param {string} key the key to store the value in local/session storage
   * @param {string} storage either 'local' or 'session' for what type of storage
   * @returns a stateful value, and a function to update it.
   */
  var useStorage = function useStorage(initialValue, key) {
    var storage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'local';
    // Since the local storage API isn't available in server-rendering environments,
    // we check that typeof window !== 'undefined' to make SSR and SSG work properly.
    var storageAvailable = typeof window !== 'undefined';

    // subscribe to window storage event so changes in one tab to a stored value
    // are properly reflected in all tabs
    var _useEventListener = useEventListener({
        target: 'window',
        type: 'storage',
        listener: function listener(event) {
          var area = storage === 'local' ? window.localStorage : window.sessionStorage;
          if (event.storageArea === area && event.key === key) {
            var newValue = event.newValue ? JSON.parse(event.newValue) : undefined;
            setStoredValue(newValue);
          }
        }
      }),
      _useEventListener2 = _slicedToArray$1(_useEventListener, 2),
      bindWindowStorageListener = _useEventListener2[0],
      unbindWindowStorageListener = _useEventListener2[1];
    var _React$useState = React__namespace$1.useState(initialValue),
      _React$useState2 = _slicedToArray$1(_React$useState, 2),
      storedValue = _React$useState2[0],
      setStoredValue = _React$useState2[1];
    var setValue = function setValue(value) {
      try {
        // Allow value to be a function so we have same API as useState
        var valueToStore = value instanceof Function ? value(storedValue) : value;
        setStoredValue(valueToStore);
        if (storageAvailable) {
          var serializedValue = JSON.stringify(valueToStore);
          storage === 'local' ? window.localStorage.setItem(key, serializedValue) : window.sessionStorage.setItem(key, serializedValue);
        }
      } catch (error) {
        throw new Error("PrimeReact useStorage: Failed to serialize the value at key: ".concat(key));
      }
    };
    React__namespace$1.useEffect(function () {
      if (!storageAvailable) {
        setStoredValue(initialValue);
      }
      try {
        var item = storage === 'local' ? window.localStorage.getItem(key) : window.sessionStorage.getItem(key);
        setStoredValue(item ? JSON.parse(item) : initialValue);
      } catch (error) {
        // If error also return initialValue
        setStoredValue(initialValue);
      }
      bindWindowStorageListener();
      return function () {
        return unbindWindowStorageListener();
      };
    }, []);
    return [storedValue, setValue];
  };

  /**
   * Hook to wrap around useState that stores the value in the browser local storage.
   *
   * @param {any} initialValue the initial value to store
   * @param {string} key the key to store the value in local storage
   * @returns a stateful value, and a function to update it.
   */
  var useLocalStorage = function useLocalStorage(initialValue, key) {
    return useStorage(initialValue, key, 'local');
  };

  /**
   * Hook to wrap around useState that stores the value in the browser session storage.
   *
   * @param {any} initialValue the initial value to store
   * @param {string} key the key to store the value in session storage
   * @returns a stateful value, and a function to update it.
   */
  var useSessionStorage = function useSessionStorage(initialValue, key) {
    return useStorage(initialValue, key, 'session');
  };
  /* eslint-enable */

  var _id = 0;
  var useStyle = function useStyle(css) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _useState = React$1.useState(false),
      _useState2 = _slicedToArray$1(_useState, 2),
      isLoaded = _useState2[0],
      setIsLoaded = _useState2[1];
    var styleRef = React$1.useRef(null);
    var context = React$1.useContext(PrimeReact$1.PrimeReactContext);
    var defaultDocument = utils$2.DomHandler.isClient() ? window.document : undefined;
    var _options$document = options.document,
      document = _options$document === void 0 ? defaultDocument : _options$document,
      _options$manual = options.manual,
      manual = _options$manual === void 0 ? false : _options$manual,
      _options$name = options.name,
      name = _options$name === void 0 ? "style_".concat(++_id) : _options$name,
      _options$id = options.id,
      id = _options$id === void 0 ? undefined : _options$id,
      _options$media = options.media,
      media = _options$media === void 0 ? undefined : _options$media;
    var getCurrentStyleRef = function getCurrentStyleRef(styleContainer) {
      var existingStyle = styleContainer.querySelector("style[data-primereact-style-id=\"".concat(name, "\"]"));
      if (existingStyle) {
        return existingStyle;
      }
      if (id !== undefined) {
        var existingElement = document.getElementById(id);
        if (existingElement) {
          return existingElement;
        }
      }

      // finally if not found create the new style
      return document.createElement('style');
    };
    var update = function update(newCSS) {
      isLoaded && css !== newCSS && (styleRef.current.textContent = newCSS);
    };
    var load = function load() {
      if (!document || isLoaded) {
        return;
      }
      var styleContainer = (context === null || context === void 0 ? void 0 : context.styleContainer) || document.head;
      styleRef.current = getCurrentStyleRef(styleContainer);
      if (!styleRef.current.isConnected) {
        styleRef.current.type = 'text/css';
        if (id) {
          styleRef.current.id = id;
        }
        if (media) {
          styleRef.current.media = media;
        }
        utils$2.DomHandler.addNonce(styleRef.current, context && context.nonce || PrimeReact__default$1["default"].nonce);
        styleContainer.appendChild(styleRef.current);
        if (name) {
          styleRef.current.setAttribute('data-primereact-style-id', name);
        }
      }
      styleRef.current.textContent = css;
      setIsLoaded(true);
    };
    var unload = function unload() {
      if (!document || !styleRef.current) {
        return;
      }
      utils$2.DomHandler.removeInlineStyle(styleRef.current);
      setIsLoaded(false);
    };
    React$1.useEffect(function () {
      if (!manual) {
        load();
      }

      // return () => {if (!manual) unload()}; /* @todo */
      // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [manual]);
    return {
      id: id,
      name: name,
      update: update,
      unload: unload,
      load: load,
      isLoaded: isLoaded
    };
  };

  /* eslint-disable */
  var useTimeout = function useTimeout(fn) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var when = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var timeout = React__namespace$1.useRef(null);
    var savedCallback = React__namespace$1.useRef(null);
    var clear = React__namespace$1.useCallback(function () {
      return clearTimeout(timeout.current);
    }, [timeout.current]);
    React__namespace$1.useEffect(function () {
      savedCallback.current = fn;
    });
    React__namespace$1.useEffect(function () {
      function callback() {
        savedCallback.current();
      }
      if (when) {
        timeout.current = setTimeout(callback, delay);
        return clear;
      } else {
        clear();
      }
    }, [delay, when]);
    useUnmountEffect(function () {
      clear();
    });
    return [clear];
  };
  /* eslint-enable */

  /* eslint-disable */
  var useUpdateEffect = function useUpdateEffect(fn, deps) {
    var mounted = React__namespace$1.useRef(false);
    return React__namespace$1.useEffect(function () {
      if (!mounted.current) {
        mounted.current = true;
        return;
      }
      return fn && fn();
    }, deps);
  };
  /* eslint-enable */

  hooks_cjs.ESC_KEY_HANDLING_PRIORITIES = ESC_KEY_HANDLING_PRIORITIES;
  hooks_cjs.useClickOutside = useClickOutside;
  hooks_cjs.useCounter = useCounter;
  hooks_cjs.useDebounce = useDebounce;
  hooks_cjs.useDisplayOrder = useDisplayOrder;
  hooks_cjs.useEventListener = useEventListener;
  hooks_cjs.useFavicon = useFavicon;
  hooks_cjs.useGlobalOnEscapeKey = useGlobalOnEscapeKey;
  hooks_cjs.useIntersectionObserver = useIntersectionObserver;
  hooks_cjs.useInterval = useInterval;
  hooks_cjs.useLocalStorage = useLocalStorage;
  hooks_cjs.useMatchMedia = useMatchMedia;
  hooks_cjs.useMergeProps = useMergeProps;
  hooks_cjs.useMountEffect = useMountEffect;
  hooks_cjs.useMouse = useMouse;
  hooks_cjs.useMove = useMove;
  hooks_cjs.useOverlayListener = useOverlayListener;
  hooks_cjs.useOverlayScrollListener = useOverlayScrollListener;
  hooks_cjs.usePrevious = usePrevious;
  hooks_cjs.useResizeListener = useResizeListener;
  hooks_cjs.useSessionStorage = useSessionStorage;
  hooks_cjs.useStorage = useStorage;
  hooks_cjs.useStyle = useStyle;
  hooks_cjs.useTimeout = useTimeout;
  hooks_cjs.useUnmountEffect = useUnmountEffect;
  hooks_cjs.useUpdateEffect = useUpdateEffect;

  Object.defineProperty(componentbase_cjs, '__esModule', { value: true });

  var PrimeReact = api_cjs;
  var hooks$1 = hooks_cjs;
  var utils$1 = utils_cjs;

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var PrimeReact__default = /*#__PURE__*/_interopDefaultLegacy(PrimeReact);

  function _arrayLikeToArray$1(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }

  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray$1(r);
  }

  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }

  function _unsupportedIterableToArray$1(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray$1(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0;
    }
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray$1(r) || _nonIterableSpread();
  }

  function _typeof$1(o) {
    "@babel/helpers - typeof";

    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof$1(o);
  }

  function toPrimitive$1(t, r) {
    if ("object" != _typeof$1(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != _typeof$1(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }

  function toPropertyKey$1(t) {
    var i = toPrimitive$1(t, "string");
    return "symbol" == _typeof$1(i) ? i : i + "";
  }

  function _defineProperty$1(e, r, t) {
    return (r = toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }

  function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), true).forEach(function (r) { _defineProperty$1(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var baseStyle = "\n.p-hidden-accessible {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    opacity: 0;\n    overflow: hidden;\n    padding: 0;\n    pointer-events: none;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n}\n\n.p-overflow-hidden {\n    overflow: hidden;\n    padding-right: var(--scrollbar-width);\n}\n";
  var buttonStyles = "\n.p-button {\n    margin: 0;\n    display: inline-flex;\n    cursor: pointer;\n    user-select: none;\n    align-items: center;\n    vertical-align: bottom;\n    text-align: center;\n    overflow: hidden;\n    position: relative;\n}\n\n.p-button-label {\n    flex: 1 1 auto;\n}\n\n.p-button-icon {\n    pointer-events: none;\n}\n\n.p-button-icon-right {\n    order: 1;\n}\n\n.p-button:disabled {\n    cursor: default;\n}\n\n.p-button-icon-only {\n    justify-content: center;\n}\n\n.p-button-icon-only .p-button-label {\n    visibility: hidden;\n    width: 0;\n    flex: 0 0 auto;\n}\n\n.p-button-vertical {\n    flex-direction: column;\n}\n\n.p-button-icon-bottom {\n    order: 2;\n}\n\n.p-button-group .p-button {\n    margin: 0;\n}\n\n.p-button-group .p-button:not(:last-child) {\n    border-right: 0 none;\n}\n\n.p-button-group .p-button:not(:first-of-type):not(:last-of-type) {\n    border-radius: 0;\n}\n\n.p-button-group .p-button:first-of-type {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n.p-button-group .p-button:last-of-type {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n}\n\n.p-button-group .p-button:focus {\n    position: relative;\n    z-index: 1;\n}\n\n.p-button-group-single .p-button:first-of-type {\n    border-top-right-radius: var(--border-radius) !important;\n    border-bottom-right-radius: var(--border-radius) !important;\n}\n\n.p-button-group-single .p-button:last-of-type {\n    border-top-left-radius: var(--border-radius) !important;\n    border-bottom-left-radius: var(--border-radius) !important;\n}\n";
  var inputTextStyles = "\n.p-inputtext {\n    margin: 0;\n}\n\n.p-fluid .p-inputtext {\n    width: 100%;\n}\n\n/* InputGroup */\n.p-inputgroup {\n    display: flex;\n    align-items: stretch;\n    width: 100%;\n}\n\n.p-inputgroup-addon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.p-inputgroup .p-float-label {\n    display: flex;\n    align-items: stretch;\n    width: 100%;\n}\n\n.p-inputgroup .p-inputtext,\n.p-fluid .p-inputgroup .p-inputtext,\n.p-inputgroup .p-inputwrapper,\n.p-fluid .p-inputgroup .p-input {\n    flex: 1 1 auto;\n    width: 1%;\n}\n\n/* Floating Label */\n.p-float-label {\n    display: block;\n    position: relative;\n}\n\n.p-float-label label {\n    position: absolute;\n    pointer-events: none;\n    top: 50%;\n    margin-top: -0.5rem;\n    transition-property: all;\n    transition-timing-function: ease;\n    line-height: 1;\n}\n\n.p-float-label textarea ~ label,\n.p-float-label .p-mention ~ label {\n    top: 1rem;\n}\n\n.p-float-label input:focus ~ label,\n.p-float-label input:-webkit-autofill ~ label,\n.p-float-label input.p-filled ~ label,\n.p-float-label textarea:focus ~ label,\n.p-float-label textarea.p-filled ~ label,\n.p-float-label .p-inputwrapper-focus ~ label,\n.p-float-label .p-inputwrapper-filled ~ label,\n.p-float-label .p-tooltip-target-wrapper ~ label {\n    top: -0.75rem;\n    font-size: 12px;\n}\n\n.p-float-label .p-placeholder,\n.p-float-label input::placeholder,\n.p-float-label .p-inputtext::placeholder {\n    opacity: 0;\n    transition-property: all;\n    transition-timing-function: ease;\n}\n\n.p-float-label .p-focus .p-placeholder,\n.p-float-label input:focus::placeholder,\n.p-float-label .p-inputtext:focus::placeholder {\n    opacity: 1;\n    transition-property: all;\n    transition-timing-function: ease;\n}\n\n.p-input-icon-left,\n.p-input-icon-right {\n    position: relative;\n    display: inline-block;\n}\n\n.p-input-icon-left > i,\n.p-input-icon-right > i,\n.p-input-icon-left > svg,\n.p-input-icon-right > svg,\n.p-input-icon-left > .p-input-prefix,\n.p-input-icon-right > .p-input-suffix {\n    position: absolute;\n    top: 50%;\n    margin-top: -0.5rem;\n}\n\n.p-fluid .p-input-icon-left,\n.p-fluid .p-input-icon-right {\n    display: block;\n    width: 100%;\n}\n";
  var iconStyles = "\n.p-icon {\n    display: inline-block;\n}\n\n.p-icon-spin {\n    -webkit-animation: p-icon-spin 2s infinite linear;\n    animation: p-icon-spin 2s infinite linear;\n}\n\nsvg.p-icon {\n    pointer-events: auto;\n}\n\nsvg.p-icon g,\n.p-disabled svg.p-icon {\n    pointer-events: none;\n}\n\n@-webkit-keyframes p-icon-spin {\n    0% {\n        -webkit-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(359deg);\n        transform: rotate(359deg);\n    }\n}\n\n@keyframes p-icon-spin {\n    0% {\n        -webkit-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(359deg);\n        transform: rotate(359deg);\n    }\n}\n";
  var commonStyle = "\n@layer primereact {\n    .p-component, .p-component * {\n        box-sizing: border-box;\n    }\n\n    .p-hidden {\n        display: none;\n    }\n\n    .p-hidden-space {\n        visibility: hidden;\n    }\n\n    .p-reset {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        outline: 0;\n        text-decoration: none;\n        font-size: 100%;\n        list-style: none;\n    }\n\n    .p-disabled, .p-disabled * {\n        cursor: default;\n        pointer-events: none;\n        user-select: none;\n    }\n\n    .p-component-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n\n    .p-unselectable-text {\n        user-select: none;\n    }\n\n    .p-scrollbar-measure {\n        width: 100px;\n        height: 100px;\n        overflow: scroll;\n        position: absolute;\n        top: -9999px;\n    }\n\n    @-webkit-keyframes p-fadein {\n      0%   { opacity: 0; }\n      100% { opacity: 1; }\n    }\n    @keyframes p-fadein {\n      0%   { opacity: 0; }\n      100% { opacity: 1; }\n    }\n\n    .p-link {\n        text-align: left;\n        background-color: transparent;\n        margin: 0;\n        padding: 0;\n        border: none;\n        cursor: pointer;\n        user-select: none;\n    }\n\n    .p-link:disabled {\n        cursor: default;\n    }\n\n    /* Non react overlay animations */\n    .p-connected-overlay {\n        opacity: 0;\n        transform: scaleY(0.8);\n        transition: transform .12s cubic-bezier(0, 0, 0.2, 1), opacity .12s cubic-bezier(0, 0, 0.2, 1);\n    }\n\n    .p-connected-overlay-visible {\n        opacity: 1;\n        transform: scaleY(1);\n    }\n\n    .p-connected-overlay-hidden {\n        opacity: 0;\n        transform: scaleY(1);\n        transition: opacity .1s linear;\n    }\n\n    /* React based overlay animations */\n    .p-connected-overlay-enter {\n        opacity: 0;\n        transform: scaleY(0.8);\n    }\n\n    .p-connected-overlay-enter-active {\n        opacity: 1;\n        transform: scaleY(1);\n        transition: transform .12s cubic-bezier(0, 0, 0.2, 1), opacity .12s cubic-bezier(0, 0, 0.2, 1);\n    }\n\n    .p-connected-overlay-enter-done {\n        transform: none;\n    }\n\n    .p-connected-overlay-exit {\n        opacity: 1;\n    }\n\n    .p-connected-overlay-exit-active {\n        opacity: 0;\n        transition: opacity .1s linear;\n    }\n\n    /* Toggleable Content */\n    .p-toggleable-content-enter {\n        max-height: 0;\n    }\n\n    .p-toggleable-content-enter-active {\n        overflow: hidden;\n        max-height: 1000px;\n        transition: max-height 1s ease-in-out;\n    }\n\n    .p-toggleable-content-enter-done {\n        transform: none;\n    }\n\n    .p-toggleable-content-exit {\n        max-height: 1000px;\n    }\n\n    .p-toggleable-content-exit-active {\n        overflow: hidden;\n        max-height: 0;\n        transition: max-height 0.45s cubic-bezier(0, 1, 0, 1);\n    }\n\n    /* @todo Refactor */\n    .p-menu .p-menuitem-link {\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        text-decoration: none;\n        overflow: hidden;\n        position: relative;\n    }\n\n    ".concat(buttonStyles, "\n    ").concat(inputTextStyles, "\n    ").concat(iconStyles, "\n}\n");
  var ComponentBase = {
    cProps: undefined,
    cParams: undefined,
    cName: undefined,
    defaultProps: {
      pt: undefined,
      ptOptions: undefined,
      unstyled: false
    },
    context: {},
    globalCSS: undefined,
    classes: {},
    styles: '',
    extend: function extend() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var css = props.css;
      var defaultProps = _objectSpread$1(_objectSpread$1({}, props.defaultProps), ComponentBase.defaultProps);
      var inlineStyles = {};
      var getProps = function getProps(props) {
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        ComponentBase.context = context;
        ComponentBase.cProps = props;
        return utils$1.ObjectUtils.getMergedProps(props, defaultProps);
      };
      var getOtherProps = function getOtherProps(props) {
        return utils$1.ObjectUtils.getDiffProps(props, defaultProps);
      };
      var getPTValue = function getPTValue() {
        var _ComponentBase$contex;
        var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var searchInDefaultPT = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
        // obj either is the passthrough options or has a .pt property.
        if (obj.hasOwnProperty('pt') && obj.pt !== undefined) {
          obj = obj.pt;
        }
        var originalkey = key;
        var isNestedParam = /./g.test(originalkey) && !!params[originalkey.split('.')[0]];
        var fkey = isNestedParam ? utils$1.ObjectUtils.toFlatCase(originalkey.split('.')[1]) : utils$1.ObjectUtils.toFlatCase(originalkey);
        var hostName = params.hostName && utils$1.ObjectUtils.toFlatCase(params.hostName);
        var componentName = hostName || params.props && params.props.__TYPE && utils$1.ObjectUtils.toFlatCase(params.props.__TYPE) || '';
        var isTransition = fkey === 'transition';
        var datasetPrefix = 'data-pc-';
        var _getHostInstance = function getHostInstance(params) {
          return params !== null && params !== void 0 && params.props ? params.hostName ? params.props.__TYPE === params.hostName ? params.props : _getHostInstance(params.parent) : params.parent : undefined;
        };
        var getPropValue = function getPropValue(name) {
          var _params$props, _getHostInstance2;
          return ((_params$props = params.props) === null || _params$props === void 0 ? void 0 : _params$props[name]) || ((_getHostInstance2 = _getHostInstance(params)) === null || _getHostInstance2 === void 0 ? void 0 : _getHostInstance2[name]);
        };
        ComponentBase.cParams = params;
        ComponentBase.cName = componentName;
        var _ref = getPropValue('ptOptions') || ComponentBase.context.ptOptions || {},
          _ref$mergeSections = _ref.mergeSections,
          mergeSections = _ref$mergeSections === void 0 ? true : _ref$mergeSections,
          _ref$mergeProps = _ref.mergeProps,
          useMergeProps = _ref$mergeProps === void 0 ? false : _ref$mergeProps;
        var getPTClassValue = function getPTClassValue() {
          var value = _getOptionValue.apply(void 0, arguments);
          if (Array.isArray(value)) {
            return {
              className: utils$1.classNames.apply(void 0, _toConsumableArray(value))
            };
          }
          if (utils$1.ObjectUtils.isString(value)) {
            return {
              className: value
            };
          }
          if (value !== null && value !== void 0 && value.hasOwnProperty('className') && Array.isArray(value.className)) {
            return {
              className: utils$1.classNames.apply(void 0, _toConsumableArray(value.className))
            };
          }
          return value;
        };
        var globalPT = searchInDefaultPT ? isNestedParam ? _useGlobalPT(getPTClassValue, originalkey, params) : _useDefaultPT(getPTClassValue, originalkey, params) : undefined;
        var self = isNestedParam ? undefined : _usePT(_getPT(obj, componentName), getPTClassValue, originalkey, params);
        var datasetProps = !isTransition && _objectSpread$1(_objectSpread$1({}, fkey === 'root' && _defineProperty$1({}, "".concat(datasetPrefix, "name"), params.props && params.props.__parentMetadata ? utils$1.ObjectUtils.toFlatCase(params.props.__TYPE) : componentName)), {}, _defineProperty$1({}, "".concat(datasetPrefix, "section"), fkey));
        return mergeSections || !mergeSections && self ? useMergeProps ? utils$1.mergeProps([globalPT, self, Object.keys(datasetProps).length ? datasetProps : {}], {
          classNameMergeFunction: (_ComponentBase$contex = ComponentBase.context.ptOptions) === null || _ComponentBase$contex === void 0 ? void 0 : _ComponentBase$contex.classNameMergeFunction
        }) : _objectSpread$1(_objectSpread$1(_objectSpread$1({}, globalPT), self), Object.keys(datasetProps).length ? datasetProps : {}) : _objectSpread$1(_objectSpread$1({}, self), Object.keys(datasetProps).length ? datasetProps : {});
      };
      var setMetaData = function setMetaData() {
        var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var props = metadata.props,
          state = metadata.state;
        var ptm = function ptm() {
          var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          return getPTValue((props || {}).pt, key, _objectSpread$1(_objectSpread$1({}, metadata), params));
        };
        var ptmo = function ptmo() {
          var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
          var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          return getPTValue(obj, key, params, false);
        };
        var isUnstyled = function isUnstyled() {
          return ComponentBase.context.unstyled || PrimeReact__default["default"].unstyled || props.unstyled;
        };
        var cx = function cx() {
          var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          return !isUnstyled() ? _getOptionValue(css && css.classes, key, _objectSpread$1({
            props: props,
            state: state
          }, params)) : undefined;
        };
        var sx = function sx() {
          var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
          var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var when = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
          if (when) {
            var _ComponentBase$contex2;
            var self = _getOptionValue(css && css.inlineStyles, key, _objectSpread$1({
              props: props,
              state: state
            }, params));
            var base = _getOptionValue(inlineStyles, key, _objectSpread$1({
              props: props,
              state: state
            }, params));
            return utils$1.mergeProps([base, self], {
              classNameMergeFunction: (_ComponentBase$contex2 = ComponentBase.context.ptOptions) === null || _ComponentBase$contex2 === void 0 ? void 0 : _ComponentBase$contex2.classNameMergeFunction
            });
          }
          return undefined;
        };
        return {
          ptm: ptm,
          ptmo: ptmo,
          sx: sx,
          cx: cx,
          isUnstyled: isUnstyled
        };
      };
      return _objectSpread$1(_objectSpread$1({
        getProps: getProps,
        getOtherProps: getOtherProps,
        setMetaData: setMetaData
      }, props), {}, {
        defaultProps: defaultProps
      });
    }
  };
  var _getOptionValue = function getOptionValue(obj) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var fKeys = String(utils$1.ObjectUtils.toFlatCase(key)).split('.');
    var fKey = fKeys.shift();
    var matchedPTOption = utils$1.ObjectUtils.isNotEmpty(obj) ? Object.keys(obj).find(function (k) {
      return utils$1.ObjectUtils.toFlatCase(k) === fKey;
    }) : '';
    return fKey ? utils$1.ObjectUtils.isObject(obj) ? _getOptionValue(utils$1.ObjectUtils.getItemValue(obj[matchedPTOption], params), fKeys.join('.'), params) : undefined : utils$1.ObjectUtils.getItemValue(obj, params);
  };
  var _getPT = function _getPT(pt) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var callback = arguments.length > 2 ? arguments[2] : undefined;
    var _usept = pt === null || pt === void 0 ? void 0 : pt._usept;
    var getValue = function getValue(value) {
      var _ref3;
      var checkSameKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var _value = callback ? callback(value) : value;
      var _key = utils$1.ObjectUtils.toFlatCase(key);
      return (_ref3 = checkSameKey ? _key !== ComponentBase.cName ? _value === null || _value === void 0 ? void 0 : _value[_key] : undefined : _value === null || _value === void 0 ? void 0 : _value[_key]) !== null && _ref3 !== void 0 ? _ref3 : _value;
    };
    return utils$1.ObjectUtils.isNotEmpty(_usept) ? {
      _usept: _usept,
      originalValue: getValue(pt.originalValue),
      value: getValue(pt.value)
    } : getValue(pt, true);
  };
  var _usePT = function _usePT(pt, callback, key, params) {
    var fn = function fn(value) {
      return callback(value, key, params);
    };
    if (pt !== null && pt !== void 0 && pt.hasOwnProperty('_usept')) {
      var _ref4 = pt._usept || ComponentBase.context.ptOptions || {},
        _ref4$mergeSections = _ref4.mergeSections,
        mergeSections = _ref4$mergeSections === void 0 ? true : _ref4$mergeSections,
        _ref4$mergeProps = _ref4.mergeProps,
        useMergeProps = _ref4$mergeProps === void 0 ? false : _ref4$mergeProps,
        classNameMergeFunction = _ref4.classNameMergeFunction;
      var originalValue = fn(pt.originalValue);
      var value = fn(pt.value);
      if (originalValue === undefined && value === undefined) {
        return undefined;
      } else if (utils$1.ObjectUtils.isString(value)) {
        return value;
      } else if (utils$1.ObjectUtils.isString(originalValue)) {
        return originalValue;
      }
      return mergeSections || !mergeSections && value ? useMergeProps ? utils$1.mergeProps([originalValue, value], {
        classNameMergeFunction: classNameMergeFunction
      }) : _objectSpread$1(_objectSpread$1({}, originalValue), value) : value;
    }
    return fn(pt);
  };
  var getGlobalPT = function getGlobalPT() {
    return _getPT(ComponentBase.context.pt || PrimeReact__default["default"].pt, undefined, function (value) {
      return utils$1.ObjectUtils.getItemValue(value, ComponentBase.cParams);
    });
  };
  var getDefaultPT = function getDefaultPT() {
    return _getPT(ComponentBase.context.pt || PrimeReact__default["default"].pt, undefined, function (value) {
      return _getOptionValue(value, ComponentBase.cName, ComponentBase.cParams) || utils$1.ObjectUtils.getItemValue(value, ComponentBase.cParams);
    });
  };
  var _useGlobalPT = function _useGlobalPT(callback, key, params) {
    return _usePT(getGlobalPT(), callback, key, params);
  };
  var _useDefaultPT = function _useDefaultPT(callback, key, params) {
    return _usePT(getDefaultPT(), callback, key, params);
  };
  var useHandleStyle = function useHandleStyle(styles) {
    var _isUnstyled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
    var config = arguments.length > 2 ? arguments[2] : undefined;
    var name = config.name,
      _config$styled = config.styled,
      styled = _config$styled === void 0 ? false : _config$styled,
      _config$hostName = config.hostName,
      hostName = _config$hostName === void 0 ? '' : _config$hostName;
    var globalCSS = _useGlobalPT(_getOptionValue, 'global.css', ComponentBase.cParams);
    var componentName = utils$1.ObjectUtils.toFlatCase(name);
    var _useStyle = hooks$1.useStyle(baseStyle, {
        name: 'base',
        manual: true
      }),
      loadBaseStyle = _useStyle.load;
    var _useStyle2 = hooks$1.useStyle(commonStyle, {
        name: 'common',
        manual: true
      }),
      loadCommonStyle = _useStyle2.load;
    var _useStyle3 = hooks$1.useStyle(globalCSS, {
        name: 'global',
        manual: true
      }),
      loadGlobalStyle = _useStyle3.load;
    var _useStyle4 = hooks$1.useStyle(styles, {
        name: name,
        manual: true
      }),
      loadComponentStyle = _useStyle4.load;
    var hook = function hook(hookName) {
      if (!hostName) {
        var selfHook = _usePT(_getPT((ComponentBase.cProps || {}).pt, componentName), _getOptionValue, "hooks.".concat(hookName));
        var defaultHook = _useDefaultPT(_getOptionValue, "hooks.".concat(hookName));
        selfHook === null || selfHook === void 0 || selfHook();
        defaultHook === null || defaultHook === void 0 || defaultHook();
      }
    };
    hook('useMountEffect');
    hooks$1.useMountEffect(function () {
      // Load base and global styles first as they are always needed
      loadBaseStyle();
      loadGlobalStyle();

      // Only load additional styles if component is styled
      if (!_isUnstyled()) {
        // Load common styles shared across components
        loadCommonStyle();

        // Load component-specific styles if not explicitly styled
        if (!styled) {
          loadComponentStyle();
        }
      }
    });
    hooks$1.useUpdateEffect(function () {
      hook('useUpdateEffect');
    });
    hooks$1.useUnmountEffect(function () {
      hook('useUnmountEffect');
    });
  };

  componentbase_cjs.ComponentBase = ComponentBase;
  componentbase_cjs.useHandleStyle = useHandleStyle;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Built-in value references. */
  var Symbol$1 = root.Symbol;

  /** Used for built-in method references. */
  var objectProto$f = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$f.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$f.toString;

  /** Built-in value references. */
  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty$c.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$e = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto$e.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
      objectProto$d = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$d.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$1.call(hasOwnProperty$b).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  /* Built-in method references that are verified to be native. */
  var WeakMap$1 = getNative(root, 'WeakMap');

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function() {
      return value;
    };
  }

  var defineProperty = (function() {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = shortOut(baseSetToString);

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER$1 : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$c.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$a.call(object, key) && eq(objValue, value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq(object[index], value);
    }
    return false;
  }

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$b;

    return value === proto;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag$3;
  }

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$a.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$a.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty$9.call(value, 'callee') &&
      !propertyIsEnumerable$1.call(value, 'callee');
  };

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  /** Detect free variable `exports`. */
  var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

  /** Built-in value references. */
  var Buffer$2 = moduleExports$2 ? root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer$2 ? Buffer$2.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      boolTag$3 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$2 = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag$5 = '[object Map]',
      numberTag$3 = '[object Number]',
      objectTag$4 = '[object Object]',
      regexpTag$3 = '[object RegExp]',
      setTag$5 = '[object Set]',
      stringTag$3 = '[object String]',
      weakMapTag$2 = '[object WeakMap]';

  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
  typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
  typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
  typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
  typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
  typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] =
  typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
  typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] =
  typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] =
  typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] =
  typedArrayTags[weakMapTag$2] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /** Detect free variable `exports`. */
  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports$1 && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$9.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$8.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = overArg(Object.keys, Object);

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$6.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  /* Built-in method references that are verified to be native. */
  var nativeCreate = getNative(Object, 'create');

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? undefined : result;
    }
    return hasOwnProperty$5.call(data, key) ? data[key] : undefined;
  }

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$4.call(data, key);
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /* Built-in method references that are verified to be native. */
  var Map$1 = getNative(root, 'Map');

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map$1 || ListCache),
      'string': new Hash
    };
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /** Built-in value references. */
  var getPrototype = overArg(Object.getPrototypeOf, Object);

  /** `Object#toString` result references. */
  var objectTag$3 = '[object Object]';

  /** Used for built-in method references. */
  var funcProto = Function.prototype,
      objectProto$4 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString.call(Object);

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$3.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor &&
      funcToString.call(Ctor) == objectCtorString;
  }

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map$1 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer$1 = moduleExports ? root.Buffer : undefined,
      allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : undefined;

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    buffer.copy(result);
    return result;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  /* Built-in method references that are verified to be native. */
  var DataView = getNative(root, 'DataView');

  /* Built-in method references that are verified to be native. */
  var Promise$1 = getNative(root, 'Promise');

  /* Built-in method references that are verified to be native. */
  var Set$1 = getNative(root, 'Set');

  /** `Object#toString` result references. */
  var mapTag$4 = '[object Map]',
      objectTag$2 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$4 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';

  var dataViewTag$3 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map$1),
      promiseCtorString = toSource(Promise$1),
      setCtorString = toSource(Set$1),
      weakMapCtorString = toSource(WeakMap$1);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$3) ||
      (Map$1 && getTag(new Map$1) != mapTag$4) ||
      (Promise$1 && getTag(Promise$1.resolve()) != promiseTag) ||
      (Set$1 && getTag(new Set$1) != setTag$4) ||
      (WeakMap$1 && getTag(new WeakMap$1) != weakMapTag$1)) {
    getTag = function(value) {
      var result = baseGetTag(value),
          Ctor = result == objectTag$2 ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag$3;
          case mapCtorString: return mapTag$4;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag$4;
          case weakMapCtorString: return weakMapTag$1;
        }
      }
      return result;
    };
  }

  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$2.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  /** Built-in value references. */
  var Uint8Array$1 = root.Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = cloneArrayBuffer(dataView.buffer) ;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : undefined,
      symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  /** `Object#toString` result references. */
  var boolTag$2 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      mapTag$3 = '[object Map]',
      numberTag$2 = '[object Number]',
      regexpTag$2 = '[object RegExp]',
      setTag$3 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$2 = '[object Symbol]';

  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$2:
        return cloneArrayBuffer(object);

      case boolTag$2:
      case dateTag$2:
        return new Ctor(+object);

      case dataViewTag$2:
        return cloneDataView(object);

      case float32Tag$1: case float64Tag$1:
      case int8Tag$1: case int16Tag$1: case int32Tag$1:
      case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
        return cloneTypedArray(object, isDeep);

      case mapTag$3:
        return new Ctor;

      case numberTag$2:
      case stringTag$2:
        return new Ctor(object);

      case regexpTag$2:
        return cloneRegExp(object);

      case setTag$3:
        return new Ctor;

      case symbolTag$2:
        return cloneSymbol(object);
    }
  }

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !isPrototype(object))
      ? baseCreate(getPrototype(object))
      : {};
  }

  /** `Object#toString` result references. */
  var mapTag$2 = '[object Map]';

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag$2;
  }

  /* Node.js helper references. */
  var nodeIsMap = nodeUtil && nodeUtil.isMap;

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

  /** `Object#toString` result references. */
  var setTag$2 = '[object Set]';

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag$2;
  }

  /* Node.js helper references. */
  var nodeIsSet = nodeUtil && nodeUtil.isSet;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      errorTag$1 = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag$1 = '[object Map]',
      numberTag$1 = '[object Number]',
      objectTag$1 = '[object Object]',
      regexpTag$1 = '[object RegExp]',
      setTag$1 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag$1 = '[object Symbol]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$1 = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
  cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] =
  cloneableTags[boolTag$1] = cloneableTags[dateTag$1] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag$1] =
  cloneableTags[numberTag$1] = cloneableTags[objectTag$1] =
  cloneableTags[regexpTag$1] = cloneableTags[setTag$1] =
  cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG$1;
    if (result !== undefined) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
    } else {
      var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$1 || tag == argsTag$1 || (isFunc && !object)) {
        result = (isFunc) ? {} : initCloneObject(value);
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
    }

    var keysFunc = (getAllKeys)
      ;

    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_SYMBOLS_FLAG = 4;

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep$1(value) {
    return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG$1) ? new SetCache : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function(othValue, othIndex) {
              if (!cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
          return false;
        }
        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
        return false;
      }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);

    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;

    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack);
      return (objIsArr || isTypedArray(object))
        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue(object, key, value) {
    if ((value !== undefined && !eq(object[key], value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key),
        srcValue = safeGet(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer
      ? customizer(objValue, srcValue, (key + ''), object, source, stack)
      : undefined;

    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray(srcValue),
          isBuff = !isArr && isBuffer(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray(srcValue);

      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray(objValue)) {
          newValue = objValue;
        }
        else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        }
        else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        }
        else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        }
        else {
          newValue = [];
        }
      }
      else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        }
        else if (!isObject(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      }
      else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function(srcValue, key) {
      stack || (stack = new Stack);
      if (isObject(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      }
      else {
        var newValue = customizer
          ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
          : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn);
  }

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual$2(value, other) {
    return baseIsEqual(value, other);
  }

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });

  var Scope = /* @__PURE__ */ ((Scope2) => (Scope2[Scope2.TYPE = 3] = "TYPE", Scope2[Scope2.LEVEL = 12] = "LEVEL", Scope2[Scope2.ATTRIBUTE = 13] = "ATTRIBUTE", Scope2[Scope2.BLOT = 14] = "BLOT", Scope2[Scope2.INLINE = 7] = "INLINE", Scope2[Scope2.BLOCK = 11] = "BLOCK", Scope2[Scope2.BLOCK_BLOT = 10] = "BLOCK_BLOT", Scope2[Scope2.INLINE_BLOT = 6] = "INLINE_BLOT", Scope2[Scope2.BLOCK_ATTRIBUTE = 9] = "BLOCK_ATTRIBUTE", Scope2[Scope2.INLINE_ATTRIBUTE = 5] = "INLINE_ATTRIBUTE", Scope2[Scope2.ANY = 15] = "ANY", Scope2))(Scope || {});
  class Attributor {
    constructor(attrName, keyName, options = {}) {
      this.attrName = attrName, this.keyName = keyName;
      const attributeBit = Scope.TYPE & Scope.ATTRIBUTE;
      this.scope = options.scope != null ? (
        // Ignore type bits, force attribute bit
        options.scope & Scope.LEVEL | attributeBit
      ) : Scope.ATTRIBUTE, options.whitelist != null && (this.whitelist = options.whitelist);
    }
    static keys(node) {
      return Array.from(node.attributes).map((item) => item.name);
    }
    add(node, value) {
      return this.canAdd(node, value) ? (node.setAttribute(this.keyName, value), true) : false;
    }
    canAdd(_node, value) {
      return this.whitelist == null ? true : typeof value == "string" ? this.whitelist.indexOf(value.replace(/["']/g, "")) > -1 : this.whitelist.indexOf(value) > -1;
    }
    remove(node) {
      node.removeAttribute(this.keyName);
    }
    value(node) {
      const value = node.getAttribute(this.keyName);
      return this.canAdd(node, value) && value ? value : "";
    }
  }
  class ParchmentError extends Error {
    constructor(message) {
      message = "[Parchment] " + message, super(message), this.message = message, this.name = this.constructor.name;
    }
  }
  const _Registry = class _Registry {
    constructor() {
      this.attributes = {}, this.classes = {}, this.tags = {}, this.types = {};
    }
    static find(node, bubble = false) {
      if (node == null)
        return null;
      if (this.blots.has(node))
        return this.blots.get(node) || null;
      if (bubble) {
        let parentNode = null;
        try {
          parentNode = node.parentNode;
        } catch {
          return null;
        }
        return this.find(parentNode, bubble);
      }
      return null;
    }
    create(scroll, input, value) {
      const match2 = this.query(input);
      if (match2 == null)
        throw new ParchmentError(`Unable to create ${input} blot`);
      const blotClass = match2, node = (
        // @ts-expect-error Fix me later
        input instanceof Node || input.nodeType === Node.TEXT_NODE ? input : blotClass.create(value)
      ), blot = new blotClass(scroll, node, value);
      return _Registry.blots.set(blot.domNode, blot), blot;
    }
    find(node, bubble = false) {
      return _Registry.find(node, bubble);
    }
    query(query, scope = Scope.ANY) {
      let match2;
      return typeof query == "string" ? match2 = this.types[query] || this.attributes[query] : query instanceof Text || query.nodeType === Node.TEXT_NODE ? match2 = this.types.text : typeof query == "number" ? query & Scope.LEVEL & Scope.BLOCK ? match2 = this.types.block : query & Scope.LEVEL & Scope.INLINE && (match2 = this.types.inline) : query instanceof Element && ((query.getAttribute("class") || "").split(/\s+/).some((name) => (match2 = this.classes[name], !!match2)), match2 = match2 || this.tags[query.tagName]), match2 == null ? null : "scope" in match2 && scope & Scope.LEVEL & match2.scope && scope & Scope.TYPE & match2.scope ? match2 : null;
    }
    register(...definitions) {
      return definitions.map((definition) => {
        const isBlot = "blotName" in definition, isAttr = "attrName" in definition;
        if (!isBlot && !isAttr)
          throw new ParchmentError("Invalid definition");
        if (isBlot && definition.blotName === "abstract")
          throw new ParchmentError("Cannot register abstract class");
        const key = isBlot ? definition.blotName : isAttr ? definition.attrName : void 0;
        return this.types[key] = definition, isAttr ? typeof definition.keyName == "string" && (this.attributes[definition.keyName] = definition) : isBlot && (definition.className && (this.classes[definition.className] = definition), definition.tagName && (Array.isArray(definition.tagName) ? definition.tagName = definition.tagName.map((tagName) => tagName.toUpperCase()) : definition.tagName = definition.tagName.toUpperCase(), (Array.isArray(definition.tagName) ? definition.tagName : [definition.tagName]).forEach((tag) => {
          (this.tags[tag] == null || definition.className == null) && (this.tags[tag] = definition);
        }))), definition;
      });
    }
  };
  _Registry.blots = /* @__PURE__ */ new WeakMap();
  let Registry = _Registry;
  function match(node, prefix) {
    return (node.getAttribute("class") || "").split(/\s+/).filter((name) => name.indexOf(`${prefix}-`) === 0);
  }
  class ClassAttributor extends Attributor {
    static keys(node) {
      return (node.getAttribute("class") || "").split(/\s+/).map((name) => name.split("-").slice(0, -1).join("-"));
    }
    add(node, value) {
      return this.canAdd(node, value) ? (this.remove(node), node.classList.add(`${this.keyName}-${value}`), true) : false;
    }
    remove(node) {
      match(node, this.keyName).forEach((name) => {
        node.classList.remove(name);
      }), node.classList.length === 0 && node.removeAttribute("class");
    }
    value(node) {
      const value = (match(node, this.keyName)[0] || "").slice(this.keyName.length + 1);
      return this.canAdd(node, value) ? value : "";
    }
  }
  const ClassAttributor$1 = ClassAttributor;
  function camelize(name) {
    const parts = name.split("-"), rest = parts.slice(1).map((part) => part[0].toUpperCase() + part.slice(1)).join("");
    return parts[0] + rest;
  }
  class StyleAttributor extends Attributor {
    static keys(node) {
      return (node.getAttribute("style") || "").split(";").map((value) => value.split(":")[0].trim());
    }
    add(node, value) {
      return this.canAdd(node, value) ? (node.style[camelize(this.keyName)] = value, true) : false;
    }
    remove(node) {
      node.style[camelize(this.keyName)] = "", node.getAttribute("style") || node.removeAttribute("style");
    }
    value(node) {
      const value = node.style[camelize(this.keyName)];
      return this.canAdd(node, value) ? value : "";
    }
  }
  const StyleAttributor$1 = StyleAttributor;
  class AttributorStore {
    constructor(domNode) {
      this.attributes = {}, this.domNode = domNode, this.build();
    }
    attribute(attribute, value) {
      value ? attribute.add(this.domNode, value) && (attribute.value(this.domNode) != null ? this.attributes[attribute.attrName] = attribute : delete this.attributes[attribute.attrName]) : (attribute.remove(this.domNode), delete this.attributes[attribute.attrName]);
    }
    build() {
      this.attributes = {};
      const blot = Registry.find(this.domNode);
      if (blot == null)
        return;
      const attributes = Attributor.keys(this.domNode), classes = ClassAttributor$1.keys(this.domNode), styles = StyleAttributor$1.keys(this.domNode);
      attributes.concat(classes).concat(styles).forEach((name) => {
        const attr = blot.scroll.query(name, Scope.ATTRIBUTE);
        attr instanceof Attributor && (this.attributes[attr.attrName] = attr);
      });
    }
    copy(target) {
      Object.keys(this.attributes).forEach((key) => {
        const value = this.attributes[key].value(this.domNode);
        target.format(key, value);
      });
    }
    move(target) {
      this.copy(target), Object.keys(this.attributes).forEach((key) => {
        this.attributes[key].remove(this.domNode);
      }), this.attributes = {};
    }
    values() {
      return Object.keys(this.attributes).reduce(
        (attributes, name) => (attributes[name] = this.attributes[name].value(this.domNode), attributes),
        {}
      );
    }
  }
  const AttributorStore$1 = AttributorStore, _ShadowBlot = class _ShadowBlot {
    constructor(scroll, domNode) {
      this.scroll = scroll, this.domNode = domNode, Registry.blots.set(domNode, this), this.prev = null, this.next = null;
    }
    static create(rawValue) {
      if (this.tagName == null)
        throw new ParchmentError("Blot definition missing tagName");
      let node, value;
      return Array.isArray(this.tagName) ? (typeof rawValue == "string" ? (value = rawValue.toUpperCase(), parseInt(value, 10).toString() === value && (value = parseInt(value, 10))) : typeof rawValue == "number" && (value = rawValue), typeof value == "number" ? node = document.createElement(this.tagName[value - 1]) : value && this.tagName.indexOf(value) > -1 ? node = document.createElement(value) : node = document.createElement(this.tagName[0])) : node = document.createElement(this.tagName), this.className && node.classList.add(this.className), node;
    }
    // Hack for accessing inherited static methods
    get statics() {
      return this.constructor;
    }
    attach() {
    }
    clone() {
      const domNode = this.domNode.cloneNode(false);
      return this.scroll.create(domNode);
    }
    detach() {
      this.parent != null && this.parent.removeChild(this), Registry.blots.delete(this.domNode);
    }
    deleteAt(index, length) {
      this.isolate(index, length).remove();
    }
    formatAt(index, length, name, value) {
      const blot = this.isolate(index, length);
      if (this.scroll.query(name, Scope.BLOT) != null && value)
        blot.wrap(name, value);
      else if (this.scroll.query(name, Scope.ATTRIBUTE) != null) {
        const parent = this.scroll.create(this.statics.scope);
        blot.wrap(parent), parent.format(name, value);
      }
    }
    insertAt(index, value, def) {
      const blot = def == null ? this.scroll.create("text", value) : this.scroll.create(value, def), ref = this.split(index);
      this.parent.insertBefore(blot, ref || void 0);
    }
    isolate(index, length) {
      const target = this.split(index);
      if (target == null)
        throw new Error("Attempt to isolate at end");
      return target.split(length), target;
    }
    length() {
      return 1;
    }
    offset(root = this.parent) {
      return this.parent == null || this === root ? 0 : this.parent.children.offset(this) + this.parent.offset(root);
    }
    optimize(_context) {
      this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer) && this.wrap(this.statics.requiredContainer.blotName);
    }
    remove() {
      this.domNode.parentNode != null && this.domNode.parentNode.removeChild(this.domNode), this.detach();
    }
    replaceWith(name, value) {
      const replacement = typeof name == "string" ? this.scroll.create(name, value) : name;
      return this.parent != null && (this.parent.insertBefore(replacement, this.next || void 0), this.remove()), replacement;
    }
    split(index, _force) {
      return index === 0 ? this : this.next;
    }
    update(_mutations, _context) {
    }
    wrap(name, value) {
      const wrapper = typeof name == "string" ? this.scroll.create(name, value) : name;
      if (this.parent != null && this.parent.insertBefore(wrapper, this.next || void 0), typeof wrapper.appendChild != "function")
        throw new ParchmentError(`Cannot wrap ${name}`);
      return wrapper.appendChild(this), wrapper;
    }
  };
  _ShadowBlot.blotName = "abstract";
  let ShadowBlot = _ShadowBlot;
  const _LeafBlot = class _LeafBlot extends ShadowBlot {
    /**
     * Returns the value represented by domNode if it is this Blot's type
     * No checking that domNode can represent this Blot type is required so
     * applications needing it should check externally before calling.
     */
    static value(_domNode) {
      return true;
    }
    /**
     * Given location represented by node and offset from DOM Selection Range,
     * return index to that location.
     */
    index(node, offset) {
      return this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY ? Math.min(offset, 1) : -1;
    }
    /**
     * Given index to location within blot, return node and offset representing
     * that location, consumable by DOM Selection Range
     */
    position(index, _inclusive) {
      let offset = Array.from(this.parent.domNode.childNodes).indexOf(this.domNode);
      return index > 0 && (offset += 1), [this.parent.domNode, offset];
    }
    /**
     * Return value represented by this blot
     * Should not change without interaction from API or
     * user change detectable by update()
     */
    value() {
      return {
        [this.statics.blotName]: this.statics.value(this.domNode) || true
      };
    }
  };
  _LeafBlot.scope = Scope.INLINE_BLOT;
  let LeafBlot = _LeafBlot;
  const LeafBlot$1 = LeafBlot;
  class LinkedList {
    constructor() {
      this.head = null, this.tail = null, this.length = 0;
    }
    append(...nodes) {
      if (this.insertBefore(nodes[0], null), nodes.length > 1) {
        const rest = nodes.slice(1);
        this.append(...rest);
      }
    }
    at(index) {
      const next = this.iterator();
      let cur = next();
      for (; cur && index > 0; )
        index -= 1, cur = next();
      return cur;
    }
    contains(node) {
      const next = this.iterator();
      let cur = next();
      for (; cur; ) {
        if (cur === node)
          return true;
        cur = next();
      }
      return false;
    }
    indexOf(node) {
      const next = this.iterator();
      let cur = next(), index = 0;
      for (; cur; ) {
        if (cur === node)
          return index;
        index += 1, cur = next();
      }
      return -1;
    }
    insertBefore(node, refNode) {
      node != null && (this.remove(node), node.next = refNode, refNode != null ? (node.prev = refNode.prev, refNode.prev != null && (refNode.prev.next = node), refNode.prev = node, refNode === this.head && (this.head = node)) : this.tail != null ? (this.tail.next = node, node.prev = this.tail, this.tail = node) : (node.prev = null, this.head = this.tail = node), this.length += 1);
    }
    offset(target) {
      let index = 0, cur = this.head;
      for (; cur != null; ) {
        if (cur === target)
          return index;
        index += cur.length(), cur = cur.next;
      }
      return -1;
    }
    remove(node) {
      this.contains(node) && (node.prev != null && (node.prev.next = node.next), node.next != null && (node.next.prev = node.prev), node === this.head && (this.head = node.next), node === this.tail && (this.tail = node.prev), this.length -= 1);
    }
    iterator(curNode = this.head) {
      return () => {
        const ret = curNode;
        return curNode != null && (curNode = curNode.next), ret;
      };
    }
    find(index, inclusive = false) {
      const next = this.iterator();
      let cur = next();
      for (; cur; ) {
        const length = cur.length();
        if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0))
          return [cur, index];
        index -= length, cur = next();
      }
      return [null, 0];
    }
    forEach(callback) {
      const next = this.iterator();
      let cur = next();
      for (; cur; )
        callback(cur), cur = next();
    }
    forEachAt(index, length, callback) {
      if (length <= 0)
        return;
      const [startNode, offset] = this.find(index);
      let curIndex = index - offset;
      const next = this.iterator(startNode);
      let cur = next();
      for (; cur && curIndex < index + length; ) {
        const curLength = cur.length();
        index > curIndex ? callback(
          cur,
          index - curIndex,
          Math.min(length, curIndex + curLength - index)
        ) : callback(cur, 0, Math.min(curLength, index + length - curIndex)), curIndex += curLength, cur = next();
      }
    }
    map(callback) {
      return this.reduce((memo, cur) => (memo.push(callback(cur)), memo), []);
    }
    reduce(callback, memo) {
      const next = this.iterator();
      let cur = next();
      for (; cur; )
        memo = callback(memo, cur), cur = next();
      return memo;
    }
  }
  function makeAttachedBlot(node, scroll) {
    const found = scroll.find(node);
    if (found)
      return found;
    try {
      return scroll.create(node);
    } catch {
      const blot = scroll.create(Scope.INLINE);
      return Array.from(node.childNodes).forEach((child) => {
        blot.domNode.appendChild(child);
      }), node.parentNode && node.parentNode.replaceChild(blot.domNode, node), blot.attach(), blot;
    }
  }
  const _ParentBlot = class _ParentBlot extends ShadowBlot {
    constructor(scroll, domNode) {
      super(scroll, domNode), this.uiNode = null, this.build();
    }
    appendChild(other) {
      this.insertBefore(other);
    }
    attach() {
      super.attach(), this.children.forEach((child) => {
        child.attach();
      });
    }
    attachUI(node) {
      this.uiNode != null && this.uiNode.remove(), this.uiNode = node, _ParentBlot.uiClass && this.uiNode.classList.add(_ParentBlot.uiClass), this.uiNode.setAttribute("contenteditable", "false"), this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);
    }
    /**
     * Called during construction, should fill its own children LinkedList.
     */
    build() {
      this.children = new LinkedList(), Array.from(this.domNode.childNodes).filter((node) => node !== this.uiNode).reverse().forEach((node) => {
        try {
          const child = makeAttachedBlot(node, this.scroll);
          this.insertBefore(child, this.children.head || void 0);
        } catch (err) {
          if (err instanceof ParchmentError)
            return;
          throw err;
        }
      });
    }
    deleteAt(index, length) {
      if (index === 0 && length === this.length())
        return this.remove();
      this.children.forEachAt(index, length, (child, offset, childLength) => {
        child.deleteAt(offset, childLength);
      });
    }
    descendant(criteria, index = 0) {
      const [child, offset] = this.children.find(index);
      return criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria ? [child, offset] : child instanceof _ParentBlot ? child.descendant(criteria, offset) : [null, -1];
    }
    descendants(criteria, index = 0, length = Number.MAX_VALUE) {
      let descendants = [], lengthLeft = length;
      return this.children.forEachAt(
        index,
        length,
        (child, childIndex, childLength) => {
          (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) && descendants.push(child), child instanceof _ParentBlot && (descendants = descendants.concat(
            child.descendants(criteria, childIndex, lengthLeft)
          )), lengthLeft -= childLength;
        }
      ), descendants;
    }
    detach() {
      this.children.forEach((child) => {
        child.detach();
      }), super.detach();
    }
    enforceAllowedChildren() {
      let done = false;
      this.children.forEach((child) => {
        done || this.statics.allowedChildren.some(
          (def) => child instanceof def
        ) || (child.statics.scope === Scope.BLOCK_BLOT ? (child.next != null && this.splitAfter(child), child.prev != null && this.splitAfter(child.prev), child.parent.unwrap(), done = true) : child instanceof _ParentBlot ? child.unwrap() : child.remove());
      });
    }
    formatAt(index, length, name, value) {
      this.children.forEachAt(index, length, (child, offset, childLength) => {
        child.formatAt(offset, childLength, name, value);
      });
    }
    insertAt(index, value, def) {
      const [child, offset] = this.children.find(index);
      if (child)
        child.insertAt(offset, value, def);
      else {
        const blot = def == null ? this.scroll.create("text", value) : this.scroll.create(value, def);
        this.appendChild(blot);
      }
    }
    insertBefore(childBlot, refBlot) {
      childBlot.parent != null && childBlot.parent.children.remove(childBlot);
      let refDomNode = null;
      this.children.insertBefore(childBlot, refBlot || null), childBlot.parent = this, refBlot != null && (refDomNode = refBlot.domNode), (this.domNode.parentNode !== childBlot.domNode || this.domNode.nextSibling !== refDomNode) && this.domNode.insertBefore(childBlot.domNode, refDomNode), childBlot.attach();
    }
    length() {
      return this.children.reduce((memo, child) => memo + child.length(), 0);
    }
    moveChildren(targetParent, refNode) {
      this.children.forEach((child) => {
        targetParent.insertBefore(child, refNode);
      });
    }
    optimize(context) {
      if (super.optimize(context), this.enforceAllowedChildren(), this.uiNode != null && this.uiNode !== this.domNode.firstChild && this.domNode.insertBefore(this.uiNode, this.domNode.firstChild), this.children.length === 0)
        if (this.statics.defaultChild != null) {
          const child = this.scroll.create(this.statics.defaultChild.blotName);
          this.appendChild(child);
        } else
          this.remove();
    }
    path(index, inclusive = false) {
      const [child, offset] = this.children.find(index, inclusive), position = [[this, index]];
      return child instanceof _ParentBlot ? position.concat(child.path(offset, inclusive)) : (child != null && position.push([child, offset]), position);
    }
    removeChild(child) {
      this.children.remove(child);
    }
    replaceWith(name, value) {
      const replacement = typeof name == "string" ? this.scroll.create(name, value) : name;
      return replacement instanceof _ParentBlot && this.moveChildren(replacement), super.replaceWith(replacement);
    }
    split(index, force = false) {
      if (!force) {
        if (index === 0)
          return this;
        if (index === this.length())
          return this.next;
      }
      const after = this.clone();
      return this.parent && this.parent.insertBefore(after, this.next || void 0), this.children.forEachAt(index, this.length(), (child, offset, _length) => {
        const split = child.split(offset, force);
        split != null && after.appendChild(split);
      }), after;
    }
    splitAfter(child) {
      const after = this.clone();
      for (; child.next != null; )
        after.appendChild(child.next);
      return this.parent && this.parent.insertBefore(after, this.next || void 0), after;
    }
    unwrap() {
      this.parent && this.moveChildren(this.parent, this.next || void 0), this.remove();
    }
    update(mutations, _context) {
      const addedNodes = [], removedNodes = [];
      mutations.forEach((mutation) => {
        mutation.target === this.domNode && mutation.type === "childList" && (addedNodes.push(...mutation.addedNodes), removedNodes.push(...mutation.removedNodes));
      }), removedNodes.forEach((node) => {
        if (node.parentNode != null && // @ts-expect-error Fix me later
        node.tagName !== "IFRAME" && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY)
          return;
        const blot = this.scroll.find(node);
        blot != null && (blot.domNode.parentNode == null || blot.domNode.parentNode === this.domNode) && blot.detach();
      }), addedNodes.filter((node) => node.parentNode === this.domNode && node !== this.uiNode).sort((a, b) => a === b ? 0 : a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING ? 1 : -1).forEach((node) => {
        let refBlot = null;
        node.nextSibling != null && (refBlot = this.scroll.find(node.nextSibling));
        const blot = makeAttachedBlot(node, this.scroll);
        (blot.next !== refBlot || blot.next == null) && (blot.parent != null && blot.parent.removeChild(this), this.insertBefore(blot, refBlot || void 0));
      }), this.enforceAllowedChildren();
    }
  };
  _ParentBlot.uiClass = "";
  let ParentBlot = _ParentBlot;
  const ParentBlot$1 = ParentBlot;
  function isEqual$1(obj1, obj2) {
    if (Object.keys(obj1).length !== Object.keys(obj2).length)
      return false;
    for (const prop in obj1)
      if (obj1[prop] !== obj2[prop])
        return false;
    return true;
  }
  const _InlineBlot = class _InlineBlot extends ParentBlot$1 {
    static create(value) {
      return super.create(value);
    }
    static formats(domNode, scroll) {
      const match2 = scroll.query(_InlineBlot.blotName);
      if (!(match2 != null && domNode.tagName === match2.tagName)) {
        if (typeof this.tagName == "string")
          return true;
        if (Array.isArray(this.tagName))
          return domNode.tagName.toLowerCase();
      }
    }
    constructor(scroll, domNode) {
      super(scroll, domNode), this.attributes = new AttributorStore$1(this.domNode);
    }
    format(name, value) {
      if (name === this.statics.blotName && !value)
        this.children.forEach((child) => {
          child instanceof _InlineBlot || (child = child.wrap(_InlineBlot.blotName, true)), this.attributes.copy(child);
        }), this.unwrap();
      else {
        const format = this.scroll.query(name, Scope.INLINE);
        if (format == null)
          return;
        format instanceof Attributor ? this.attributes.attribute(format, value) : value && (name !== this.statics.blotName || this.formats()[name] !== value) && this.replaceWith(name, value);
      }
    }
    formats() {
      const formats = this.attributes.values(), format = this.statics.formats(this.domNode, this.scroll);
      return format != null && (formats[this.statics.blotName] = format), formats;
    }
    formatAt(index, length, name, value) {
      this.formats()[name] != null || this.scroll.query(name, Scope.ATTRIBUTE) ? this.isolate(index, length).format(name, value) : super.formatAt(index, length, name, value);
    }
    optimize(context) {
      super.optimize(context);
      const formats = this.formats();
      if (Object.keys(formats).length === 0)
        return this.unwrap();
      const next = this.next;
      next instanceof _InlineBlot && next.prev === this && isEqual$1(formats, next.formats()) && (next.moveChildren(this), next.remove());
    }
    replaceWith(name, value) {
      const replacement = super.replaceWith(name, value);
      return this.attributes.copy(replacement), replacement;
    }
    update(mutations, context) {
      super.update(mutations, context), mutations.some(
        (mutation) => mutation.target === this.domNode && mutation.type === "attributes"
      ) && this.attributes.build();
    }
    wrap(name, value) {
      const wrapper = super.wrap(name, value);
      return wrapper instanceof _InlineBlot && this.attributes.move(wrapper), wrapper;
    }
  };
  _InlineBlot.allowedChildren = [_InlineBlot, LeafBlot$1], _InlineBlot.blotName = "inline", _InlineBlot.scope = Scope.INLINE_BLOT, _InlineBlot.tagName = "SPAN";
  let InlineBlot = _InlineBlot;
  const InlineBlot$1 = InlineBlot, _BlockBlot = class _BlockBlot extends ParentBlot$1 {
    static create(value) {
      return super.create(value);
    }
    static formats(domNode, scroll) {
      const match2 = scroll.query(_BlockBlot.blotName);
      if (!(match2 != null && domNode.tagName === match2.tagName)) {
        if (typeof this.tagName == "string")
          return true;
        if (Array.isArray(this.tagName))
          return domNode.tagName.toLowerCase();
      }
    }
    constructor(scroll, domNode) {
      super(scroll, domNode), this.attributes = new AttributorStore$1(this.domNode);
    }
    format(name, value) {
      const format = this.scroll.query(name, Scope.BLOCK);
      format != null && (format instanceof Attributor ? this.attributes.attribute(format, value) : name === this.statics.blotName && !value ? this.replaceWith(_BlockBlot.blotName) : value && (name !== this.statics.blotName || this.formats()[name] !== value) && this.replaceWith(name, value));
    }
    formats() {
      const formats = this.attributes.values(), format = this.statics.formats(this.domNode, this.scroll);
      return format != null && (formats[this.statics.blotName] = format), formats;
    }
    formatAt(index, length, name, value) {
      this.scroll.query(name, Scope.BLOCK) != null ? this.format(name, value) : super.formatAt(index, length, name, value);
    }
    insertAt(index, value, def) {
      if (def == null || this.scroll.query(value, Scope.INLINE) != null)
        super.insertAt(index, value, def);
      else {
        const after = this.split(index);
        if (after != null) {
          const blot = this.scroll.create(value, def);
          after.parent.insertBefore(blot, after);
        } else
          throw new Error("Attempt to insertAt after block boundaries");
      }
    }
    replaceWith(name, value) {
      const replacement = super.replaceWith(name, value);
      return this.attributes.copy(replacement), replacement;
    }
    update(mutations, context) {
      super.update(mutations, context), mutations.some(
        (mutation) => mutation.target === this.domNode && mutation.type === "attributes"
      ) && this.attributes.build();
    }
  };
  _BlockBlot.blotName = "block", _BlockBlot.scope = Scope.BLOCK_BLOT, _BlockBlot.tagName = "P", _BlockBlot.allowedChildren = [
    InlineBlot$1,
    _BlockBlot,
    LeafBlot$1
  ];
  let BlockBlot = _BlockBlot;
  const BlockBlot$1 = BlockBlot, _ContainerBlot = class _ContainerBlot extends ParentBlot$1 {
    checkMerge() {
      return this.next !== null && this.next.statics.blotName === this.statics.blotName;
    }
    deleteAt(index, length) {
      super.deleteAt(index, length), this.enforceAllowedChildren();
    }
    formatAt(index, length, name, value) {
      super.formatAt(index, length, name, value), this.enforceAllowedChildren();
    }
    insertAt(index, value, def) {
      super.insertAt(index, value, def), this.enforceAllowedChildren();
    }
    optimize(context) {
      super.optimize(context), this.children.length > 0 && this.next != null && this.checkMerge() && (this.next.moveChildren(this), this.next.remove());
    }
  };
  _ContainerBlot.blotName = "container", _ContainerBlot.scope = Scope.BLOCK_BLOT;
  let ContainerBlot = _ContainerBlot;
  const ContainerBlot$1 = ContainerBlot;
  class EmbedBlot extends LeafBlot$1 {
    static formats(_domNode, _scroll) {
    }
    format(name, value) {
      super.formatAt(0, this.length(), name, value);
    }
    formatAt(index, length, name, value) {
      index === 0 && length === this.length() ? this.format(name, value) : super.formatAt(index, length, name, value);
    }
    formats() {
      return this.statics.formats(this.domNode, this.scroll);
    }
  }
  const EmbedBlot$1 = EmbedBlot, OBSERVER_CONFIG = {
    attributes: true,
    characterData: true,
    characterDataOldValue: true,
    childList: true,
    subtree: true
  }, MAX_OPTIMIZE_ITERATIONS = 100, _ScrollBlot = class _ScrollBlot extends ParentBlot$1 {
    constructor(registry, node) {
      super(null, node), this.registry = registry, this.scroll = this, this.build(), this.observer = new MutationObserver((mutations) => {
        this.update(mutations);
      }), this.observer.observe(this.domNode, OBSERVER_CONFIG), this.attach();
    }
    create(input, value) {
      return this.registry.create(this, input, value);
    }
    find(node, bubble = false) {
      const blot = this.registry.find(node, bubble);
      return blot ? blot.scroll === this ? blot : bubble ? this.find(blot.scroll.domNode.parentNode, true) : null : null;
    }
    query(query, scope = Scope.ANY) {
      return this.registry.query(query, scope);
    }
    register(...definitions) {
      return this.registry.register(...definitions);
    }
    build() {
      this.scroll != null && super.build();
    }
    detach() {
      super.detach(), this.observer.disconnect();
    }
    deleteAt(index, length) {
      this.update(), index === 0 && length === this.length() ? this.children.forEach((child) => {
        child.remove();
      }) : super.deleteAt(index, length);
    }
    formatAt(index, length, name, value) {
      this.update(), super.formatAt(index, length, name, value);
    }
    insertAt(index, value, def) {
      this.update(), super.insertAt(index, value, def);
    }
    optimize(mutations = [], context = {}) {
      super.optimize(context);
      const mutationsMap = context.mutationsMap || /* @__PURE__ */ new WeakMap();
      let records = Array.from(this.observer.takeRecords());
      for (; records.length > 0; )
        mutations.push(records.pop());
      const mark = (blot, markParent = true) => {
        blot == null || blot === this || blot.domNode.parentNode != null && (mutationsMap.has(blot.domNode) || mutationsMap.set(blot.domNode, []), markParent && mark(blot.parent));
      }, optimize = (blot) => {
        mutationsMap.has(blot.domNode) && (blot instanceof ParentBlot$1 && blot.children.forEach(optimize), mutationsMap.delete(blot.domNode), blot.optimize(context));
      };
      let remaining = mutations;
      for (let i = 0; remaining.length > 0; i += 1) {
        if (i >= MAX_OPTIMIZE_ITERATIONS)
          throw new Error("[Parchment] Maximum optimize iterations reached");
        for (remaining.forEach((mutation) => {
          const blot = this.find(mutation.target, true);
          blot != null && (blot.domNode === mutation.target && (mutation.type === "childList" ? (mark(this.find(mutation.previousSibling, false)), Array.from(mutation.addedNodes).forEach((node) => {
            const child = this.find(node, false);
            mark(child, false), child instanceof ParentBlot$1 && child.children.forEach((grandChild) => {
              mark(grandChild, false);
            });
          })) : mutation.type === "attributes" && mark(blot.prev)), mark(blot));
        }), this.children.forEach(optimize), remaining = Array.from(this.observer.takeRecords()), records = remaining.slice(); records.length > 0; )
          mutations.push(records.pop());
      }
    }
    update(mutations, context = {}) {
      mutations = mutations || this.observer.takeRecords();
      const mutationsMap = /* @__PURE__ */ new WeakMap();
      mutations.map((mutation) => {
        const blot = this.find(mutation.target, true);
        return blot == null ? null : mutationsMap.has(blot.domNode) ? (mutationsMap.get(blot.domNode).push(mutation), null) : (mutationsMap.set(blot.domNode, [mutation]), blot);
      }).forEach((blot) => {
        blot != null && blot !== this && mutationsMap.has(blot.domNode) && blot.update(mutationsMap.get(blot.domNode) || [], context);
      }), context.mutationsMap = mutationsMap, mutationsMap.has(this.domNode) && super.update(mutationsMap.get(this.domNode), context), this.optimize(mutations, context);
    }
  };
  _ScrollBlot.blotName = "scroll", _ScrollBlot.defaultChild = BlockBlot$1, _ScrollBlot.allowedChildren = [BlockBlot$1, ContainerBlot$1], _ScrollBlot.scope = Scope.BLOCK_BLOT, _ScrollBlot.tagName = "DIV";
  let ScrollBlot = _ScrollBlot;
  const ScrollBlot$1 = ScrollBlot, _TextBlot = class _TextBlot extends LeafBlot$1 {
    static create(value) {
      return document.createTextNode(value);
    }
    static value(domNode) {
      return domNode.data;
    }
    constructor(scroll, node) {
      super(scroll, node), this.text = this.statics.value(this.domNode);
    }
    deleteAt(index, length) {
      this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
    }
    index(node, offset) {
      return this.domNode === node ? offset : -1;
    }
    insertAt(index, value, def) {
      def == null ? (this.text = this.text.slice(0, index) + value + this.text.slice(index), this.domNode.data = this.text) : super.insertAt(index, value, def);
    }
    length() {
      return this.text.length;
    }
    optimize(context) {
      super.optimize(context), this.text = this.statics.value(this.domNode), this.text.length === 0 ? this.remove() : this.next instanceof _TextBlot && this.next.prev === this && (this.insertAt(this.length(), this.next.value()), this.next.remove());
    }
    position(index, _inclusive = false) {
      return [this.domNode, index];
    }
    split(index, force = false) {
      if (!force) {
        if (index === 0)
          return this;
        if (index === this.length())
          return this.next;
      }
      const after = this.scroll.create(this.domNode.splitText(index));
      return this.parent.insertBefore(after, this.next || void 0), this.text = this.statics.value(this.domNode), after;
    }
    update(mutations, _context) {
      mutations.some((mutation) => mutation.type === "characterData" && mutation.target === this.domNode) && (this.text = this.statics.value(this.domNode));
    }
    value() {
      return this.text;
    }
  };
  _TextBlot.blotName = "text", _TextBlot.scope = Scope.INLINE_BLOT;
  let TextBlot = _TextBlot;
  const TextBlot$1 = TextBlot;

  var Parchment = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Attributor: Attributor,
    AttributorStore: AttributorStore$1,
    BlockBlot: BlockBlot$1,
    ClassAttributor: ClassAttributor$1,
    ContainerBlot: ContainerBlot$1,
    EmbedBlot: EmbedBlot$1,
    InlineBlot: InlineBlot$1,
    LeafBlot: LeafBlot$1,
    ParentBlot: ParentBlot$1,
    Registry: Registry,
    Scope: Scope,
    ScrollBlot: ScrollBlot$1,
    StyleAttributor: StyleAttributor$1,
    TextBlot: TextBlot$1
  });

  var Delta$1 = {exports: {}};

  /**
   * This library modifies the diff-patch-match library by Neil Fraser
   * by removing the patch and match functionality and certain advanced
   * options in the diff function. The original license is as follows:
   *
   * ===
   *
   * Diff Match and Patch
   *
   * Copyright 2006 Google Inc.
   * http://code.google.com/p/google-diff-match-patch/
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * The data structure representing a diff is an array of tuples:
   * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
   * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
   */
  var DIFF_DELETE = -1;
  var DIFF_INSERT = 1;
  var DIFF_EQUAL = 0;

  /**
   * Find the differences between two texts.  Simplifies the problem by stripping
   * any common prefix or suffix off the texts before diffing.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info
   * @param {boolean} [cleanup] Apply semantic cleanup before returning.
   * @return {Array} Array of diff tuples.
   */
  function diff_main(text1, text2, cursor_pos, cleanup, _fix_unicode) {
    // Check for equality
    if (text1 === text2) {
      if (text1) {
        return [[DIFF_EQUAL, text1]];
      }
      return [];
    }

    if (cursor_pos != null) {
      var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);
      if (editdiff) {
        return editdiff;
      }
    }

    // Trim off common prefix (speedup).
    var commonlength = diff_commonPrefix(text1, text2);
    var commonprefix = text1.substring(0, commonlength);
    text1 = text1.substring(commonlength);
    text2 = text2.substring(commonlength);

    // Trim off common suffix (speedup).
    commonlength = diff_commonSuffix(text1, text2);
    var commonsuffix = text1.substring(text1.length - commonlength);
    text1 = text1.substring(0, text1.length - commonlength);
    text2 = text2.substring(0, text2.length - commonlength);

    // Compute the diff on the middle block.
    var diffs = diff_compute_(text1, text2);

    // Restore the prefix and suffix.
    if (commonprefix) {
      diffs.unshift([DIFF_EQUAL, commonprefix]);
    }
    if (commonsuffix) {
      diffs.push([DIFF_EQUAL, commonsuffix]);
    }
    diff_cleanupMerge(diffs, _fix_unicode);
    if (cleanup) {
      diff_cleanupSemantic(diffs);
    }
    return diffs;
  }

  /**
   * Find the differences between two texts.  Assumes that the texts do not
   * have any common prefix or suffix.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @return {Array} Array of diff tuples.
   */
  function diff_compute_(text1, text2) {
    var diffs;

    if (!text1) {
      // Just add some text (speedup).
      return [[DIFF_INSERT, text2]];
    }

    if (!text2) {
      // Just delete some text (speedup).
      return [[DIFF_DELETE, text1]];
    }

    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    var i = longtext.indexOf(shorttext);
    if (i !== -1) {
      // Shorter text is inside the longer text (speedup).
      diffs = [
        [DIFF_INSERT, longtext.substring(0, i)],
        [DIFF_EQUAL, shorttext],
        [DIFF_INSERT, longtext.substring(i + shorttext.length)],
      ];
      // Swap insertions for deletions if diff is reversed.
      if (text1.length > text2.length) {
        diffs[0][0] = diffs[2][0] = DIFF_DELETE;
      }
      return diffs;
    }

    if (shorttext.length === 1) {
      // Single character string.
      // After the previous speedup, the character can't be an equality.
      return [
        [DIFF_DELETE, text1],
        [DIFF_INSERT, text2],
      ];
    }

    // Check to see if the problem can be split in two.
    var hm = diff_halfMatch_(text1, text2);
    if (hm) {
      // A half-match was found, sort out the return data.
      var text1_a = hm[0];
      var text1_b = hm[1];
      var text2_a = hm[2];
      var text2_b = hm[3];
      var mid_common = hm[4];
      // Send both pairs off for separate processing.
      var diffs_a = diff_main(text1_a, text2_a);
      var diffs_b = diff_main(text1_b, text2_b);
      // Merge the results.
      return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
    }

    return diff_bisect_(text1, text2);
  }

  /**
   * Find the 'middle snake' of a diff, split the problem in two
   * and return the recursively constructed diff.
   * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @return {Array} Array of diff tuples.
   * @private
   */
  function diff_bisect_(text1, text2) {
    // Cache the text lengths to prevent multiple calls.
    var text1_length = text1.length;
    var text2_length = text2.length;
    var max_d = Math.ceil((text1_length + text2_length) / 2);
    var v_offset = max_d;
    var v_length = 2 * max_d;
    var v1 = new Array(v_length);
    var v2 = new Array(v_length);
    // Setting all elements to -1 is faster in Chrome & Firefox than mixing
    // integers and undefined.
    for (var x = 0; x < v_length; x++) {
      v1[x] = -1;
      v2[x] = -1;
    }
    v1[v_offset + 1] = 0;
    v2[v_offset + 1] = 0;
    var delta = text1_length - text2_length;
    // If the total number of characters is odd, then the front path will collide
    // with the reverse path.
    var front = delta % 2 !== 0;
    // Offsets for start and end of k loop.
    // Prevents mapping of space beyond the grid.
    var k1start = 0;
    var k1end = 0;
    var k2start = 0;
    var k2end = 0;
    for (var d = 0; d < max_d; d++) {
      // Walk the front path one step.
      for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
        var k1_offset = v_offset + k1;
        var x1;
        if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
          x1 = v1[k1_offset + 1];
        } else {
          x1 = v1[k1_offset - 1] + 1;
        }
        var y1 = x1 - k1;
        while (
          x1 < text1_length &&
          y1 < text2_length &&
          text1.charAt(x1) === text2.charAt(y1)
        ) {
          x1++;
          y1++;
        }
        v1[k1_offset] = x1;
        if (x1 > text1_length) {
          // Ran off the right of the graph.
          k1end += 2;
        } else if (y1 > text2_length) {
          // Ran off the bottom of the graph.
          k1start += 2;
        } else if (front) {
          var k2_offset = v_offset + delta - k1;
          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {
            // Mirror x2 onto top-left coordinate system.
            var x2 = text1_length - v2[k2_offset];
            if (x1 >= x2) {
              // Overlap detected.
              return diff_bisectSplit_(text1, text2, x1, y1);
            }
          }
        }
      }

      // Walk the reverse path one step.
      for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
        var k2_offset = v_offset + k2;
        var x2;
        if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
          x2 = v2[k2_offset + 1];
        } else {
          x2 = v2[k2_offset - 1] + 1;
        }
        var y2 = x2 - k2;
        while (
          x2 < text1_length &&
          y2 < text2_length &&
          text1.charAt(text1_length - x2 - 1) ===
            text2.charAt(text2_length - y2 - 1)
        ) {
          x2++;
          y2++;
        }
        v2[k2_offset] = x2;
        if (x2 > text1_length) {
          // Ran off the left of the graph.
          k2end += 2;
        } else if (y2 > text2_length) {
          // Ran off the top of the graph.
          k2start += 2;
        } else if (!front) {
          var k1_offset = v_offset + delta - k2;
          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {
            var x1 = v1[k1_offset];
            var y1 = v_offset + x1 - k1_offset;
            // Mirror x2 onto top-left coordinate system.
            x2 = text1_length - x2;
            if (x1 >= x2) {
              // Overlap detected.
              return diff_bisectSplit_(text1, text2, x1, y1);
            }
          }
        }
      }
    }
    // Diff took too long and hit the deadline or
    // number of diffs equals number of characters, no commonality at all.
    return [
      [DIFF_DELETE, text1],
      [DIFF_INSERT, text2],
    ];
  }

  /**
   * Given the location of the 'middle snake', split the diff in two parts
   * and recurse.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @param {number} x Index of split point in text1.
   * @param {number} y Index of split point in text2.
   * @return {Array} Array of diff tuples.
   */
  function diff_bisectSplit_(text1, text2, x, y) {
    var text1a = text1.substring(0, x);
    var text2a = text2.substring(0, y);
    var text1b = text1.substring(x);
    var text2b = text2.substring(y);

    // Compute both diffs serially.
    var diffs = diff_main(text1a, text2a);
    var diffsb = diff_main(text1b, text2b);

    return diffs.concat(diffsb);
  }

  /**
   * Determine the common prefix of two strings.
   * @param {string} text1 First string.
   * @param {string} text2 Second string.
   * @return {number} The number of characters common to the start of each
   *     string.
   */
  function diff_commonPrefix(text1, text2) {
    // Quick check for common null cases.
    if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {
      return 0;
    }
    // Binary search.
    // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerstart = 0;
    while (pointermin < pointermid) {
      if (
        text1.substring(pointerstart, pointermid) ==
        text2.substring(pointerstart, pointermid)
      ) {
        pointermin = pointermid;
        pointerstart = pointermin;
      } else {
        pointermax = pointermid;
      }
      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }

    if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {
      pointermid--;
    }

    return pointermid;
  }

  /**
   * Determine if the suffix of one string is the prefix of another.
   * @param {string} text1 First string.
   * @param {string} text2 Second string.
   * @return {number} The number of characters common to the end of the first
   *     string and the start of the second string.
   * @private
   */
  function diff_commonOverlap_(text1, text2) {
    // Cache the text lengths to prevent multiple calls.
    var text1_length = text1.length;
    var text2_length = text2.length;
    // Eliminate the null case.
    if (text1_length == 0 || text2_length == 0) {
      return 0;
    }
    // Truncate the longer string.
    if (text1_length > text2_length) {
      text1 = text1.substring(text1_length - text2_length);
    } else if (text1_length < text2_length) {
      text2 = text2.substring(0, text1_length);
    }
    var text_length = Math.min(text1_length, text2_length);
    // Quick check for the worst case.
    if (text1 == text2) {
      return text_length;
    }

    // Start by looking for a single character match
    // and increase length until no match is found.
    // Performance analysis: http://neil.fraser.name/news/2010/11/04/
    var best = 0;
    var length = 1;
    while (true) {
      var pattern = text1.substring(text_length - length);
      var found = text2.indexOf(pattern);
      if (found == -1) {
        return best;
      }
      length += found;
      if (
        found == 0 ||
        text1.substring(text_length - length) == text2.substring(0, length)
      ) {
        best = length;
        length++;
      }
    }
  }

  /**
   * Determine the common suffix of two strings.
   * @param {string} text1 First string.
   * @param {string} text2 Second string.
   * @return {number} The number of characters common to the end of each string.
   */
  function diff_commonSuffix(text1, text2) {
    // Quick check for common null cases.
    if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {
      return 0;
    }
    // Binary search.
    // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerend = 0;
    while (pointermin < pointermid) {
      if (
        text1.substring(text1.length - pointermid, text1.length - pointerend) ==
        text2.substring(text2.length - pointermid, text2.length - pointerend)
      ) {
        pointermin = pointermid;
        pointerend = pointermin;
      } else {
        pointermax = pointermid;
      }
      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }

    if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {
      pointermid--;
    }

    return pointermid;
  }

  /**
   * Do the two texts share a substring which is at least half the length of the
   * longer text?
   * This speedup can produce non-minimal diffs.
   * @param {string} text1 First string.
   * @param {string} text2 Second string.
   * @return {Array.<string>} Five element Array, containing the prefix of
   *     text1, the suffix of text1, the prefix of text2, the suffix of
   *     text2 and the common middle.  Or null if there was no match.
   */
  function diff_halfMatch_(text1, text2) {
    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
      return null; // Pointless.
    }

    /**
     * Does a substring of shorttext exist within longtext such that the substring
     * is at least half the length of longtext?
     * Closure, but does not reference any external variables.
     * @param {string} longtext Longer string.
     * @param {string} shorttext Shorter string.
     * @param {number} i Start index of quarter length substring within longtext.
     * @return {Array.<string>} Five element Array, containing the prefix of
     *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
     *     of shorttext and the common middle.  Or null if there was no match.
     * @private
     */
    function diff_halfMatchI_(longtext, shorttext, i) {
      // Start with a 1/4 length substring at position i as a seed.
      var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
      var j = -1;
      var best_common = "";
      var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
      while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {
        var prefixLength = diff_commonPrefix(
          longtext.substring(i),
          shorttext.substring(j)
        );
        var suffixLength = diff_commonSuffix(
          longtext.substring(0, i),
          shorttext.substring(0, j)
        );
        if (best_common.length < suffixLength + prefixLength) {
          best_common =
            shorttext.substring(j - suffixLength, j) +
            shorttext.substring(j, j + prefixLength);
          best_longtext_a = longtext.substring(0, i - suffixLength);
          best_longtext_b = longtext.substring(i + prefixLength);
          best_shorttext_a = shorttext.substring(0, j - suffixLength);
          best_shorttext_b = shorttext.substring(j + prefixLength);
        }
      }
      if (best_common.length * 2 >= longtext.length) {
        return [
          best_longtext_a,
          best_longtext_b,
          best_shorttext_a,
          best_shorttext_b,
          best_common,
        ];
      } else {
        return null;
      }
    }

    // First check if the second quarter is the seed for a half-match.
    var hm1 = diff_halfMatchI_(
      longtext,
      shorttext,
      Math.ceil(longtext.length / 4)
    );
    // Check again based on the third quarter.
    var hm2 = diff_halfMatchI_(
      longtext,
      shorttext,
      Math.ceil(longtext.length / 2)
    );
    var hm;
    if (!hm1 && !hm2) {
      return null;
    } else if (!hm2) {
      hm = hm1;
    } else if (!hm1) {
      hm = hm2;
    } else {
      // Both matched.  Select the longest.
      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
    }

    // A half-match was found, sort out the return data.
    var text1_a, text1_b, text2_a, text2_b;
    if (text1.length > text2.length) {
      text1_a = hm[0];
      text1_b = hm[1];
      text2_a = hm[2];
      text2_b = hm[3];
    } else {
      text2_a = hm[0];
      text2_b = hm[1];
      text1_a = hm[2];
      text1_b = hm[3];
    }
    var mid_common = hm[4];
    return [text1_a, text1_b, text2_a, text2_b, mid_common];
  }

  /**
   * Reduce the number of edits by eliminating semantically trivial equalities.
   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
   */
  function diff_cleanupSemantic(diffs) {
    var changes = false;
    var equalities = []; // Stack of indices where equalities are found.
    var equalitiesLength = 0; // Keeping our own length var is faster in JS.
    /** @type {?string} */
    var lastequality = null;
    // Always equal to diffs[equalities[equalitiesLength - 1]][1]
    var pointer = 0; // Index of current position.
    // Number of characters that changed prior to the equality.
    var length_insertions1 = 0;
    var length_deletions1 = 0;
    // Number of characters that changed after the equality.
    var length_insertions2 = 0;
    var length_deletions2 = 0;
    while (pointer < diffs.length) {
      if (diffs[pointer][0] == DIFF_EQUAL) {
        // Equality found.
        equalities[equalitiesLength++] = pointer;
        length_insertions1 = length_insertions2;
        length_deletions1 = length_deletions2;
        length_insertions2 = 0;
        length_deletions2 = 0;
        lastequality = diffs[pointer][1];
      } else {
        // An insertion or deletion.
        if (diffs[pointer][0] == DIFF_INSERT) {
          length_insertions2 += diffs[pointer][1].length;
        } else {
          length_deletions2 += diffs[pointer][1].length;
        }
        // Eliminate an equality that is smaller or equal to the edits on both
        // sides of it.
        if (
          lastequality &&
          lastequality.length <=
            Math.max(length_insertions1, length_deletions1) &&
          lastequality.length <= Math.max(length_insertions2, length_deletions2)
        ) {
          // Duplicate record.
          diffs.splice(equalities[equalitiesLength - 1], 0, [
            DIFF_DELETE,
            lastequality,
          ]);
          // Change second copy to insert.
          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
          // Throw away the equality we just deleted.
          equalitiesLength--;
          // Throw away the previous equality (it needs to be reevaluated).
          equalitiesLength--;
          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
          length_insertions1 = 0; // Reset the counters.
          length_deletions1 = 0;
          length_insertions2 = 0;
          length_deletions2 = 0;
          lastequality = null;
          changes = true;
        }
      }
      pointer++;
    }

    // Normalize the diff.
    if (changes) {
      diff_cleanupMerge(diffs);
    }
    diff_cleanupSemanticLossless(diffs);

    // Find any overlaps between deletions and insertions.
    // e.g: <del>abcxxx</del><ins>xxxdef</ins>
    //   -> <del>abc</del>xxx<ins>def</ins>
    // e.g: <del>xxxabc</del><ins>defxxx</ins>
    //   -> <ins>def</ins>xxx<del>abc</del>
    // Only extract an overlap if it is as big as the edit ahead or behind it.
    pointer = 1;
    while (pointer < diffs.length) {
      if (
        diffs[pointer - 1][0] == DIFF_DELETE &&
        diffs[pointer][0] == DIFF_INSERT
      ) {
        var deletion = diffs[pointer - 1][1];
        var insertion = diffs[pointer][1];
        var overlap_length1 = diff_commonOverlap_(deletion, insertion);
        var overlap_length2 = diff_commonOverlap_(insertion, deletion);
        if (overlap_length1 >= overlap_length2) {
          if (
            overlap_length1 >= deletion.length / 2 ||
            overlap_length1 >= insertion.length / 2
          ) {
            // Overlap found.  Insert an equality and trim the surrounding edits.
            diffs.splice(pointer, 0, [
              DIFF_EQUAL,
              insertion.substring(0, overlap_length1),
            ]);
            diffs[pointer - 1][1] = deletion.substring(
              0,
              deletion.length - overlap_length1
            );
            diffs[pointer + 1][1] = insertion.substring(overlap_length1);
            pointer++;
          }
        } else {
          if (
            overlap_length2 >= deletion.length / 2 ||
            overlap_length2 >= insertion.length / 2
          ) {
            // Reverse overlap found.
            // Insert an equality and swap and trim the surrounding edits.
            diffs.splice(pointer, 0, [
              DIFF_EQUAL,
              deletion.substring(0, overlap_length2),
            ]);
            diffs[pointer - 1][0] = DIFF_INSERT;
            diffs[pointer - 1][1] = insertion.substring(
              0,
              insertion.length - overlap_length2
            );
            diffs[pointer + 1][0] = DIFF_DELETE;
            diffs[pointer + 1][1] = deletion.substring(overlap_length2);
            pointer++;
          }
        }
        pointer++;
      }
      pointer++;
    }
  }

  var nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
  var whitespaceRegex_ = /\s/;
  var linebreakRegex_ = /[\r\n]/;
  var blanklineEndRegex_ = /\n\r?\n$/;
  var blanklineStartRegex_ = /^\r?\n\r?\n/;

  /**
   * Look for single edits surrounded on both sides by equalities
   * which can be shifted sideways to align the edit to a word boundary.
   * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
   */
  function diff_cleanupSemanticLossless(diffs) {
    /**
     * Given two strings, compute a score representing whether the internal
     * boundary falls on logical boundaries.
     * Scores range from 6 (best) to 0 (worst).
     * Closure, but does not reference any external variables.
     * @param {string} one First string.
     * @param {string} two Second string.
     * @return {number} The score.
     * @private
     */
    function diff_cleanupSemanticScore_(one, two) {
      if (!one || !two) {
        // Edges are the best.
        return 6;
      }

      // Each port of this function behaves slightly differently due to
      // subtle differences in each language's definition of things like
      // 'whitespace'.  Since this function's purpose is largely cosmetic,
      // the choice has been made to use each language's native features
      // rather than force total conformity.
      var char1 = one.charAt(one.length - 1);
      var char2 = two.charAt(0);
      var nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex_);
      var nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex_);
      var whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex_);
      var whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex_);
      var lineBreak1 = whitespace1 && char1.match(linebreakRegex_);
      var lineBreak2 = whitespace2 && char2.match(linebreakRegex_);
      var blankLine1 = lineBreak1 && one.match(blanklineEndRegex_);
      var blankLine2 = lineBreak2 && two.match(blanklineStartRegex_);

      if (blankLine1 || blankLine2) {
        // Five points for blank lines.
        return 5;
      } else if (lineBreak1 || lineBreak2) {
        // Four points for line breaks.
        return 4;
      } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
        // Three points for end of sentences.
        return 3;
      } else if (whitespace1 || whitespace2) {
        // Two points for whitespace.
        return 2;
      } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
        // One point for non-alphanumeric.
        return 1;
      }
      return 0;
    }

    var pointer = 1;
    // Intentionally ignore the first and last element (don't need checking).
    while (pointer < diffs.length - 1) {
      if (
        diffs[pointer - 1][0] == DIFF_EQUAL &&
        diffs[pointer + 1][0] == DIFF_EQUAL
      ) {
        // This is a single edit surrounded by equalities.
        var equality1 = diffs[pointer - 1][1];
        var edit = diffs[pointer][1];
        var equality2 = diffs[pointer + 1][1];

        // First, shift the edit as far left as possible.
        var commonOffset = diff_commonSuffix(equality1, edit);
        if (commonOffset) {
          var commonString = edit.substring(edit.length - commonOffset);
          equality1 = equality1.substring(0, equality1.length - commonOffset);
          edit = commonString + edit.substring(0, edit.length - commonOffset);
          equality2 = commonString + equality2;
        }

        // Second, step character by character right, looking for the best fit.
        var bestEquality1 = equality1;
        var bestEdit = edit;
        var bestEquality2 = equality2;
        var bestScore =
          diff_cleanupSemanticScore_(equality1, edit) +
          diff_cleanupSemanticScore_(edit, equality2);
        while (edit.charAt(0) === equality2.charAt(0)) {
          equality1 += edit.charAt(0);
          edit = edit.substring(1) + equality2.charAt(0);
          equality2 = equality2.substring(1);
          var score =
            diff_cleanupSemanticScore_(equality1, edit) +
            diff_cleanupSemanticScore_(edit, equality2);
          // The >= encourages trailing rather than leading whitespace on edits.
          if (score >= bestScore) {
            bestScore = score;
            bestEquality1 = equality1;
            bestEdit = edit;
            bestEquality2 = equality2;
          }
        }

        if (diffs[pointer - 1][1] != bestEquality1) {
          // We have an improvement, save it back to the diff.
          if (bestEquality1) {
            diffs[pointer - 1][1] = bestEquality1;
          } else {
            diffs.splice(pointer - 1, 1);
            pointer--;
          }
          diffs[pointer][1] = bestEdit;
          if (bestEquality2) {
            diffs[pointer + 1][1] = bestEquality2;
          } else {
            diffs.splice(pointer + 1, 1);
            pointer--;
          }
        }
      }
      pointer++;
    }
  }

  /**
   * Reorder and merge like edit sections.  Merge equalities.
   * Any edit section can move as long as it doesn't cross an equality.
   * @param {Array} diffs Array of diff tuples.
   * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff
   */
  function diff_cleanupMerge(diffs, fix_unicode) {
    diffs.push([DIFF_EQUAL, ""]); // Add a dummy entry at the end.
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = "";
    var text_insert = "";
    var commonlength;
    while (pointer < diffs.length) {
      if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
        diffs.splice(pointer, 1);
        continue;
      }
      switch (diffs[pointer][0]) {
        case DIFF_INSERT:
          count_insert++;
          text_insert += diffs[pointer][1];
          pointer++;
          break;
        case DIFF_DELETE:
          count_delete++;
          text_delete += diffs[pointer][1];
          pointer++;
          break;
        case DIFF_EQUAL:
          var previous_equality = pointer - count_insert - count_delete - 1;
          if (fix_unicode) {
            // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,
            // we assume that the old and new text in the diff are complete and correct
            // unicode-encoded JS strings, but the tuple boundaries may fall between
            // surrogate pairs.  we fix this by shaving off stray surrogates from the end
            // of the previous equality and the beginning of this equality.  this may create
            // empty equalities or a common prefix or suffix.  for example, if AB and AC are
            // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and
            // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this
            // particular case, both equalities go away, we absorb any previous inequalities,
            // and we keep scanning for the next equality before rewriting the tuples.
            if (
              previous_equality >= 0 &&
              ends_with_pair_start(diffs[previous_equality][1])
            ) {
              var stray = diffs[previous_equality][1].slice(-1);
              diffs[previous_equality][1] = diffs[previous_equality][1].slice(
                0,
                -1
              );
              text_delete = stray + text_delete;
              text_insert = stray + text_insert;
              if (!diffs[previous_equality][1]) {
                // emptied out previous equality, so delete it and include previous delete/insert
                diffs.splice(previous_equality, 1);
                pointer--;
                var k = previous_equality - 1;
                if (diffs[k] && diffs[k][0] === DIFF_INSERT) {
                  count_insert++;
                  text_insert = diffs[k][1] + text_insert;
                  k--;
                }
                if (diffs[k] && diffs[k][0] === DIFF_DELETE) {
                  count_delete++;
                  text_delete = diffs[k][1] + text_delete;
                  k--;
                }
                previous_equality = k;
              }
            }
            if (starts_with_pair_end(diffs[pointer][1])) {
              var stray = diffs[pointer][1].charAt(0);
              diffs[pointer][1] = diffs[pointer][1].slice(1);
              text_delete += stray;
              text_insert += stray;
            }
          }
          if (pointer < diffs.length - 1 && !diffs[pointer][1]) {
            // for empty equality not at end, wait for next equality
            diffs.splice(pointer, 1);
            break;
          }
          if (text_delete.length > 0 || text_insert.length > 0) {
            // note that diff_commonPrefix and diff_commonSuffix are unicode-aware
            if (text_delete.length > 0 && text_insert.length > 0) {
              // Factor out any common prefixes.
              commonlength = diff_commonPrefix(text_insert, text_delete);
              if (commonlength !== 0) {
                if (previous_equality >= 0) {
                  diffs[previous_equality][1] += text_insert.substring(
                    0,
                    commonlength
                  );
                } else {
                  diffs.splice(0, 0, [
                    DIFF_EQUAL,
                    text_insert.substring(0, commonlength),
                  ]);
                  pointer++;
                }
                text_insert = text_insert.substring(commonlength);
                text_delete = text_delete.substring(commonlength);
              }
              // Factor out any common suffixes.
              commonlength = diff_commonSuffix(text_insert, text_delete);
              if (commonlength !== 0) {
                diffs[pointer][1] =
                  text_insert.substring(text_insert.length - commonlength) +
                  diffs[pointer][1];
                text_insert = text_insert.substring(
                  0,
                  text_insert.length - commonlength
                );
                text_delete = text_delete.substring(
                  0,
                  text_delete.length - commonlength
                );
              }
            }
            // Delete the offending records and add the merged ones.
            var n = count_insert + count_delete;
            if (text_delete.length === 0 && text_insert.length === 0) {
              diffs.splice(pointer - n, n);
              pointer = pointer - n;
            } else if (text_delete.length === 0) {
              diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);
              pointer = pointer - n + 1;
            } else if (text_insert.length === 0) {
              diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);
              pointer = pointer - n + 1;
            } else {
              diffs.splice(
                pointer - n,
                n,
                [DIFF_DELETE, text_delete],
                [DIFF_INSERT, text_insert]
              );
              pointer = pointer - n + 2;
            }
          }
          if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {
            // Merge this equality with the previous one.
            diffs[pointer - 1][1] += diffs[pointer][1];
            diffs.splice(pointer, 1);
          } else {
            pointer++;
          }
          count_insert = 0;
          count_delete = 0;
          text_delete = "";
          text_insert = "";
          break;
      }
    }
    if (diffs[diffs.length - 1][1] === "") {
      diffs.pop(); // Remove the dummy entry at the end.
    }

    // Second pass: look for single edits surrounded on both sides by equalities
    // which can be shifted sideways to eliminate an equality.
    // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
    var changes = false;
    pointer = 1;
    // Intentionally ignore the first and last element (don't need checking).
    while (pointer < diffs.length - 1) {
      if (
        diffs[pointer - 1][0] === DIFF_EQUAL &&
        diffs[pointer + 1][0] === DIFF_EQUAL
      ) {
        // This is a single edit surrounded by equalities.
        if (
          diffs[pointer][1].substring(
            diffs[pointer][1].length - diffs[pointer - 1][1].length
          ) === diffs[pointer - 1][1]
        ) {
          // Shift the edit over the previous equality.
          diffs[pointer][1] =
            diffs[pointer - 1][1] +
            diffs[pointer][1].substring(
              0,
              diffs[pointer][1].length - diffs[pointer - 1][1].length
            );
          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
          diffs.splice(pointer - 1, 1);
          changes = true;
        } else if (
          diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
          diffs[pointer + 1][1]
        ) {
          // Shift the edit over the next equality.
          diffs[pointer - 1][1] += diffs[pointer + 1][1];
          diffs[pointer][1] =
            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
            diffs[pointer + 1][1];
          diffs.splice(pointer + 1, 1);
          changes = true;
        }
      }
      pointer++;
    }
    // If shifts were made, the diff needs reordering and another shift sweep.
    if (changes) {
      diff_cleanupMerge(diffs, fix_unicode);
    }
  }

  function is_surrogate_pair_start(charCode) {
    return charCode >= 0xd800 && charCode <= 0xdbff;
  }

  function is_surrogate_pair_end(charCode) {
    return charCode >= 0xdc00 && charCode <= 0xdfff;
  }

  function starts_with_pair_end(str) {
    return is_surrogate_pair_end(str.charCodeAt(0));
  }

  function ends_with_pair_start(str) {
    return is_surrogate_pair_start(str.charCodeAt(str.length - 1));
  }

  function remove_empty_tuples(tuples) {
    var ret = [];
    for (var i = 0; i < tuples.length; i++) {
      if (tuples[i][1].length > 0) {
        ret.push(tuples[i]);
      }
    }
    return ret;
  }

  function make_edit_splice(before, oldMiddle, newMiddle, after) {
    if (ends_with_pair_start(before) || starts_with_pair_end(after)) {
      return null;
    }
    return remove_empty_tuples([
      [DIFF_EQUAL, before],
      [DIFF_DELETE, oldMiddle],
      [DIFF_INSERT, newMiddle],
      [DIFF_EQUAL, after],
    ]);
  }

  function find_cursor_edit_diff(oldText, newText, cursor_pos) {
    // note: this runs after equality check has ruled out exact equality
    var oldRange =
      typeof cursor_pos === "number"
        ? { index: cursor_pos, length: 0 }
        : cursor_pos.oldRange;
    var newRange = typeof cursor_pos === "number" ? null : cursor_pos.newRange;
    // take into account the old and new selection to generate the best diff
    // possible for a text edit.  for example, a text change from "xxx" to "xx"
    // could be a delete or forwards-delete of any one of the x's, or the
    // result of selecting two of the x's and typing "x".
    var oldLength = oldText.length;
    var newLength = newText.length;
    if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {
      // see if we have an insert or delete before or after cursor
      var oldCursor = oldRange.index;
      var oldBefore = oldText.slice(0, oldCursor);
      var oldAfter = oldText.slice(oldCursor);
      var maybeNewCursor = newRange ? newRange.index : null;
      editBefore: {
        // is this an insert or delete right before oldCursor?
        var newCursor = oldCursor + newLength - oldLength;
        if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {
          break editBefore;
        }
        if (newCursor < 0 || newCursor > newLength) {
          break editBefore;
        }
        var newBefore = newText.slice(0, newCursor);
        var newAfter = newText.slice(newCursor);
        if (newAfter !== oldAfter) {
          break editBefore;
        }
        var prefixLength = Math.min(oldCursor, newCursor);
        var oldPrefix = oldBefore.slice(0, prefixLength);
        var newPrefix = newBefore.slice(0, prefixLength);
        if (oldPrefix !== newPrefix) {
          break editBefore;
        }
        var oldMiddle = oldBefore.slice(prefixLength);
        var newMiddle = newBefore.slice(prefixLength);
        return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);
      }
      editAfter: {
        // is this an insert or delete right after oldCursor?
        if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {
          break editAfter;
        }
        var cursor = oldCursor;
        var newBefore = newText.slice(0, cursor);
        var newAfter = newText.slice(cursor);
        if (newBefore !== oldBefore) {
          break editAfter;
        }
        var suffixLength = Math.min(oldLength - cursor, newLength - cursor);
        var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);
        var newSuffix = newAfter.slice(newAfter.length - suffixLength);
        if (oldSuffix !== newSuffix) {
          break editAfter;
        }
        var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);
        var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);
        return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);
      }
    }
    if (oldRange.length > 0 && newRange && newRange.length === 0) {
      replaceRange: {
        // see if diff could be a splice of the old selection range
        var oldPrefix = oldText.slice(0, oldRange.index);
        var oldSuffix = oldText.slice(oldRange.index + oldRange.length);
        var prefixLength = oldPrefix.length;
        var suffixLength = oldSuffix.length;
        if (newLength < prefixLength + suffixLength) {
          break replaceRange;
        }
        var newPrefix = newText.slice(0, prefixLength);
        var newSuffix = newText.slice(newLength - suffixLength);
        if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {
          break replaceRange;
        }
        var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);
        var newMiddle = newText.slice(prefixLength, newLength - suffixLength);
        return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);
      }
    }

    return null;
  }

  function diff(text1, text2, cursor_pos, cleanup) {
    // only pass fix_unicode=true at the top level, not when diff_main is
    // recursively invoked
    return diff_main(text1, text2, cursor_pos, cleanup, true);
  }

  diff.INSERT = DIFF_INSERT;
  diff.DELETE = DIFF_DELETE;
  diff.EQUAL = DIFF_EQUAL;

  var diff_1 = diff;

  var lodash_clonedeep = {exports: {}};

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  lodash_clonedeep.exports;

  (function (module, exports) {
  	/** Used as the size to enable large array optimizations. */
  	var LARGE_ARRAY_SIZE = 200;

  	/** Used to stand-in for `undefined` hash values. */
  	var HASH_UNDEFINED = '__lodash_hash_undefined__';

  	/** Used as references for various `Number` constants. */
  	var MAX_SAFE_INTEGER = 9007199254740991;

  	/** `Object#toString` result references. */
  	var argsTag = '[object Arguments]',
  	    arrayTag = '[object Array]',
  	    boolTag = '[object Boolean]',
  	    dateTag = '[object Date]',
  	    errorTag = '[object Error]',
  	    funcTag = '[object Function]',
  	    genTag = '[object GeneratorFunction]',
  	    mapTag = '[object Map]',
  	    numberTag = '[object Number]',
  	    objectTag = '[object Object]',
  	    promiseTag = '[object Promise]',
  	    regexpTag = '[object RegExp]',
  	    setTag = '[object Set]',
  	    stringTag = '[object String]',
  	    symbolTag = '[object Symbol]',
  	    weakMapTag = '[object WeakMap]';

  	var arrayBufferTag = '[object ArrayBuffer]',
  	    dataViewTag = '[object DataView]',
  	    float32Tag = '[object Float32Array]',
  	    float64Tag = '[object Float64Array]',
  	    int8Tag = '[object Int8Array]',
  	    int16Tag = '[object Int16Array]',
  	    int32Tag = '[object Int32Array]',
  	    uint8Tag = '[object Uint8Array]',
  	    uint8ClampedTag = '[object Uint8ClampedArray]',
  	    uint16Tag = '[object Uint16Array]',
  	    uint32Tag = '[object Uint32Array]';

  	/**
  	 * Used to match `RegExp`
  	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
  	 */
  	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  	/** Used to match `RegExp` flags from their coerced string values. */
  	var reFlags = /\w*$/;

  	/** Used to detect host constructors (Safari). */
  	var reIsHostCtor = /^\[object .+?Constructor\]$/;

  	/** Used to detect unsigned integer values. */
  	var reIsUint = /^(?:0|[1-9]\d*)$/;

  	/** Used to identify `toStringTag` values supported by `_.clone`. */
  	var cloneableTags = {};
  	cloneableTags[argsTag] = cloneableTags[arrayTag] =
  	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  	cloneableTags[boolTag] = cloneableTags[dateTag] =
  	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  	cloneableTags[int32Tag] = cloneableTags[mapTag] =
  	cloneableTags[numberTag] = cloneableTags[objectTag] =
  	cloneableTags[regexpTag] = cloneableTags[setTag] =
  	cloneableTags[stringTag] = cloneableTags[symbolTag] =
  	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  	cloneableTags[errorTag] = cloneableTags[funcTag] =
  	cloneableTags[weakMapTag] = false;

  	/** Detect free variable `global` from Node.js. */
  	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  	/** Detect free variable `self`. */
  	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  	/** Used as a reference to the global object. */
  	var root = freeGlobal || freeSelf || Function('return this')();

  	/** Detect free variable `exports`. */
  	var freeExports = exports && !exports.nodeType && exports;

  	/** Detect free variable `module`. */
  	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  	/** Detect the popular CommonJS extension `module.exports`. */
  	var moduleExports = freeModule && freeModule.exports === freeExports;

  	/**
  	 * Adds the key-value `pair` to `map`.
  	 *
  	 * @private
  	 * @param {Object} map The map to modify.
  	 * @param {Array} pair The key-value pair to add.
  	 * @returns {Object} Returns `map`.
  	 */
  	function addMapEntry(map, pair) {
  	  // Don't return `map.set` because it's not chainable in IE 11.
  	  map.set(pair[0], pair[1]);
  	  return map;
  	}

  	/**
  	 * Adds `value` to `set`.
  	 *
  	 * @private
  	 * @param {Object} set The set to modify.
  	 * @param {*} value The value to add.
  	 * @returns {Object} Returns `set`.
  	 */
  	function addSetEntry(set, value) {
  	  // Don't return `set.add` because it's not chainable in IE 11.
  	  set.add(value);
  	  return set;
  	}

  	/**
  	 * A specialized version of `_.forEach` for arrays without support for
  	 * iteratee shorthands.
  	 *
  	 * @private
  	 * @param {Array} [array] The array to iterate over.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @returns {Array} Returns `array`.
  	 */
  	function arrayEach(array, iteratee) {
  	  var index = -1,
  	      length = array ? array.length : 0;

  	  while (++index < length) {
  	    if (iteratee(array[index], index, array) === false) {
  	      break;
  	    }
  	  }
  	  return array;
  	}

  	/**
  	 * Appends the elements of `values` to `array`.
  	 *
  	 * @private
  	 * @param {Array} array The array to modify.
  	 * @param {Array} values The values to append.
  	 * @returns {Array} Returns `array`.
  	 */
  	function arrayPush(array, values) {
  	  var index = -1,
  	      length = values.length,
  	      offset = array.length;

  	  while (++index < length) {
  	    array[offset + index] = values[index];
  	  }
  	  return array;
  	}

  	/**
  	 * A specialized version of `_.reduce` for arrays without support for
  	 * iteratee shorthands.
  	 *
  	 * @private
  	 * @param {Array} [array] The array to iterate over.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @param {*} [accumulator] The initial value.
  	 * @param {boolean} [initAccum] Specify using the first element of `array` as
  	 *  the initial value.
  	 * @returns {*} Returns the accumulated value.
  	 */
  	function arrayReduce(array, iteratee, accumulator, initAccum) {
  	  var index = -1,
  	      length = array ? array.length : 0;
  	  while (++index < length) {
  	    accumulator = iteratee(accumulator, array[index], index, array);
  	  }
  	  return accumulator;
  	}

  	/**
  	 * The base implementation of `_.times` without support for iteratee shorthands
  	 * or max array length checks.
  	 *
  	 * @private
  	 * @param {number} n The number of times to invoke `iteratee`.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @returns {Array} Returns the array of results.
  	 */
  	function baseTimes(n, iteratee) {
  	  var index = -1,
  	      result = Array(n);

  	  while (++index < n) {
  	    result[index] = iteratee(index);
  	  }
  	  return result;
  	}

  	/**
  	 * Gets the value at `key` of `object`.
  	 *
  	 * @private
  	 * @param {Object} [object] The object to query.
  	 * @param {string} key The key of the property to get.
  	 * @returns {*} Returns the property value.
  	 */
  	function getValue(object, key) {
  	  return object == null ? undefined : object[key];
  	}

  	/**
  	 * Checks if `value` is a host object in IE < 9.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
  	 */
  	function isHostObject(value) {
  	  // Many host objects are `Object` objects that can coerce to strings
  	  // despite having improperly defined `toString` methods.
  	  var result = false;
  	  if (value != null && typeof value.toString != 'function') {
  	    try {
  	      result = !!(value + '');
  	    } catch (e) {}
  	  }
  	  return result;
  	}

  	/**
  	 * Converts `map` to its key-value pairs.
  	 *
  	 * @private
  	 * @param {Object} map The map to convert.
  	 * @returns {Array} Returns the key-value pairs.
  	 */
  	function mapToArray(map) {
  	  var index = -1,
  	      result = Array(map.size);

  	  map.forEach(function(value, key) {
  	    result[++index] = [key, value];
  	  });
  	  return result;
  	}

  	/**
  	 * Creates a unary function that invokes `func` with its argument transformed.
  	 *
  	 * @private
  	 * @param {Function} func The function to wrap.
  	 * @param {Function} transform The argument transform.
  	 * @returns {Function} Returns the new function.
  	 */
  	function overArg(func, transform) {
  	  return function(arg) {
  	    return func(transform(arg));
  	  };
  	}

  	/**
  	 * Converts `set` to an array of its values.
  	 *
  	 * @private
  	 * @param {Object} set The set to convert.
  	 * @returns {Array} Returns the values.
  	 */
  	function setToArray(set) {
  	  var index = -1,
  	      result = Array(set.size);

  	  set.forEach(function(value) {
  	    result[++index] = value;
  	  });
  	  return result;
  	}

  	/** Used for built-in method references. */
  	var arrayProto = Array.prototype,
  	    funcProto = Function.prototype,
  	    objectProto = Object.prototype;

  	/** Used to detect overreaching core-js shims. */
  	var coreJsData = root['__core-js_shared__'];

  	/** Used to detect methods masquerading as native. */
  	var maskSrcKey = (function() {
  	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  	  return uid ? ('Symbol(src)_1.' + uid) : '';
  	}());

  	/** Used to resolve the decompiled source of functions. */
  	var funcToString = funcProto.toString;

  	/** Used to check objects for own properties. */
  	var hasOwnProperty = objectProto.hasOwnProperty;

  	/**
  	 * Used to resolve the
  	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
  	 * of values.
  	 */
  	var objectToString = objectProto.toString;

  	/** Used to detect if a method is native. */
  	var reIsNative = RegExp('^' +
  	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  	);

  	/** Built-in value references. */
  	var Buffer = moduleExports ? root.Buffer : undefined,
  	    Symbol = root.Symbol,
  	    Uint8Array = root.Uint8Array,
  	    getPrototype = overArg(Object.getPrototypeOf, Object),
  	    objectCreate = Object.create,
  	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
  	    splice = arrayProto.splice;

  	/* Built-in method references for those with the same name as other `lodash` methods. */
  	var nativeGetSymbols = Object.getOwnPropertySymbols,
  	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
  	    nativeKeys = overArg(Object.keys, Object);

  	/* Built-in method references that are verified to be native. */
  	var DataView = getNative(root, 'DataView'),
  	    Map = getNative(root, 'Map'),
  	    Promise = getNative(root, 'Promise'),
  	    Set = getNative(root, 'Set'),
  	    WeakMap = getNative(root, 'WeakMap'),
  	    nativeCreate = getNative(Object, 'create');

  	/** Used to detect maps, sets, and weakmaps. */
  	var dataViewCtorString = toSource(DataView),
  	    mapCtorString = toSource(Map),
  	    promiseCtorString = toSource(Promise),
  	    setCtorString = toSource(Set),
  	    weakMapCtorString = toSource(WeakMap);

  	/** Used to convert symbols to primitives and strings. */
  	var symbolProto = Symbol ? Symbol.prototype : undefined,
  	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  	/**
  	 * Creates a hash object.
  	 *
  	 * @private
  	 * @constructor
  	 * @param {Array} [entries] The key-value pairs to cache.
  	 */
  	function Hash(entries) {
  	  var index = -1,
  	      length = entries ? entries.length : 0;

  	  this.clear();
  	  while (++index < length) {
  	    var entry = entries[index];
  	    this.set(entry[0], entry[1]);
  	  }
  	}

  	/**
  	 * Removes all key-value entries from the hash.
  	 *
  	 * @private
  	 * @name clear
  	 * @memberOf Hash
  	 */
  	function hashClear() {
  	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  	}

  	/**
  	 * Removes `key` and its value from the hash.
  	 *
  	 * @private
  	 * @name delete
  	 * @memberOf Hash
  	 * @param {Object} hash The hash to modify.
  	 * @param {string} key The key of the value to remove.
  	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  	 */
  	function hashDelete(key) {
  	  return this.has(key) && delete this.__data__[key];
  	}

  	/**
  	 * Gets the hash value for `key`.
  	 *
  	 * @private
  	 * @name get
  	 * @memberOf Hash
  	 * @param {string} key The key of the value to get.
  	 * @returns {*} Returns the entry value.
  	 */
  	function hashGet(key) {
  	  var data = this.__data__;
  	  if (nativeCreate) {
  	    var result = data[key];
  	    return result === HASH_UNDEFINED ? undefined : result;
  	  }
  	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
  	}

  	/**
  	 * Checks if a hash value for `key` exists.
  	 *
  	 * @private
  	 * @name has
  	 * @memberOf Hash
  	 * @param {string} key The key of the entry to check.
  	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  	 */
  	function hashHas(key) {
  	  var data = this.__data__;
  	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  	}

  	/**
  	 * Sets the hash `key` to `value`.
  	 *
  	 * @private
  	 * @name set
  	 * @memberOf Hash
  	 * @param {string} key The key of the value to set.
  	 * @param {*} value The value to set.
  	 * @returns {Object} Returns the hash instance.
  	 */
  	function hashSet(key, value) {
  	  var data = this.__data__;
  	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  	  return this;
  	}

  	// Add methods to `Hash`.
  	Hash.prototype.clear = hashClear;
  	Hash.prototype['delete'] = hashDelete;
  	Hash.prototype.get = hashGet;
  	Hash.prototype.has = hashHas;
  	Hash.prototype.set = hashSet;

  	/**
  	 * Creates an list cache object.
  	 *
  	 * @private
  	 * @constructor
  	 * @param {Array} [entries] The key-value pairs to cache.
  	 */
  	function ListCache(entries) {
  	  var index = -1,
  	      length = entries ? entries.length : 0;

  	  this.clear();
  	  while (++index < length) {
  	    var entry = entries[index];
  	    this.set(entry[0], entry[1]);
  	  }
  	}

  	/**
  	 * Removes all key-value entries from the list cache.
  	 *
  	 * @private
  	 * @name clear
  	 * @memberOf ListCache
  	 */
  	function listCacheClear() {
  	  this.__data__ = [];
  	}

  	/**
  	 * Removes `key` and its value from the list cache.
  	 *
  	 * @private
  	 * @name delete
  	 * @memberOf ListCache
  	 * @param {string} key The key of the value to remove.
  	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  	 */
  	function listCacheDelete(key) {
  	  var data = this.__data__,
  	      index = assocIndexOf(data, key);

  	  if (index < 0) {
  	    return false;
  	  }
  	  var lastIndex = data.length - 1;
  	  if (index == lastIndex) {
  	    data.pop();
  	  } else {
  	    splice.call(data, index, 1);
  	  }
  	  return true;
  	}

  	/**
  	 * Gets the list cache value for `key`.
  	 *
  	 * @private
  	 * @name get
  	 * @memberOf ListCache
  	 * @param {string} key The key of the value to get.
  	 * @returns {*} Returns the entry value.
  	 */
  	function listCacheGet(key) {
  	  var data = this.__data__,
  	      index = assocIndexOf(data, key);

  	  return index < 0 ? undefined : data[index][1];
  	}

  	/**
  	 * Checks if a list cache value for `key` exists.
  	 *
  	 * @private
  	 * @name has
  	 * @memberOf ListCache
  	 * @param {string} key The key of the entry to check.
  	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  	 */
  	function listCacheHas(key) {
  	  return assocIndexOf(this.__data__, key) > -1;
  	}

  	/**
  	 * Sets the list cache `key` to `value`.
  	 *
  	 * @private
  	 * @name set
  	 * @memberOf ListCache
  	 * @param {string} key The key of the value to set.
  	 * @param {*} value The value to set.
  	 * @returns {Object} Returns the list cache instance.
  	 */
  	function listCacheSet(key, value) {
  	  var data = this.__data__,
  	      index = assocIndexOf(data, key);

  	  if (index < 0) {
  	    data.push([key, value]);
  	  } else {
  	    data[index][1] = value;
  	  }
  	  return this;
  	}

  	// Add methods to `ListCache`.
  	ListCache.prototype.clear = listCacheClear;
  	ListCache.prototype['delete'] = listCacheDelete;
  	ListCache.prototype.get = listCacheGet;
  	ListCache.prototype.has = listCacheHas;
  	ListCache.prototype.set = listCacheSet;

  	/**
  	 * Creates a map cache object to store key-value pairs.
  	 *
  	 * @private
  	 * @constructor
  	 * @param {Array} [entries] The key-value pairs to cache.
  	 */
  	function MapCache(entries) {
  	  var index = -1,
  	      length = entries ? entries.length : 0;

  	  this.clear();
  	  while (++index < length) {
  	    var entry = entries[index];
  	    this.set(entry[0], entry[1]);
  	  }
  	}

  	/**
  	 * Removes all key-value entries from the map.
  	 *
  	 * @private
  	 * @name clear
  	 * @memberOf MapCache
  	 */
  	function mapCacheClear() {
  	  this.__data__ = {
  	    'hash': new Hash,
  	    'map': new (Map || ListCache),
  	    'string': new Hash
  	  };
  	}

  	/**
  	 * Removes `key` and its value from the map.
  	 *
  	 * @private
  	 * @name delete
  	 * @memberOf MapCache
  	 * @param {string} key The key of the value to remove.
  	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  	 */
  	function mapCacheDelete(key) {
  	  return getMapData(this, key)['delete'](key);
  	}

  	/**
  	 * Gets the map value for `key`.
  	 *
  	 * @private
  	 * @name get
  	 * @memberOf MapCache
  	 * @param {string} key The key of the value to get.
  	 * @returns {*} Returns the entry value.
  	 */
  	function mapCacheGet(key) {
  	  return getMapData(this, key).get(key);
  	}

  	/**
  	 * Checks if a map value for `key` exists.
  	 *
  	 * @private
  	 * @name has
  	 * @memberOf MapCache
  	 * @param {string} key The key of the entry to check.
  	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  	 */
  	function mapCacheHas(key) {
  	  return getMapData(this, key).has(key);
  	}

  	/**
  	 * Sets the map `key` to `value`.
  	 *
  	 * @private
  	 * @name set
  	 * @memberOf MapCache
  	 * @param {string} key The key of the value to set.
  	 * @param {*} value The value to set.
  	 * @returns {Object} Returns the map cache instance.
  	 */
  	function mapCacheSet(key, value) {
  	  getMapData(this, key).set(key, value);
  	  return this;
  	}

  	// Add methods to `MapCache`.
  	MapCache.prototype.clear = mapCacheClear;
  	MapCache.prototype['delete'] = mapCacheDelete;
  	MapCache.prototype.get = mapCacheGet;
  	MapCache.prototype.has = mapCacheHas;
  	MapCache.prototype.set = mapCacheSet;

  	/**
  	 * Creates a stack cache object to store key-value pairs.
  	 *
  	 * @private
  	 * @constructor
  	 * @param {Array} [entries] The key-value pairs to cache.
  	 */
  	function Stack(entries) {
  	  this.__data__ = new ListCache(entries);
  	}

  	/**
  	 * Removes all key-value entries from the stack.
  	 *
  	 * @private
  	 * @name clear
  	 * @memberOf Stack
  	 */
  	function stackClear() {
  	  this.__data__ = new ListCache;
  	}

  	/**
  	 * Removes `key` and its value from the stack.
  	 *
  	 * @private
  	 * @name delete
  	 * @memberOf Stack
  	 * @param {string} key The key of the value to remove.
  	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  	 */
  	function stackDelete(key) {
  	  return this.__data__['delete'](key);
  	}

  	/**
  	 * Gets the stack value for `key`.
  	 *
  	 * @private
  	 * @name get
  	 * @memberOf Stack
  	 * @param {string} key The key of the value to get.
  	 * @returns {*} Returns the entry value.
  	 */
  	function stackGet(key) {
  	  return this.__data__.get(key);
  	}

  	/**
  	 * Checks if a stack value for `key` exists.
  	 *
  	 * @private
  	 * @name has
  	 * @memberOf Stack
  	 * @param {string} key The key of the entry to check.
  	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  	 */
  	function stackHas(key) {
  	  return this.__data__.has(key);
  	}

  	/**
  	 * Sets the stack `key` to `value`.
  	 *
  	 * @private
  	 * @name set
  	 * @memberOf Stack
  	 * @param {string} key The key of the value to set.
  	 * @param {*} value The value to set.
  	 * @returns {Object} Returns the stack cache instance.
  	 */
  	function stackSet(key, value) {
  	  var cache = this.__data__;
  	  if (cache instanceof ListCache) {
  	    var pairs = cache.__data__;
  	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
  	      pairs.push([key, value]);
  	      return this;
  	    }
  	    cache = this.__data__ = new MapCache(pairs);
  	  }
  	  cache.set(key, value);
  	  return this;
  	}

  	// Add methods to `Stack`.
  	Stack.prototype.clear = stackClear;
  	Stack.prototype['delete'] = stackDelete;
  	Stack.prototype.get = stackGet;
  	Stack.prototype.has = stackHas;
  	Stack.prototype.set = stackSet;

  	/**
  	 * Creates an array of the enumerable property names of the array-like `value`.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @param {boolean} inherited Specify returning inherited property names.
  	 * @returns {Array} Returns the array of property names.
  	 */
  	function arrayLikeKeys(value, inherited) {
  	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  	  // Safari 9 makes `arguments.length` enumerable in strict mode.
  	  var result = (isArray(value) || isArguments(value))
  	    ? baseTimes(value.length, String)
  	    : [];

  	  var length = result.length,
  	      skipIndexes = !!length;

  	  for (var key in value) {
  	    if ((hasOwnProperty.call(value, key)) &&
  	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
  	      result.push(key);
  	    }
  	  }
  	  return result;
  	}

  	/**
  	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
  	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
  	 * for equality comparisons.
  	 *
  	 * @private
  	 * @param {Object} object The object to modify.
  	 * @param {string} key The key of the property to assign.
  	 * @param {*} value The value to assign.
  	 */
  	function assignValue(object, key, value) {
  	  var objValue = object[key];
  	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
  	      (value === undefined && !(key in object))) {
  	    object[key] = value;
  	  }
  	}

  	/**
  	 * Gets the index at which the `key` is found in `array` of key-value pairs.
  	 *
  	 * @private
  	 * @param {Array} array The array to inspect.
  	 * @param {*} key The key to search for.
  	 * @returns {number} Returns the index of the matched value, else `-1`.
  	 */
  	function assocIndexOf(array, key) {
  	  var length = array.length;
  	  while (length--) {
  	    if (eq(array[length][0], key)) {
  	      return length;
  	    }
  	  }
  	  return -1;
  	}

  	/**
  	 * The base implementation of `_.assign` without support for multiple sources
  	 * or `customizer` functions.
  	 *
  	 * @private
  	 * @param {Object} object The destination object.
  	 * @param {Object} source The source object.
  	 * @returns {Object} Returns `object`.
  	 */
  	function baseAssign(object, source) {
  	  return object && copyObject(source, keys(source), object);
  	}

  	/**
  	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
  	 * traversed objects.
  	 *
  	 * @private
  	 * @param {*} value The value to clone.
  	 * @param {boolean} [isDeep] Specify a deep clone.
  	 * @param {boolean} [isFull] Specify a clone including symbols.
  	 * @param {Function} [customizer] The function to customize cloning.
  	 * @param {string} [key] The key of `value`.
  	 * @param {Object} [object] The parent object of `value`.
  	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
  	 * @returns {*} Returns the cloned value.
  	 */
  	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  	  var result;
  	  if (customizer) {
  	    result = object ? customizer(value, key, object, stack) : customizer(value);
  	  }
  	  if (result !== undefined) {
  	    return result;
  	  }
  	  if (!isObject(value)) {
  	    return value;
  	  }
  	  var isArr = isArray(value);
  	  if (isArr) {
  	    result = initCloneArray(value);
  	    if (!isDeep) {
  	      return copyArray(value, result);
  	    }
  	  } else {
  	    var tag = getTag(value),
  	        isFunc = tag == funcTag || tag == genTag;

  	    if (isBuffer(value)) {
  	      return cloneBuffer(value, isDeep);
  	    }
  	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
  	      if (isHostObject(value)) {
  	        return object ? value : {};
  	      }
  	      result = initCloneObject(isFunc ? {} : value);
  	      if (!isDeep) {
  	        return copySymbols(value, baseAssign(result, value));
  	      }
  	    } else {
  	      if (!cloneableTags[tag]) {
  	        return object ? value : {};
  	      }
  	      result = initCloneByTag(value, tag, baseClone, isDeep);
  	    }
  	  }
  	  // Check for circular references and return its corresponding clone.
  	  stack || (stack = new Stack);
  	  var stacked = stack.get(value);
  	  if (stacked) {
  	    return stacked;
  	  }
  	  stack.set(value, result);

  	  if (!isArr) {
  	    var props = isFull ? getAllKeys(value) : keys(value);
  	  }
  	  arrayEach(props || value, function(subValue, key) {
  	    if (props) {
  	      key = subValue;
  	      subValue = value[key];
  	    }
  	    // Recursively populate clone (susceptible to call stack limits).
  	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  	  });
  	  return result;
  	}

  	/**
  	 * The base implementation of `_.create` without support for assigning
  	 * properties to the created object.
  	 *
  	 * @private
  	 * @param {Object} prototype The object to inherit from.
  	 * @returns {Object} Returns the new object.
  	 */
  	function baseCreate(proto) {
  	  return isObject(proto) ? objectCreate(proto) : {};
  	}

  	/**
  	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
  	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
  	 * symbols of `object`.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @param {Function} keysFunc The function to get the keys of `object`.
  	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
  	 * @returns {Array} Returns the array of property names and symbols.
  	 */
  	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  	  var result = keysFunc(object);
  	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  	}

  	/**
  	 * The base implementation of `getTag`.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @returns {string} Returns the `toStringTag`.
  	 */
  	function baseGetTag(value) {
  	  return objectToString.call(value);
  	}

  	/**
  	 * The base implementation of `_.isNative` without bad shim checks.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a native function,
  	 *  else `false`.
  	 */
  	function baseIsNative(value) {
  	  if (!isObject(value) || isMasked(value)) {
  	    return false;
  	  }
  	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  	  return pattern.test(toSource(value));
  	}

  	/**
  	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property names.
  	 */
  	function baseKeys(object) {
  	  if (!isPrototype(object)) {
  	    return nativeKeys(object);
  	  }
  	  var result = [];
  	  for (var key in Object(object)) {
  	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
  	      result.push(key);
  	    }
  	  }
  	  return result;
  	}

  	/**
  	 * Creates a clone of  `buffer`.
  	 *
  	 * @private
  	 * @param {Buffer} buffer The buffer to clone.
  	 * @param {boolean} [isDeep] Specify a deep clone.
  	 * @returns {Buffer} Returns the cloned buffer.
  	 */
  	function cloneBuffer(buffer, isDeep) {
  	  if (isDeep) {
  	    return buffer.slice();
  	  }
  	  var result = new buffer.constructor(buffer.length);
  	  buffer.copy(result);
  	  return result;
  	}

  	/**
  	 * Creates a clone of `arrayBuffer`.
  	 *
  	 * @private
  	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
  	 * @returns {ArrayBuffer} Returns the cloned array buffer.
  	 */
  	function cloneArrayBuffer(arrayBuffer) {
  	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  	  return result;
  	}

  	/**
  	 * Creates a clone of `dataView`.
  	 *
  	 * @private
  	 * @param {Object} dataView The data view to clone.
  	 * @param {boolean} [isDeep] Specify a deep clone.
  	 * @returns {Object} Returns the cloned data view.
  	 */
  	function cloneDataView(dataView, isDeep) {
  	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  	}

  	/**
  	 * Creates a clone of `map`.
  	 *
  	 * @private
  	 * @param {Object} map The map to clone.
  	 * @param {Function} cloneFunc The function to clone values.
  	 * @param {boolean} [isDeep] Specify a deep clone.
  	 * @returns {Object} Returns the cloned map.
  	 */
  	function cloneMap(map, isDeep, cloneFunc) {
  	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  	  return arrayReduce(array, addMapEntry, new map.constructor);
  	}

  	/**
  	 * Creates a clone of `regexp`.
  	 *
  	 * @private
  	 * @param {Object} regexp The regexp to clone.
  	 * @returns {Object} Returns the cloned regexp.
  	 */
  	function cloneRegExp(regexp) {
  	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  	  result.lastIndex = regexp.lastIndex;
  	  return result;
  	}

  	/**
  	 * Creates a clone of `set`.
  	 *
  	 * @private
  	 * @param {Object} set The set to clone.
  	 * @param {Function} cloneFunc The function to clone values.
  	 * @param {boolean} [isDeep] Specify a deep clone.
  	 * @returns {Object} Returns the cloned set.
  	 */
  	function cloneSet(set, isDeep, cloneFunc) {
  	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  	  return arrayReduce(array, addSetEntry, new set.constructor);
  	}

  	/**
  	 * Creates a clone of the `symbol` object.
  	 *
  	 * @private
  	 * @param {Object} symbol The symbol object to clone.
  	 * @returns {Object} Returns the cloned symbol object.
  	 */
  	function cloneSymbol(symbol) {
  	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  	}

  	/**
  	 * Creates a clone of `typedArray`.
  	 *
  	 * @private
  	 * @param {Object} typedArray The typed array to clone.
  	 * @param {boolean} [isDeep] Specify a deep clone.
  	 * @returns {Object} Returns the cloned typed array.
  	 */
  	function cloneTypedArray(typedArray, isDeep) {
  	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  	}

  	/**
  	 * Copies the values of `source` to `array`.
  	 *
  	 * @private
  	 * @param {Array} source The array to copy values from.
  	 * @param {Array} [array=[]] The array to copy values to.
  	 * @returns {Array} Returns `array`.
  	 */
  	function copyArray(source, array) {
  	  var index = -1,
  	      length = source.length;

  	  array || (array = Array(length));
  	  while (++index < length) {
  	    array[index] = source[index];
  	  }
  	  return array;
  	}

  	/**
  	 * Copies properties of `source` to `object`.
  	 *
  	 * @private
  	 * @param {Object} source The object to copy properties from.
  	 * @param {Array} props The property identifiers to copy.
  	 * @param {Object} [object={}] The object to copy properties to.
  	 * @param {Function} [customizer] The function to customize copied values.
  	 * @returns {Object} Returns `object`.
  	 */
  	function copyObject(source, props, object, customizer) {
  	  object || (object = {});

  	  var index = -1,
  	      length = props.length;

  	  while (++index < length) {
  	    var key = props[index];

  	    var newValue = undefined;

  	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  	  }
  	  return object;
  	}

  	/**
  	 * Copies own symbol properties of `source` to `object`.
  	 *
  	 * @private
  	 * @param {Object} source The object to copy symbols from.
  	 * @param {Object} [object={}] The object to copy symbols to.
  	 * @returns {Object} Returns `object`.
  	 */
  	function copySymbols(source, object) {
  	  return copyObject(source, getSymbols(source), object);
  	}

  	/**
  	 * Creates an array of own enumerable property names and symbols of `object`.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property names and symbols.
  	 */
  	function getAllKeys(object) {
  	  return baseGetAllKeys(object, keys, getSymbols);
  	}

  	/**
  	 * Gets the data for `map`.
  	 *
  	 * @private
  	 * @param {Object} map The map to query.
  	 * @param {string} key The reference key.
  	 * @returns {*} Returns the map data.
  	 */
  	function getMapData(map, key) {
  	  var data = map.__data__;
  	  return isKeyable(key)
  	    ? data[typeof key == 'string' ? 'string' : 'hash']
  	    : data.map;
  	}

  	/**
  	 * Gets the native function at `key` of `object`.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @param {string} key The key of the method to get.
  	 * @returns {*} Returns the function if it's native, else `undefined`.
  	 */
  	function getNative(object, key) {
  	  var value = getValue(object, key);
  	  return baseIsNative(value) ? value : undefined;
  	}

  	/**
  	 * Creates an array of the own enumerable symbol properties of `object`.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of symbols.
  	 */
  	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

  	/**
  	 * Gets the `toStringTag` of `value`.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @returns {string} Returns the `toStringTag`.
  	 */
  	var getTag = baseGetTag;

  	// Fallback for data views, maps, sets, and weak maps in IE 11,
  	// for data views in Edge < 14, and promises in Node.js.
  	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
  	    (Map && getTag(new Map) != mapTag) ||
  	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
  	    (Set && getTag(new Set) != setTag) ||
  	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  	  getTag = function(value) {
  	    var result = objectToString.call(value),
  	        Ctor = result == objectTag ? value.constructor : undefined,
  	        ctorString = Ctor ? toSource(Ctor) : undefined;

  	    if (ctorString) {
  	      switch (ctorString) {
  	        case dataViewCtorString: return dataViewTag;
  	        case mapCtorString: return mapTag;
  	        case promiseCtorString: return promiseTag;
  	        case setCtorString: return setTag;
  	        case weakMapCtorString: return weakMapTag;
  	      }
  	    }
  	    return result;
  	  };
  	}

  	/**
  	 * Initializes an array clone.
  	 *
  	 * @private
  	 * @param {Array} array The array to clone.
  	 * @returns {Array} Returns the initialized clone.
  	 */
  	function initCloneArray(array) {
  	  var length = array.length,
  	      result = array.constructor(length);

  	  // Add properties assigned by `RegExp#exec`.
  	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
  	    result.index = array.index;
  	    result.input = array.input;
  	  }
  	  return result;
  	}

  	/**
  	 * Initializes an object clone.
  	 *
  	 * @private
  	 * @param {Object} object The object to clone.
  	 * @returns {Object} Returns the initialized clone.
  	 */
  	function initCloneObject(object) {
  	  return (typeof object.constructor == 'function' && !isPrototype(object))
  	    ? baseCreate(getPrototype(object))
  	    : {};
  	}

  	/**
  	 * Initializes an object clone based on its `toStringTag`.
  	 *
  	 * **Note:** This function only supports cloning values with tags of
  	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
  	 *
  	 * @private
  	 * @param {Object} object The object to clone.
  	 * @param {string} tag The `toStringTag` of the object to clone.
  	 * @param {Function} cloneFunc The function to clone values.
  	 * @param {boolean} [isDeep] Specify a deep clone.
  	 * @returns {Object} Returns the initialized clone.
  	 */
  	function initCloneByTag(object, tag, cloneFunc, isDeep) {
  	  var Ctor = object.constructor;
  	  switch (tag) {
  	    case arrayBufferTag:
  	      return cloneArrayBuffer(object);

  	    case boolTag:
  	    case dateTag:
  	      return new Ctor(+object);

  	    case dataViewTag:
  	      return cloneDataView(object, isDeep);

  	    case float32Tag: case float64Tag:
  	    case int8Tag: case int16Tag: case int32Tag:
  	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
  	      return cloneTypedArray(object, isDeep);

  	    case mapTag:
  	      return cloneMap(object, isDeep, cloneFunc);

  	    case numberTag:
  	    case stringTag:
  	      return new Ctor(object);

  	    case regexpTag:
  	      return cloneRegExp(object);

  	    case setTag:
  	      return cloneSet(object, isDeep, cloneFunc);

  	    case symbolTag:
  	      return cloneSymbol(object);
  	  }
  	}

  	/**
  	 * Checks if `value` is a valid array-like index.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
  	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
  	 */
  	function isIndex(value, length) {
  	  length = length == null ? MAX_SAFE_INTEGER : length;
  	  return !!length &&
  	    (typeof value == 'number' || reIsUint.test(value)) &&
  	    (value > -1 && value % 1 == 0 && value < length);
  	}

  	/**
  	 * Checks if `value` is suitable for use as unique object key.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
  	 */
  	function isKeyable(value) {
  	  var type = typeof value;
  	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
  	    ? (value !== '__proto__')
  	    : (value === null);
  	}

  	/**
  	 * Checks if `func` has its source masked.
  	 *
  	 * @private
  	 * @param {Function} func The function to check.
  	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
  	 */
  	function isMasked(func) {
  	  return !!maskSrcKey && (maskSrcKey in func);
  	}

  	/**
  	 * Checks if `value` is likely a prototype object.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
  	 */
  	function isPrototype(value) {
  	  var Ctor = value && value.constructor,
  	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  	  return value === proto;
  	}

  	/**
  	 * Converts `func` to its source code.
  	 *
  	 * @private
  	 * @param {Function} func The function to process.
  	 * @returns {string} Returns the source code.
  	 */
  	function toSource(func) {
  	  if (func != null) {
  	    try {
  	      return funcToString.call(func);
  	    } catch (e) {}
  	    try {
  	      return (func + '');
  	    } catch (e) {}
  	  }
  	  return '';
  	}

  	/**
  	 * This method is like `_.clone` except that it recursively clones `value`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 1.0.0
  	 * @category Lang
  	 * @param {*} value The value to recursively clone.
  	 * @returns {*} Returns the deep cloned value.
  	 * @see _.clone
  	 * @example
  	 *
  	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
  	 *
  	 * var deep = _.cloneDeep(objects);
  	 * console.log(deep[0] === objects[0]);
  	 * // => false
  	 */
  	function cloneDeep(value) {
  	  return baseClone(value, true, true);
  	}

  	/**
  	 * Performs a
  	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
  	 * comparison between two values to determine if they are equivalent.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to compare.
  	 * @param {*} other The other value to compare.
  	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
  	 * @example
  	 *
  	 * var object = { 'a': 1 };
  	 * var other = { 'a': 1 };
  	 *
  	 * _.eq(object, object);
  	 * // => true
  	 *
  	 * _.eq(object, other);
  	 * // => false
  	 *
  	 * _.eq('a', 'a');
  	 * // => true
  	 *
  	 * _.eq('a', Object('a'));
  	 * // => false
  	 *
  	 * _.eq(NaN, NaN);
  	 * // => true
  	 */
  	function eq(value, other) {
  	  return value === other || (value !== value && other !== other);
  	}

  	/**
  	 * Checks if `value` is likely an `arguments` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
  	 *  else `false`.
  	 * @example
  	 *
  	 * _.isArguments(function() { return arguments; }());
  	 * // => true
  	 *
  	 * _.isArguments([1, 2, 3]);
  	 * // => false
  	 */
  	function isArguments(value) {
  	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
  	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  	}

  	/**
  	 * Checks if `value` is classified as an `Array` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
  	 * @example
  	 *
  	 * _.isArray([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArray(document.body.children);
  	 * // => false
  	 *
  	 * _.isArray('abc');
  	 * // => false
  	 *
  	 * _.isArray(_.noop);
  	 * // => false
  	 */
  	var isArray = Array.isArray;

  	/**
  	 * Checks if `value` is array-like. A value is considered array-like if it's
  	 * not a function and has a `value.length` that's an integer greater than or
  	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
  	 * @example
  	 *
  	 * _.isArrayLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArrayLike(document.body.children);
  	 * // => true
  	 *
  	 * _.isArrayLike('abc');
  	 * // => true
  	 *
  	 * _.isArrayLike(_.noop);
  	 * // => false
  	 */
  	function isArrayLike(value) {
  	  return value != null && isLength(value.length) && !isFunction(value);
  	}

  	/**
  	 * This method is like `_.isArrayLike` except that it also checks if `value`
  	 * is an object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an array-like object,
  	 *  else `false`.
  	 * @example
  	 *
  	 * _.isArrayLikeObject([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArrayLikeObject(document.body.children);
  	 * // => true
  	 *
  	 * _.isArrayLikeObject('abc');
  	 * // => false
  	 *
  	 * _.isArrayLikeObject(_.noop);
  	 * // => false
  	 */
  	function isArrayLikeObject(value) {
  	  return isObjectLike(value) && isArrayLike(value);
  	}

  	/**
  	 * Checks if `value` is a buffer.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.3.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
  	 * @example
  	 *
  	 * _.isBuffer(new Buffer(2));
  	 * // => true
  	 *
  	 * _.isBuffer(new Uint8Array(2));
  	 * // => false
  	 */
  	var isBuffer = nativeIsBuffer || stubFalse;

  	/**
  	 * Checks if `value` is classified as a `Function` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
  	 * @example
  	 *
  	 * _.isFunction(_);
  	 * // => true
  	 *
  	 * _.isFunction(/abc/);
  	 * // => false
  	 */
  	function isFunction(value) {
  	  // The use of `Object#toString` avoids issues with the `typeof` operator
  	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  	  var tag = isObject(value) ? objectToString.call(value) : '';
  	  return tag == funcTag || tag == genTag;
  	}

  	/**
  	 * Checks if `value` is a valid array-like length.
  	 *
  	 * **Note:** This method is loosely based on
  	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
  	 * @example
  	 *
  	 * _.isLength(3);
  	 * // => true
  	 *
  	 * _.isLength(Number.MIN_VALUE);
  	 * // => false
  	 *
  	 * _.isLength(Infinity);
  	 * // => false
  	 *
  	 * _.isLength('3');
  	 * // => false
  	 */
  	function isLength(value) {
  	  return typeof value == 'number' &&
  	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  	}

  	/**
  	 * Checks if `value` is the
  	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
  	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
  	 * @example
  	 *
  	 * _.isObject({});
  	 * // => true
  	 *
  	 * _.isObject([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObject(_.noop);
  	 * // => true
  	 *
  	 * _.isObject(null);
  	 * // => false
  	 */
  	function isObject(value) {
  	  var type = typeof value;
  	  return !!value && (type == 'object' || type == 'function');
  	}

  	/**
  	 * Checks if `value` is object-like. A value is object-like if it's not `null`
  	 * and has a `typeof` result of "object".
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
  	 * @example
  	 *
  	 * _.isObjectLike({});
  	 * // => true
  	 *
  	 * _.isObjectLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObjectLike(_.noop);
  	 * // => false
  	 *
  	 * _.isObjectLike(null);
  	 * // => false
  	 */
  	function isObjectLike(value) {
  	  return !!value && typeof value == 'object';
  	}

  	/**
  	 * Creates an array of the own enumerable property names of `object`.
  	 *
  	 * **Note:** Non-object values are coerced to objects. See the
  	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
  	 * for more details.
  	 *
  	 * @static
  	 * @since 0.1.0
  	 * @memberOf _
  	 * @category Object
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property names.
  	 * @example
  	 *
  	 * function Foo() {
  	 *   this.a = 1;
  	 *   this.b = 2;
  	 * }
  	 *
  	 * Foo.prototype.c = 3;
  	 *
  	 * _.keys(new Foo);
  	 * // => ['a', 'b'] (iteration order is not guaranteed)
  	 *
  	 * _.keys('hi');
  	 * // => ['0', '1']
  	 */
  	function keys(object) {
  	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  	}

  	/**
  	 * This method returns a new empty array.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.13.0
  	 * @category Util
  	 * @returns {Array} Returns the new empty array.
  	 * @example
  	 *
  	 * var arrays = _.times(2, _.stubArray);
  	 *
  	 * console.log(arrays);
  	 * // => [[], []]
  	 *
  	 * console.log(arrays[0] === arrays[1]);
  	 * // => false
  	 */
  	function stubArray() {
  	  return [];
  	}

  	/**
  	 * This method returns `false`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.13.0
  	 * @category Util
  	 * @returns {boolean} Returns `false`.
  	 * @example
  	 *
  	 * _.times(2, _.stubFalse);
  	 * // => [false, false]
  	 */
  	function stubFalse() {
  	  return false;
  	}

  	module.exports = cloneDeep; 
  } (lodash_clonedeep, lodash_clonedeep.exports));

  var lodash_clonedeepExports = lodash_clonedeep.exports;

  var lodash_isequal = {exports: {}};

  /**
   * Lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright JS Foundation and other contributors <https://js.foundation/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  lodash_isequal.exports;

  (function (module, exports) {
  	/** Used as the size to enable large array optimizations. */
  	var LARGE_ARRAY_SIZE = 200;

  	/** Used to stand-in for `undefined` hash values. */
  	var HASH_UNDEFINED = '__lodash_hash_undefined__';

  	/** Used to compose bitmasks for value comparisons. */
  	var COMPARE_PARTIAL_FLAG = 1,
  	    COMPARE_UNORDERED_FLAG = 2;

  	/** Used as references for various `Number` constants. */
  	var MAX_SAFE_INTEGER = 9007199254740991;

  	/** `Object#toString` result references. */
  	var argsTag = '[object Arguments]',
  	    arrayTag = '[object Array]',
  	    asyncTag = '[object AsyncFunction]',
  	    boolTag = '[object Boolean]',
  	    dateTag = '[object Date]',
  	    errorTag = '[object Error]',
  	    funcTag = '[object Function]',
  	    genTag = '[object GeneratorFunction]',
  	    mapTag = '[object Map]',
  	    numberTag = '[object Number]',
  	    nullTag = '[object Null]',
  	    objectTag = '[object Object]',
  	    promiseTag = '[object Promise]',
  	    proxyTag = '[object Proxy]',
  	    regexpTag = '[object RegExp]',
  	    setTag = '[object Set]',
  	    stringTag = '[object String]',
  	    symbolTag = '[object Symbol]',
  	    undefinedTag = '[object Undefined]',
  	    weakMapTag = '[object WeakMap]';

  	var arrayBufferTag = '[object ArrayBuffer]',
  	    dataViewTag = '[object DataView]',
  	    float32Tag = '[object Float32Array]',
  	    float64Tag = '[object Float64Array]',
  	    int8Tag = '[object Int8Array]',
  	    int16Tag = '[object Int16Array]',
  	    int32Tag = '[object Int32Array]',
  	    uint8Tag = '[object Uint8Array]',
  	    uint8ClampedTag = '[object Uint8ClampedArray]',
  	    uint16Tag = '[object Uint16Array]',
  	    uint32Tag = '[object Uint32Array]';

  	/**
  	 * Used to match `RegExp`
  	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
  	 */
  	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  	/** Used to detect host constructors (Safari). */
  	var reIsHostCtor = /^\[object .+?Constructor\]$/;

  	/** Used to detect unsigned integer values. */
  	var reIsUint = /^(?:0|[1-9]\d*)$/;

  	/** Used to identify `toStringTag` values of typed arrays. */
  	var typedArrayTags = {};
  	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  	typedArrayTags[uint32Tag] = true;
  	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  	typedArrayTags[setTag] = typedArrayTags[stringTag] =
  	typedArrayTags[weakMapTag] = false;

  	/** Detect free variable `global` from Node.js. */
  	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  	/** Detect free variable `self`. */
  	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  	/** Used as a reference to the global object. */
  	var root = freeGlobal || freeSelf || Function('return this')();

  	/** Detect free variable `exports`. */
  	var freeExports = exports && !exports.nodeType && exports;

  	/** Detect free variable `module`. */
  	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  	/** Detect the popular CommonJS extension `module.exports`. */
  	var moduleExports = freeModule && freeModule.exports === freeExports;

  	/** Detect free variable `process` from Node.js. */
  	var freeProcess = moduleExports && freeGlobal.process;

  	/** Used to access faster Node.js helpers. */
  	var nodeUtil = (function() {
  	  try {
  	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  	  } catch (e) {}
  	}());

  	/* Node.js helper references. */
  	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  	/**
  	 * A specialized version of `_.filter` for arrays without support for
  	 * iteratee shorthands.
  	 *
  	 * @private
  	 * @param {Array} [array] The array to iterate over.
  	 * @param {Function} predicate The function invoked per iteration.
  	 * @returns {Array} Returns the new filtered array.
  	 */
  	function arrayFilter(array, predicate) {
  	  var index = -1,
  	      length = array == null ? 0 : array.length,
  	      resIndex = 0,
  	      result = [];

  	  while (++index < length) {
  	    var value = array[index];
  	    if (predicate(value, index, array)) {
  	      result[resIndex++] = value;
  	    }
  	  }
  	  return result;
  	}

  	/**
  	 * Appends the elements of `values` to `array`.
  	 *
  	 * @private
  	 * @param {Array} array The array to modify.
  	 * @param {Array} values The values to append.
  	 * @returns {Array} Returns `array`.
  	 */
  	function arrayPush(array, values) {
  	  var index = -1,
  	      length = values.length,
  	      offset = array.length;

  	  while (++index < length) {
  	    array[offset + index] = values[index];
  	  }
  	  return array;
  	}

  	/**
  	 * A specialized version of `_.some` for arrays without support for iteratee
  	 * shorthands.
  	 *
  	 * @private
  	 * @param {Array} [array] The array to iterate over.
  	 * @param {Function} predicate The function invoked per iteration.
  	 * @returns {boolean} Returns `true` if any element passes the predicate check,
  	 *  else `false`.
  	 */
  	function arraySome(array, predicate) {
  	  var index = -1,
  	      length = array == null ? 0 : array.length;

  	  while (++index < length) {
  	    if (predicate(array[index], index, array)) {
  	      return true;
  	    }
  	  }
  	  return false;
  	}

  	/**
  	 * The base implementation of `_.times` without support for iteratee shorthands
  	 * or max array length checks.
  	 *
  	 * @private
  	 * @param {number} n The number of times to invoke `iteratee`.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @returns {Array} Returns the array of results.
  	 */
  	function baseTimes(n, iteratee) {
  	  var index = -1,
  	      result = Array(n);

  	  while (++index < n) {
  	    result[index] = iteratee(index);
  	  }
  	  return result;
  	}

  	/**
  	 * The base implementation of `_.unary` without support for storing metadata.
  	 *
  	 * @private
  	 * @param {Function} func The function to cap arguments for.
  	 * @returns {Function} Returns the new capped function.
  	 */
  	function baseUnary(func) {
  	  return function(value) {
  	    return func(value);
  	  };
  	}

  	/**
  	 * Checks if a `cache` value for `key` exists.
  	 *
  	 * @private
  	 * @param {Object} cache The cache to query.
  	 * @param {string} key The key of the entry to check.
  	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  	 */
  	function cacheHas(cache, key) {
  	  return cache.has(key);
  	}

  	/**
  	 * Gets the value at `key` of `object`.
  	 *
  	 * @private
  	 * @param {Object} [object] The object to query.
  	 * @param {string} key The key of the property to get.
  	 * @returns {*} Returns the property value.
  	 */
  	function getValue(object, key) {
  	  return object == null ? undefined : object[key];
  	}

  	/**
  	 * Converts `map` to its key-value pairs.
  	 *
  	 * @private
  	 * @param {Object} map The map to convert.
  	 * @returns {Array} Returns the key-value pairs.
  	 */
  	function mapToArray(map) {
  	  var index = -1,
  	      result = Array(map.size);

  	  map.forEach(function(value, key) {
  	    result[++index] = [key, value];
  	  });
  	  return result;
  	}

  	/**
  	 * Creates a unary function that invokes `func` with its argument transformed.
  	 *
  	 * @private
  	 * @param {Function} func The function to wrap.
  	 * @param {Function} transform The argument transform.
  	 * @returns {Function} Returns the new function.
  	 */
  	function overArg(func, transform) {
  	  return function(arg) {
  	    return func(transform(arg));
  	  };
  	}

  	/**
  	 * Converts `set` to an array of its values.
  	 *
  	 * @private
  	 * @param {Object} set The set to convert.
  	 * @returns {Array} Returns the values.
  	 */
  	function setToArray(set) {
  	  var index = -1,
  	      result = Array(set.size);

  	  set.forEach(function(value) {
  	    result[++index] = value;
  	  });
  	  return result;
  	}

  	/** Used for built-in method references. */
  	var arrayProto = Array.prototype,
  	    funcProto = Function.prototype,
  	    objectProto = Object.prototype;

  	/** Used to detect overreaching core-js shims. */
  	var coreJsData = root['__core-js_shared__'];

  	/** Used to resolve the decompiled source of functions. */
  	var funcToString = funcProto.toString;

  	/** Used to check objects for own properties. */
  	var hasOwnProperty = objectProto.hasOwnProperty;

  	/** Used to detect methods masquerading as native. */
  	var maskSrcKey = (function() {
  	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  	  return uid ? ('Symbol(src)_1.' + uid) : '';
  	}());

  	/**
  	 * Used to resolve the
  	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
  	 * of values.
  	 */
  	var nativeObjectToString = objectProto.toString;

  	/** Used to detect if a method is native. */
  	var reIsNative = RegExp('^' +
  	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  	);

  	/** Built-in value references. */
  	var Buffer = moduleExports ? root.Buffer : undefined,
  	    Symbol = root.Symbol,
  	    Uint8Array = root.Uint8Array,
  	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
  	    splice = arrayProto.splice,
  	    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

  	/* Built-in method references for those with the same name as other `lodash` methods. */
  	var nativeGetSymbols = Object.getOwnPropertySymbols,
  	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
  	    nativeKeys = overArg(Object.keys, Object);

  	/* Built-in method references that are verified to be native. */
  	var DataView = getNative(root, 'DataView'),
  	    Map = getNative(root, 'Map'),
  	    Promise = getNative(root, 'Promise'),
  	    Set = getNative(root, 'Set'),
  	    WeakMap = getNative(root, 'WeakMap'),
  	    nativeCreate = getNative(Object, 'create');

  	/** Used to detect maps, sets, and weakmaps. */
  	var dataViewCtorString = toSource(DataView),
  	    mapCtorString = toSource(Map),
  	    promiseCtorString = toSource(Promise),
  	    setCtorString = toSource(Set),
  	    weakMapCtorString = toSource(WeakMap);

  	/** Used to convert symbols to primitives and strings. */
  	var symbolProto = Symbol ? Symbol.prototype : undefined,
  	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  	/**
  	 * Creates a hash object.
  	 *
  	 * @private
  	 * @constructor
  	 * @param {Array} [entries] The key-value pairs to cache.
  	 */
  	function Hash(entries) {
  	  var index = -1,
  	      length = entries == null ? 0 : entries.length;

  	  this.clear();
  	  while (++index < length) {
  	    var entry = entries[index];
  	    this.set(entry[0], entry[1]);
  	  }
  	}

  	/**
  	 * Removes all key-value entries from the hash.
  	 *
  	 * @private
  	 * @name clear
  	 * @memberOf Hash
  	 */
  	function hashClear() {
  	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  	  this.size = 0;
  	}

  	/**
  	 * Removes `key` and its value from the hash.
  	 *
  	 * @private
  	 * @name delete
  	 * @memberOf Hash
  	 * @param {Object} hash The hash to modify.
  	 * @param {string} key The key of the value to remove.
  	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  	 */
  	function hashDelete(key) {
  	  var result = this.has(key) && delete this.__data__[key];
  	  this.size -= result ? 1 : 0;
  	  return result;
  	}

  	/**
  	 * Gets the hash value for `key`.
  	 *
  	 * @private
  	 * @name get
  	 * @memberOf Hash
  	 * @param {string} key The key of the value to get.
  	 * @returns {*} Returns the entry value.
  	 */
  	function hashGet(key) {
  	  var data = this.__data__;
  	  if (nativeCreate) {
  	    var result = data[key];
  	    return result === HASH_UNDEFINED ? undefined : result;
  	  }
  	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
  	}

  	/**
  	 * Checks if a hash value for `key` exists.
  	 *
  	 * @private
  	 * @name has
  	 * @memberOf Hash
  	 * @param {string} key The key of the entry to check.
  	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  	 */
  	function hashHas(key) {
  	  var data = this.__data__;
  	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
  	}

  	/**
  	 * Sets the hash `key` to `value`.
  	 *
  	 * @private
  	 * @name set
  	 * @memberOf Hash
  	 * @param {string} key The key of the value to set.
  	 * @param {*} value The value to set.
  	 * @returns {Object} Returns the hash instance.
  	 */
  	function hashSet(key, value) {
  	  var data = this.__data__;
  	  this.size += this.has(key) ? 0 : 1;
  	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  	  return this;
  	}

  	// Add methods to `Hash`.
  	Hash.prototype.clear = hashClear;
  	Hash.prototype['delete'] = hashDelete;
  	Hash.prototype.get = hashGet;
  	Hash.prototype.has = hashHas;
  	Hash.prototype.set = hashSet;

  	/**
  	 * Creates an list cache object.
  	 *
  	 * @private
  	 * @constructor
  	 * @param {Array} [entries] The key-value pairs to cache.
  	 */
  	function ListCache(entries) {
  	  var index = -1,
  	      length = entries == null ? 0 : entries.length;

  	  this.clear();
  	  while (++index < length) {
  	    var entry = entries[index];
  	    this.set(entry[0], entry[1]);
  	  }
  	}

  	/**
  	 * Removes all key-value entries from the list cache.
  	 *
  	 * @private
  	 * @name clear
  	 * @memberOf ListCache
  	 */
  	function listCacheClear() {
  	  this.__data__ = [];
  	  this.size = 0;
  	}

  	/**
  	 * Removes `key` and its value from the list cache.
  	 *
  	 * @private
  	 * @name delete
  	 * @memberOf ListCache
  	 * @param {string} key The key of the value to remove.
  	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  	 */
  	function listCacheDelete(key) {
  	  var data = this.__data__,
  	      index = assocIndexOf(data, key);

  	  if (index < 0) {
  	    return false;
  	  }
  	  var lastIndex = data.length - 1;
  	  if (index == lastIndex) {
  	    data.pop();
  	  } else {
  	    splice.call(data, index, 1);
  	  }
  	  --this.size;
  	  return true;
  	}

  	/**
  	 * Gets the list cache value for `key`.
  	 *
  	 * @private
  	 * @name get
  	 * @memberOf ListCache
  	 * @param {string} key The key of the value to get.
  	 * @returns {*} Returns the entry value.
  	 */
  	function listCacheGet(key) {
  	  var data = this.__data__,
  	      index = assocIndexOf(data, key);

  	  return index < 0 ? undefined : data[index][1];
  	}

  	/**
  	 * Checks if a list cache value for `key` exists.
  	 *
  	 * @private
  	 * @name has
  	 * @memberOf ListCache
  	 * @param {string} key The key of the entry to check.
  	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  	 */
  	function listCacheHas(key) {
  	  return assocIndexOf(this.__data__, key) > -1;
  	}

  	/**
  	 * Sets the list cache `key` to `value`.
  	 *
  	 * @private
  	 * @name set
  	 * @memberOf ListCache
  	 * @param {string} key The key of the value to set.
  	 * @param {*} value The value to set.
  	 * @returns {Object} Returns the list cache instance.
  	 */
  	function listCacheSet(key, value) {
  	  var data = this.__data__,
  	      index = assocIndexOf(data, key);

  	  if (index < 0) {
  	    ++this.size;
  	    data.push([key, value]);
  	  } else {
  	    data[index][1] = value;
  	  }
  	  return this;
  	}

  	// Add methods to `ListCache`.
  	ListCache.prototype.clear = listCacheClear;
  	ListCache.prototype['delete'] = listCacheDelete;
  	ListCache.prototype.get = listCacheGet;
  	ListCache.prototype.has = listCacheHas;
  	ListCache.prototype.set = listCacheSet;

  	/**
  	 * Creates a map cache object to store key-value pairs.
  	 *
  	 * @private
  	 * @constructor
  	 * @param {Array} [entries] The key-value pairs to cache.
  	 */
  	function MapCache(entries) {
  	  var index = -1,
  	      length = entries == null ? 0 : entries.length;

  	  this.clear();
  	  while (++index < length) {
  	    var entry = entries[index];
  	    this.set(entry[0], entry[1]);
  	  }
  	}

  	/**
  	 * Removes all key-value entries from the map.
  	 *
  	 * @private
  	 * @name clear
  	 * @memberOf MapCache
  	 */
  	function mapCacheClear() {
  	  this.size = 0;
  	  this.__data__ = {
  	    'hash': new Hash,
  	    'map': new (Map || ListCache),
  	    'string': new Hash
  	  };
  	}

  	/**
  	 * Removes `key` and its value from the map.
  	 *
  	 * @private
  	 * @name delete
  	 * @memberOf MapCache
  	 * @param {string} key The key of the value to remove.
  	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  	 */
  	function mapCacheDelete(key) {
  	  var result = getMapData(this, key)['delete'](key);
  	  this.size -= result ? 1 : 0;
  	  return result;
  	}

  	/**
  	 * Gets the map value for `key`.
  	 *
  	 * @private
  	 * @name get
  	 * @memberOf MapCache
  	 * @param {string} key The key of the value to get.
  	 * @returns {*} Returns the entry value.
  	 */
  	function mapCacheGet(key) {
  	  return getMapData(this, key).get(key);
  	}

  	/**
  	 * Checks if a map value for `key` exists.
  	 *
  	 * @private
  	 * @name has
  	 * @memberOf MapCache
  	 * @param {string} key The key of the entry to check.
  	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  	 */
  	function mapCacheHas(key) {
  	  return getMapData(this, key).has(key);
  	}

  	/**
  	 * Sets the map `key` to `value`.
  	 *
  	 * @private
  	 * @name set
  	 * @memberOf MapCache
  	 * @param {string} key The key of the value to set.
  	 * @param {*} value The value to set.
  	 * @returns {Object} Returns the map cache instance.
  	 */
  	function mapCacheSet(key, value) {
  	  var data = getMapData(this, key),
  	      size = data.size;

  	  data.set(key, value);
  	  this.size += data.size == size ? 0 : 1;
  	  return this;
  	}

  	// Add methods to `MapCache`.
  	MapCache.prototype.clear = mapCacheClear;
  	MapCache.prototype['delete'] = mapCacheDelete;
  	MapCache.prototype.get = mapCacheGet;
  	MapCache.prototype.has = mapCacheHas;
  	MapCache.prototype.set = mapCacheSet;

  	/**
  	 *
  	 * Creates an array cache object to store unique values.
  	 *
  	 * @private
  	 * @constructor
  	 * @param {Array} [values] The values to cache.
  	 */
  	function SetCache(values) {
  	  var index = -1,
  	      length = values == null ? 0 : values.length;

  	  this.__data__ = new MapCache;
  	  while (++index < length) {
  	    this.add(values[index]);
  	  }
  	}

  	/**
  	 * Adds `value` to the array cache.
  	 *
  	 * @private
  	 * @name add
  	 * @memberOf SetCache
  	 * @alias push
  	 * @param {*} value The value to cache.
  	 * @returns {Object} Returns the cache instance.
  	 */
  	function setCacheAdd(value) {
  	  this.__data__.set(value, HASH_UNDEFINED);
  	  return this;
  	}

  	/**
  	 * Checks if `value` is in the array cache.
  	 *
  	 * @private
  	 * @name has
  	 * @memberOf SetCache
  	 * @param {*} value The value to search for.
  	 * @returns {number} Returns `true` if `value` is found, else `false`.
  	 */
  	function setCacheHas(value) {
  	  return this.__data__.has(value);
  	}

  	// Add methods to `SetCache`.
  	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  	SetCache.prototype.has = setCacheHas;

  	/**
  	 * Creates a stack cache object to store key-value pairs.
  	 *
  	 * @private
  	 * @constructor
  	 * @param {Array} [entries] The key-value pairs to cache.
  	 */
  	function Stack(entries) {
  	  var data = this.__data__ = new ListCache(entries);
  	  this.size = data.size;
  	}

  	/**
  	 * Removes all key-value entries from the stack.
  	 *
  	 * @private
  	 * @name clear
  	 * @memberOf Stack
  	 */
  	function stackClear() {
  	  this.__data__ = new ListCache;
  	  this.size = 0;
  	}

  	/**
  	 * Removes `key` and its value from the stack.
  	 *
  	 * @private
  	 * @name delete
  	 * @memberOf Stack
  	 * @param {string} key The key of the value to remove.
  	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  	 */
  	function stackDelete(key) {
  	  var data = this.__data__,
  	      result = data['delete'](key);

  	  this.size = data.size;
  	  return result;
  	}

  	/**
  	 * Gets the stack value for `key`.
  	 *
  	 * @private
  	 * @name get
  	 * @memberOf Stack
  	 * @param {string} key The key of the value to get.
  	 * @returns {*} Returns the entry value.
  	 */
  	function stackGet(key) {
  	  return this.__data__.get(key);
  	}

  	/**
  	 * Checks if a stack value for `key` exists.
  	 *
  	 * @private
  	 * @name has
  	 * @memberOf Stack
  	 * @param {string} key The key of the entry to check.
  	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  	 */
  	function stackHas(key) {
  	  return this.__data__.has(key);
  	}

  	/**
  	 * Sets the stack `key` to `value`.
  	 *
  	 * @private
  	 * @name set
  	 * @memberOf Stack
  	 * @param {string} key The key of the value to set.
  	 * @param {*} value The value to set.
  	 * @returns {Object} Returns the stack cache instance.
  	 */
  	function stackSet(key, value) {
  	  var data = this.__data__;
  	  if (data instanceof ListCache) {
  	    var pairs = data.__data__;
  	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
  	      pairs.push([key, value]);
  	      this.size = ++data.size;
  	      return this;
  	    }
  	    data = this.__data__ = new MapCache(pairs);
  	  }
  	  data.set(key, value);
  	  this.size = data.size;
  	  return this;
  	}

  	// Add methods to `Stack`.
  	Stack.prototype.clear = stackClear;
  	Stack.prototype['delete'] = stackDelete;
  	Stack.prototype.get = stackGet;
  	Stack.prototype.has = stackHas;
  	Stack.prototype.set = stackSet;

  	/**
  	 * Creates an array of the enumerable property names of the array-like `value`.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @param {boolean} inherited Specify returning inherited property names.
  	 * @returns {Array} Returns the array of property names.
  	 */
  	function arrayLikeKeys(value, inherited) {
  	  var isArr = isArray(value),
  	      isArg = !isArr && isArguments(value),
  	      isBuff = !isArr && !isArg && isBuffer(value),
  	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
  	      skipIndexes = isArr || isArg || isBuff || isType,
  	      result = skipIndexes ? baseTimes(value.length, String) : [],
  	      length = result.length;

  	  for (var key in value) {
  	    if ((hasOwnProperty.call(value, key)) &&
  	        !(skipIndexes && (
  	           // Safari 9 has enumerable `arguments.length` in strict mode.
  	           key == 'length' ||
  	           // Node.js 0.10 has enumerable non-index properties on buffers.
  	           (isBuff && (key == 'offset' || key == 'parent')) ||
  	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
  	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
  	           // Skip index properties.
  	           isIndex(key, length)
  	        ))) {
  	      result.push(key);
  	    }
  	  }
  	  return result;
  	}

  	/**
  	 * Gets the index at which the `key` is found in `array` of key-value pairs.
  	 *
  	 * @private
  	 * @param {Array} array The array to inspect.
  	 * @param {*} key The key to search for.
  	 * @returns {number} Returns the index of the matched value, else `-1`.
  	 */
  	function assocIndexOf(array, key) {
  	  var length = array.length;
  	  while (length--) {
  	    if (eq(array[length][0], key)) {
  	      return length;
  	    }
  	  }
  	  return -1;
  	}

  	/**
  	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
  	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
  	 * symbols of `object`.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @param {Function} keysFunc The function to get the keys of `object`.
  	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
  	 * @returns {Array} Returns the array of property names and symbols.
  	 */
  	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  	  var result = keysFunc(object);
  	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  	}

  	/**
  	 * The base implementation of `getTag` without fallbacks for buggy environments.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @returns {string} Returns the `toStringTag`.
  	 */
  	function baseGetTag(value) {
  	  if (value == null) {
  	    return value === undefined ? undefinedTag : nullTag;
  	  }
  	  return (symToStringTag && symToStringTag in Object(value))
  	    ? getRawTag(value)
  	    : objectToString(value);
  	}

  	/**
  	 * The base implementation of `_.isArguments`.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
  	 */
  	function baseIsArguments(value) {
  	  return isObjectLike(value) && baseGetTag(value) == argsTag;
  	}

  	/**
  	 * The base implementation of `_.isEqual` which supports partial comparisons
  	 * and tracks traversed objects.
  	 *
  	 * @private
  	 * @param {*} value The value to compare.
  	 * @param {*} other The other value to compare.
  	 * @param {boolean} bitmask The bitmask flags.
  	 *  1 - Unordered comparison
  	 *  2 - Partial comparison
  	 * @param {Function} [customizer] The function to customize comparisons.
  	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
  	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
  	 */
  	function baseIsEqual(value, other, bitmask, customizer, stack) {
  	  if (value === other) {
  	    return true;
  	  }
  	  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
  	    return value !== value && other !== other;
  	  }
  	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  	}

  	/**
  	 * A specialized version of `baseIsEqual` for arrays and objects which performs
  	 * deep comparisons and tracks traversed objects enabling objects with circular
  	 * references to be compared.
  	 *
  	 * @private
  	 * @param {Object} object The object to compare.
  	 * @param {Object} other The other object to compare.
  	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
  	 * @param {Function} customizer The function to customize comparisons.
  	 * @param {Function} equalFunc The function to determine equivalents of values.
  	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
  	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
  	 */
  	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  	  var objIsArr = isArray(object),
  	      othIsArr = isArray(other),
  	      objTag = objIsArr ? arrayTag : getTag(object),
  	      othTag = othIsArr ? arrayTag : getTag(other);

  	  objTag = objTag == argsTag ? objectTag : objTag;
  	  othTag = othTag == argsTag ? objectTag : othTag;

  	  var objIsObj = objTag == objectTag,
  	      othIsObj = othTag == objectTag,
  	      isSameTag = objTag == othTag;

  	  if (isSameTag && isBuffer(object)) {
  	    if (!isBuffer(other)) {
  	      return false;
  	    }
  	    objIsArr = true;
  	    objIsObj = false;
  	  }
  	  if (isSameTag && !objIsObj) {
  	    stack || (stack = new Stack);
  	    return (objIsArr || isTypedArray(object))
  	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
  	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  	  }
  	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
  	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
  	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

  	    if (objIsWrapped || othIsWrapped) {
  	      var objUnwrapped = objIsWrapped ? object.value() : object,
  	          othUnwrapped = othIsWrapped ? other.value() : other;

  	      stack || (stack = new Stack);
  	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
  	    }
  	  }
  	  if (!isSameTag) {
  	    return false;
  	  }
  	  stack || (stack = new Stack);
  	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  	}

  	/**
  	 * The base implementation of `_.isNative` without bad shim checks.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a native function,
  	 *  else `false`.
  	 */
  	function baseIsNative(value) {
  	  if (!isObject(value) || isMasked(value)) {
  	    return false;
  	  }
  	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  	  return pattern.test(toSource(value));
  	}

  	/**
  	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
  	 */
  	function baseIsTypedArray(value) {
  	  return isObjectLike(value) &&
  	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  	}

  	/**
  	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property names.
  	 */
  	function baseKeys(object) {
  	  if (!isPrototype(object)) {
  	    return nativeKeys(object);
  	  }
  	  var result = [];
  	  for (var key in Object(object)) {
  	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
  	      result.push(key);
  	    }
  	  }
  	  return result;
  	}

  	/**
  	 * A specialized version of `baseIsEqualDeep` for arrays with support for
  	 * partial deep comparisons.
  	 *
  	 * @private
  	 * @param {Array} array The array to compare.
  	 * @param {Array} other The other array to compare.
  	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
  	 * @param {Function} customizer The function to customize comparisons.
  	 * @param {Function} equalFunc The function to determine equivalents of values.
  	 * @param {Object} stack Tracks traversed `array` and `other` objects.
  	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
  	 */
  	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
  	      arrLength = array.length,
  	      othLength = other.length;

  	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
  	    return false;
  	  }
  	  // Assume cyclic values are equal.
  	  var stacked = stack.get(array);
  	  if (stacked && stack.get(other)) {
  	    return stacked == other;
  	  }
  	  var index = -1,
  	      result = true,
  	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  	  stack.set(array, other);
  	  stack.set(other, array);

  	  // Ignore non-index properties.
  	  while (++index < arrLength) {
  	    var arrValue = array[index],
  	        othValue = other[index];

  	    if (customizer) {
  	      var compared = isPartial
  	        ? customizer(othValue, arrValue, index, other, array, stack)
  	        : customizer(arrValue, othValue, index, array, other, stack);
  	    }
  	    if (compared !== undefined) {
  	      if (compared) {
  	        continue;
  	      }
  	      result = false;
  	      break;
  	    }
  	    // Recursively compare arrays (susceptible to call stack limits).
  	    if (seen) {
  	      if (!arraySome(other, function(othValue, othIndex) {
  	            if (!cacheHas(seen, othIndex) &&
  	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
  	              return seen.push(othIndex);
  	            }
  	          })) {
  	        result = false;
  	        break;
  	      }
  	    } else if (!(
  	          arrValue === othValue ||
  	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
  	        )) {
  	      result = false;
  	      break;
  	    }
  	  }
  	  stack['delete'](array);
  	  stack['delete'](other);
  	  return result;
  	}

  	/**
  	 * A specialized version of `baseIsEqualDeep` for comparing objects of
  	 * the same `toStringTag`.
  	 *
  	 * **Note:** This function only supports comparing values with tags of
  	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
  	 *
  	 * @private
  	 * @param {Object} object The object to compare.
  	 * @param {Object} other The other object to compare.
  	 * @param {string} tag The `toStringTag` of the objects to compare.
  	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
  	 * @param {Function} customizer The function to customize comparisons.
  	 * @param {Function} equalFunc The function to determine equivalents of values.
  	 * @param {Object} stack Tracks traversed `object` and `other` objects.
  	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
  	 */
  	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  	  switch (tag) {
  	    case dataViewTag:
  	      if ((object.byteLength != other.byteLength) ||
  	          (object.byteOffset != other.byteOffset)) {
  	        return false;
  	      }
  	      object = object.buffer;
  	      other = other.buffer;

  	    case arrayBufferTag:
  	      if ((object.byteLength != other.byteLength) ||
  	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
  	        return false;
  	      }
  	      return true;

  	    case boolTag:
  	    case dateTag:
  	    case numberTag:
  	      // Coerce booleans to `1` or `0` and dates to milliseconds.
  	      // Invalid dates are coerced to `NaN`.
  	      return eq(+object, +other);

  	    case errorTag:
  	      return object.name == other.name && object.message == other.message;

  	    case regexpTag:
  	    case stringTag:
  	      // Coerce regexes to strings and treat strings, primitives and objects,
  	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
  	      // for more details.
  	      return object == (other + '');

  	    case mapTag:
  	      var convert = mapToArray;

  	    case setTag:
  	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
  	      convert || (convert = setToArray);

  	      if (object.size != other.size && !isPartial) {
  	        return false;
  	      }
  	      // Assume cyclic values are equal.
  	      var stacked = stack.get(object);
  	      if (stacked) {
  	        return stacked == other;
  	      }
  	      bitmask |= COMPARE_UNORDERED_FLAG;

  	      // Recursively compare objects (susceptible to call stack limits).
  	      stack.set(object, other);
  	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
  	      stack['delete'](object);
  	      return result;

  	    case symbolTag:
  	      if (symbolValueOf) {
  	        return symbolValueOf.call(object) == symbolValueOf.call(other);
  	      }
  	  }
  	  return false;
  	}

  	/**
  	 * A specialized version of `baseIsEqualDeep` for objects with support for
  	 * partial deep comparisons.
  	 *
  	 * @private
  	 * @param {Object} object The object to compare.
  	 * @param {Object} other The other object to compare.
  	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
  	 * @param {Function} customizer The function to customize comparisons.
  	 * @param {Function} equalFunc The function to determine equivalents of values.
  	 * @param {Object} stack Tracks traversed `object` and `other` objects.
  	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
  	 */
  	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
  	      objProps = getAllKeys(object),
  	      objLength = objProps.length,
  	      othProps = getAllKeys(other),
  	      othLength = othProps.length;

  	  if (objLength != othLength && !isPartial) {
  	    return false;
  	  }
  	  var index = objLength;
  	  while (index--) {
  	    var key = objProps[index];
  	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
  	      return false;
  	    }
  	  }
  	  // Assume cyclic values are equal.
  	  var stacked = stack.get(object);
  	  if (stacked && stack.get(other)) {
  	    return stacked == other;
  	  }
  	  var result = true;
  	  stack.set(object, other);
  	  stack.set(other, object);

  	  var skipCtor = isPartial;
  	  while (++index < objLength) {
  	    key = objProps[index];
  	    var objValue = object[key],
  	        othValue = other[key];

  	    if (customizer) {
  	      var compared = isPartial
  	        ? customizer(othValue, objValue, key, other, object, stack)
  	        : customizer(objValue, othValue, key, object, other, stack);
  	    }
  	    // Recursively compare objects (susceptible to call stack limits).
  	    if (!(compared === undefined
  	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
  	          : compared
  	        )) {
  	      result = false;
  	      break;
  	    }
  	    skipCtor || (skipCtor = key == 'constructor');
  	  }
  	  if (result && !skipCtor) {
  	    var objCtor = object.constructor,
  	        othCtor = other.constructor;

  	    // Non `Object` object instances with different constructors are not equal.
  	    if (objCtor != othCtor &&
  	        ('constructor' in object && 'constructor' in other) &&
  	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
  	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
  	      result = false;
  	    }
  	  }
  	  stack['delete'](object);
  	  stack['delete'](other);
  	  return result;
  	}

  	/**
  	 * Creates an array of own enumerable property names and symbols of `object`.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property names and symbols.
  	 */
  	function getAllKeys(object) {
  	  return baseGetAllKeys(object, keys, getSymbols);
  	}

  	/**
  	 * Gets the data for `map`.
  	 *
  	 * @private
  	 * @param {Object} map The map to query.
  	 * @param {string} key The reference key.
  	 * @returns {*} Returns the map data.
  	 */
  	function getMapData(map, key) {
  	  var data = map.__data__;
  	  return isKeyable(key)
  	    ? data[typeof key == 'string' ? 'string' : 'hash']
  	    : data.map;
  	}

  	/**
  	 * Gets the native function at `key` of `object`.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @param {string} key The key of the method to get.
  	 * @returns {*} Returns the function if it's native, else `undefined`.
  	 */
  	function getNative(object, key) {
  	  var value = getValue(object, key);
  	  return baseIsNative(value) ? value : undefined;
  	}

  	/**
  	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @returns {string} Returns the raw `toStringTag`.
  	 */
  	function getRawTag(value) {
  	  var isOwn = hasOwnProperty.call(value, symToStringTag),
  	      tag = value[symToStringTag];

  	  try {
  	    value[symToStringTag] = undefined;
  	    var unmasked = true;
  	  } catch (e) {}

  	  var result = nativeObjectToString.call(value);
  	  if (unmasked) {
  	    if (isOwn) {
  	      value[symToStringTag] = tag;
  	    } else {
  	      delete value[symToStringTag];
  	    }
  	  }
  	  return result;
  	}

  	/**
  	 * Creates an array of the own enumerable symbols of `object`.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of symbols.
  	 */
  	var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  	  if (object == null) {
  	    return [];
  	  }
  	  object = Object(object);
  	  return arrayFilter(nativeGetSymbols(object), function(symbol) {
  	    return propertyIsEnumerable.call(object, symbol);
  	  });
  	};

  	/**
  	 * Gets the `toStringTag` of `value`.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @returns {string} Returns the `toStringTag`.
  	 */
  	var getTag = baseGetTag;

  	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
  	    (Map && getTag(new Map) != mapTag) ||
  	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
  	    (Set && getTag(new Set) != setTag) ||
  	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  	  getTag = function(value) {
  	    var result = baseGetTag(value),
  	        Ctor = result == objectTag ? value.constructor : undefined,
  	        ctorString = Ctor ? toSource(Ctor) : '';

  	    if (ctorString) {
  	      switch (ctorString) {
  	        case dataViewCtorString: return dataViewTag;
  	        case mapCtorString: return mapTag;
  	        case promiseCtorString: return promiseTag;
  	        case setCtorString: return setTag;
  	        case weakMapCtorString: return weakMapTag;
  	      }
  	    }
  	    return result;
  	  };
  	}

  	/**
  	 * Checks if `value` is a valid array-like index.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
  	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
  	 */
  	function isIndex(value, length) {
  	  length = length == null ? MAX_SAFE_INTEGER : length;
  	  return !!length &&
  	    (typeof value == 'number' || reIsUint.test(value)) &&
  	    (value > -1 && value % 1 == 0 && value < length);
  	}

  	/**
  	 * Checks if `value` is suitable for use as unique object key.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
  	 */
  	function isKeyable(value) {
  	  var type = typeof value;
  	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
  	    ? (value !== '__proto__')
  	    : (value === null);
  	}

  	/**
  	 * Checks if `func` has its source masked.
  	 *
  	 * @private
  	 * @param {Function} func The function to check.
  	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
  	 */
  	function isMasked(func) {
  	  return !!maskSrcKey && (maskSrcKey in func);
  	}

  	/**
  	 * Checks if `value` is likely a prototype object.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
  	 */
  	function isPrototype(value) {
  	  var Ctor = value && value.constructor,
  	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  	  return value === proto;
  	}

  	/**
  	 * Converts `value` to a string using `Object.prototype.toString`.
  	 *
  	 * @private
  	 * @param {*} value The value to convert.
  	 * @returns {string} Returns the converted string.
  	 */
  	function objectToString(value) {
  	  return nativeObjectToString.call(value);
  	}

  	/**
  	 * Converts `func` to its source code.
  	 *
  	 * @private
  	 * @param {Function} func The function to convert.
  	 * @returns {string} Returns the source code.
  	 */
  	function toSource(func) {
  	  if (func != null) {
  	    try {
  	      return funcToString.call(func);
  	    } catch (e) {}
  	    try {
  	      return (func + '');
  	    } catch (e) {}
  	  }
  	  return '';
  	}

  	/**
  	 * Performs a
  	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
  	 * comparison between two values to determine if they are equivalent.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to compare.
  	 * @param {*} other The other value to compare.
  	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
  	 * @example
  	 *
  	 * var object = { 'a': 1 };
  	 * var other = { 'a': 1 };
  	 *
  	 * _.eq(object, object);
  	 * // => true
  	 *
  	 * _.eq(object, other);
  	 * // => false
  	 *
  	 * _.eq('a', 'a');
  	 * // => true
  	 *
  	 * _.eq('a', Object('a'));
  	 * // => false
  	 *
  	 * _.eq(NaN, NaN);
  	 * // => true
  	 */
  	function eq(value, other) {
  	  return value === other || (value !== value && other !== other);
  	}

  	/**
  	 * Checks if `value` is likely an `arguments` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
  	 *  else `false`.
  	 * @example
  	 *
  	 * _.isArguments(function() { return arguments; }());
  	 * // => true
  	 *
  	 * _.isArguments([1, 2, 3]);
  	 * // => false
  	 */
  	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
  	    !propertyIsEnumerable.call(value, 'callee');
  	};

  	/**
  	 * Checks if `value` is classified as an `Array` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
  	 * @example
  	 *
  	 * _.isArray([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArray(document.body.children);
  	 * // => false
  	 *
  	 * _.isArray('abc');
  	 * // => false
  	 *
  	 * _.isArray(_.noop);
  	 * // => false
  	 */
  	var isArray = Array.isArray;

  	/**
  	 * Checks if `value` is array-like. A value is considered array-like if it's
  	 * not a function and has a `value.length` that's an integer greater than or
  	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
  	 * @example
  	 *
  	 * _.isArrayLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArrayLike(document.body.children);
  	 * // => true
  	 *
  	 * _.isArrayLike('abc');
  	 * // => true
  	 *
  	 * _.isArrayLike(_.noop);
  	 * // => false
  	 */
  	function isArrayLike(value) {
  	  return value != null && isLength(value.length) && !isFunction(value);
  	}

  	/**
  	 * Checks if `value` is a buffer.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.3.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
  	 * @example
  	 *
  	 * _.isBuffer(new Buffer(2));
  	 * // => true
  	 *
  	 * _.isBuffer(new Uint8Array(2));
  	 * // => false
  	 */
  	var isBuffer = nativeIsBuffer || stubFalse;

  	/**
  	 * Performs a deep comparison between two values to determine if they are
  	 * equivalent.
  	 *
  	 * **Note:** This method supports comparing arrays, array buffers, booleans,
  	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
  	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
  	 * by their own, not inherited, enumerable properties. Functions and DOM
  	 * nodes are compared by strict equality, i.e. `===`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to compare.
  	 * @param {*} other The other value to compare.
  	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
  	 * @example
  	 *
  	 * var object = { 'a': 1 };
  	 * var other = { 'a': 1 };
  	 *
  	 * _.isEqual(object, other);
  	 * // => true
  	 *
  	 * object === other;
  	 * // => false
  	 */
  	function isEqual(value, other) {
  	  return baseIsEqual(value, other);
  	}

  	/**
  	 * Checks if `value` is classified as a `Function` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
  	 * @example
  	 *
  	 * _.isFunction(_);
  	 * // => true
  	 *
  	 * _.isFunction(/abc/);
  	 * // => false
  	 */
  	function isFunction(value) {
  	  if (!isObject(value)) {
  	    return false;
  	  }
  	  // The use of `Object#toString` avoids issues with the `typeof` operator
  	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  	  var tag = baseGetTag(value);
  	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  	}

  	/**
  	 * Checks if `value` is a valid array-like length.
  	 *
  	 * **Note:** This method is loosely based on
  	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
  	 * @example
  	 *
  	 * _.isLength(3);
  	 * // => true
  	 *
  	 * _.isLength(Number.MIN_VALUE);
  	 * // => false
  	 *
  	 * _.isLength(Infinity);
  	 * // => false
  	 *
  	 * _.isLength('3');
  	 * // => false
  	 */
  	function isLength(value) {
  	  return typeof value == 'number' &&
  	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  	}

  	/**
  	 * Checks if `value` is the
  	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
  	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
  	 * @example
  	 *
  	 * _.isObject({});
  	 * // => true
  	 *
  	 * _.isObject([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObject(_.noop);
  	 * // => true
  	 *
  	 * _.isObject(null);
  	 * // => false
  	 */
  	function isObject(value) {
  	  var type = typeof value;
  	  return value != null && (type == 'object' || type == 'function');
  	}

  	/**
  	 * Checks if `value` is object-like. A value is object-like if it's not `null`
  	 * and has a `typeof` result of "object".
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
  	 * @example
  	 *
  	 * _.isObjectLike({});
  	 * // => true
  	 *
  	 * _.isObjectLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObjectLike(_.noop);
  	 * // => false
  	 *
  	 * _.isObjectLike(null);
  	 * // => false
  	 */
  	function isObjectLike(value) {
  	  return value != null && typeof value == 'object';
  	}

  	/**
  	 * Checks if `value` is classified as a typed array.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 3.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
  	 * @example
  	 *
  	 * _.isTypedArray(new Uint8Array);
  	 * // => true
  	 *
  	 * _.isTypedArray([]);
  	 * // => false
  	 */
  	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  	/**
  	 * Creates an array of the own enumerable property names of `object`.
  	 *
  	 * **Note:** Non-object values are coerced to objects. See the
  	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
  	 * for more details.
  	 *
  	 * @static
  	 * @since 0.1.0
  	 * @memberOf _
  	 * @category Object
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property names.
  	 * @example
  	 *
  	 * function Foo() {
  	 *   this.a = 1;
  	 *   this.b = 2;
  	 * }
  	 *
  	 * Foo.prototype.c = 3;
  	 *
  	 * _.keys(new Foo);
  	 * // => ['a', 'b'] (iteration order is not guaranteed)
  	 *
  	 * _.keys('hi');
  	 * // => ['0', '1']
  	 */
  	function keys(object) {
  	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  	}

  	/**
  	 * This method returns a new empty array.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.13.0
  	 * @category Util
  	 * @returns {Array} Returns the new empty array.
  	 * @example
  	 *
  	 * var arrays = _.times(2, _.stubArray);
  	 *
  	 * console.log(arrays);
  	 * // => [[], []]
  	 *
  	 * console.log(arrays[0] === arrays[1]);
  	 * // => false
  	 */
  	function stubArray() {
  	  return [];
  	}

  	/**
  	 * This method returns `false`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.13.0
  	 * @category Util
  	 * @returns {boolean} Returns `false`.
  	 * @example
  	 *
  	 * _.times(2, _.stubFalse);
  	 * // => [false, false]
  	 */
  	function stubFalse() {
  	  return false;
  	}

  	module.exports = isEqual; 
  } (lodash_isequal, lodash_isequal.exports));

  var lodash_isequalExports = lodash_isequal.exports;

  var AttributeMap$1 = {};

  Object.defineProperty(AttributeMap$1, "__esModule", { value: true });
  const cloneDeep = lodash_clonedeepExports;
  const isEqual = lodash_isequalExports;
  var AttributeMap;
  (function (AttributeMap) {
      function compose(a = {}, b = {}, keepNull = false) {
          if (typeof a !== 'object') {
              a = {};
          }
          if (typeof b !== 'object') {
              b = {};
          }
          let attributes = cloneDeep(b);
          if (!keepNull) {
              attributes = Object.keys(attributes).reduce((copy, key) => {
                  if (attributes[key] != null) {
                      copy[key] = attributes[key];
                  }
                  return copy;
              }, {});
          }
          for (const key in a) {
              if (a[key] !== undefined && b[key] === undefined) {
                  attributes[key] = a[key];
              }
          }
          return Object.keys(attributes).length > 0 ? attributes : undefined;
      }
      AttributeMap.compose = compose;
      function diff(a = {}, b = {}) {
          if (typeof a !== 'object') {
              a = {};
          }
          if (typeof b !== 'object') {
              b = {};
          }
          const attributes = Object.keys(a)
              .concat(Object.keys(b))
              .reduce((attrs, key) => {
              if (!isEqual(a[key], b[key])) {
                  attrs[key] = b[key] === undefined ? null : b[key];
              }
              return attrs;
          }, {});
          return Object.keys(attributes).length > 0 ? attributes : undefined;
      }
      AttributeMap.diff = diff;
      function invert(attr = {}, base = {}) {
          attr = attr || {};
          const baseInverted = Object.keys(base).reduce((memo, key) => {
              if (base[key] !== attr[key] && attr[key] !== undefined) {
                  memo[key] = base[key];
              }
              return memo;
          }, {});
          return Object.keys(attr).reduce((memo, key) => {
              if (attr[key] !== base[key] && base[key] === undefined) {
                  memo[key] = null;
              }
              return memo;
          }, baseInverted);
      }
      AttributeMap.invert = invert;
      function transform(a, b, priority = false) {
          if (typeof a !== 'object') {
              return b;
          }
          if (typeof b !== 'object') {
              return undefined;
          }
          if (!priority) {
              return b; // b simply overwrites us without priority
          }
          const attributes = Object.keys(b).reduce((attrs, key) => {
              if (a[key] === undefined) {
                  attrs[key] = b[key]; // null is a valid value
              }
              return attrs;
          }, {});
          return Object.keys(attributes).length > 0 ? attributes : undefined;
      }
      AttributeMap.transform = transform;
  })(AttributeMap || (AttributeMap = {}));
  AttributeMap$1.default = AttributeMap;

  var Op$1 = {};

  Object.defineProperty(Op$1, "__esModule", { value: true });
  var Op;
  (function (Op) {
      function length(op) {
          if (typeof op.delete === 'number') {
              return op.delete;
          }
          else if (typeof op.retain === 'number') {
              return op.retain;
          }
          else if (typeof op.retain === 'object' && op.retain !== null) {
              return 1;
          }
          else {
              return typeof op.insert === 'string' ? op.insert.length : 1;
          }
      }
      Op.length = length;
  })(Op || (Op = {}));
  Op$1.default = Op;

  var OpIterator = {};

  Object.defineProperty(OpIterator, "__esModule", { value: true });
  const Op_1 = Op$1;
  class Iterator {
      constructor(ops) {
          this.ops = ops;
          this.index = 0;
          this.offset = 0;
      }
      hasNext() {
          return this.peekLength() < Infinity;
      }
      next(length) {
          if (!length) {
              length = Infinity;
          }
          const nextOp = this.ops[this.index];
          if (nextOp) {
              const offset = this.offset;
              const opLength = Op_1.default.length(nextOp);
              if (length >= opLength - offset) {
                  length = opLength - offset;
                  this.index += 1;
                  this.offset = 0;
              }
              else {
                  this.offset += length;
              }
              if (typeof nextOp.delete === 'number') {
                  return { delete: length };
              }
              else {
                  const retOp = {};
                  if (nextOp.attributes) {
                      retOp.attributes = nextOp.attributes;
                  }
                  if (typeof nextOp.retain === 'number') {
                      retOp.retain = length;
                  }
                  else if (typeof nextOp.retain === 'object' &&
                      nextOp.retain !== null) {
                      // offset should === 0, length should === 1
                      retOp.retain = nextOp.retain;
                  }
                  else if (typeof nextOp.insert === 'string') {
                      retOp.insert = nextOp.insert.substr(offset, length);
                  }
                  else {
                      // offset should === 0, length should === 1
                      retOp.insert = nextOp.insert;
                  }
                  return retOp;
              }
          }
          else {
              return { retain: Infinity };
          }
      }
      peek() {
          return this.ops[this.index];
      }
      peekLength() {
          if (this.ops[this.index]) {
              // Should never return 0 if our index is being managed correctly
              return Op_1.default.length(this.ops[this.index]) - this.offset;
          }
          else {
              return Infinity;
          }
      }
      peekType() {
          const op = this.ops[this.index];
          if (op) {
              if (typeof op.delete === 'number') {
                  return 'delete';
              }
              else if (typeof op.retain === 'number' ||
                  (typeof op.retain === 'object' && op.retain !== null)) {
                  return 'retain';
              }
              else {
                  return 'insert';
              }
          }
          return 'retain';
      }
      rest() {
          if (!this.hasNext()) {
              return [];
          }
          else if (this.offset === 0) {
              return this.ops.slice(this.index);
          }
          else {
              const offset = this.offset;
              const index = this.index;
              const next = this.next();
              const rest = this.ops.slice(this.index);
              this.offset = offset;
              this.index = index;
              return [next].concat(rest);
          }
      }
  }
  OpIterator.default = Iterator;

  (function (module, exports) {
  	Object.defineProperty(exports, "__esModule", { value: true });
  	exports.AttributeMap = exports.OpIterator = exports.Op = void 0;
  	const diff = diff_1;
  	const cloneDeep = lodash_clonedeepExports;
  	const isEqual = lodash_isequalExports;
  	const AttributeMap_1 = AttributeMap$1;
  	exports.AttributeMap = AttributeMap_1.default;
  	const Op_1 = Op$1;
  	exports.Op = Op_1.default;
  	const OpIterator_1 = OpIterator;
  	exports.OpIterator = OpIterator_1.default;
  	const NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()
  	const getEmbedTypeAndData = (a, b) => {
  	    if (typeof a !== 'object' || a === null) {
  	        throw new Error(`cannot retain a ${typeof a}`);
  	    }
  	    if (typeof b !== 'object' || b === null) {
  	        throw new Error(`cannot retain a ${typeof b}`);
  	    }
  	    const embedType = Object.keys(a)[0];
  	    if (!embedType || embedType !== Object.keys(b)[0]) {
  	        throw new Error(`embed types not matched: ${embedType} != ${Object.keys(b)[0]}`);
  	    }
  	    return [embedType, a[embedType], b[embedType]];
  	};
  	class Delta {
  	    constructor(ops) {
  	        // Assume we are given a well formed ops
  	        if (Array.isArray(ops)) {
  	            this.ops = ops;
  	        }
  	        else if (ops != null && Array.isArray(ops.ops)) {
  	            this.ops = ops.ops;
  	        }
  	        else {
  	            this.ops = [];
  	        }
  	    }
  	    static registerEmbed(embedType, handler) {
  	        this.handlers[embedType] = handler;
  	    }
  	    static unregisterEmbed(embedType) {
  	        delete this.handlers[embedType];
  	    }
  	    static getHandler(embedType) {
  	        const handler = this.handlers[embedType];
  	        if (!handler) {
  	            throw new Error(`no handlers for embed type "${embedType}"`);
  	        }
  	        return handler;
  	    }
  	    insert(arg, attributes) {
  	        const newOp = {};
  	        if (typeof arg === 'string' && arg.length === 0) {
  	            return this;
  	        }
  	        newOp.insert = arg;
  	        if (attributes != null &&
  	            typeof attributes === 'object' &&
  	            Object.keys(attributes).length > 0) {
  	            newOp.attributes = attributes;
  	        }
  	        return this.push(newOp);
  	    }
  	    delete(length) {
  	        if (length <= 0) {
  	            return this;
  	        }
  	        return this.push({ delete: length });
  	    }
  	    retain(length, attributes) {
  	        if (typeof length === 'number' && length <= 0) {
  	            return this;
  	        }
  	        const newOp = { retain: length };
  	        if (attributes != null &&
  	            typeof attributes === 'object' &&
  	            Object.keys(attributes).length > 0) {
  	            newOp.attributes = attributes;
  	        }
  	        return this.push(newOp);
  	    }
  	    push(newOp) {
  	        let index = this.ops.length;
  	        let lastOp = this.ops[index - 1];
  	        newOp = cloneDeep(newOp);
  	        if (typeof lastOp === 'object') {
  	            if (typeof newOp.delete === 'number' &&
  	                typeof lastOp.delete === 'number') {
  	                this.ops[index - 1] = { delete: lastOp.delete + newOp.delete };
  	                return this;
  	            }
  	            // Since it does not matter if we insert before or after deleting at the same index,
  	            // always prefer to insert first
  	            if (typeof lastOp.delete === 'number' && newOp.insert != null) {
  	                index -= 1;
  	                lastOp = this.ops[index - 1];
  	                if (typeof lastOp !== 'object') {
  	                    this.ops.unshift(newOp);
  	                    return this;
  	                }
  	            }
  	            if (isEqual(newOp.attributes, lastOp.attributes)) {
  	                if (typeof newOp.insert === 'string' &&
  	                    typeof lastOp.insert === 'string') {
  	                    this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
  	                    if (typeof newOp.attributes === 'object') {
  	                        this.ops[index - 1].attributes = newOp.attributes;
  	                    }
  	                    return this;
  	                }
  	                else if (typeof newOp.retain === 'number' &&
  	                    typeof lastOp.retain === 'number') {
  	                    this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
  	                    if (typeof newOp.attributes === 'object') {
  	                        this.ops[index - 1].attributes = newOp.attributes;
  	                    }
  	                    return this;
  	                }
  	            }
  	        }
  	        if (index === this.ops.length) {
  	            this.ops.push(newOp);
  	        }
  	        else {
  	            this.ops.splice(index, 0, newOp);
  	        }
  	        return this;
  	    }
  	    chop() {
  	        const lastOp = this.ops[this.ops.length - 1];
  	        if (lastOp && typeof lastOp.retain === 'number' && !lastOp.attributes) {
  	            this.ops.pop();
  	        }
  	        return this;
  	    }
  	    filter(predicate) {
  	        return this.ops.filter(predicate);
  	    }
  	    forEach(predicate) {
  	        this.ops.forEach(predicate);
  	    }
  	    map(predicate) {
  	        return this.ops.map(predicate);
  	    }
  	    partition(predicate) {
  	        const passed = [];
  	        const failed = [];
  	        this.forEach((op) => {
  	            const target = predicate(op) ? passed : failed;
  	            target.push(op);
  	        });
  	        return [passed, failed];
  	    }
  	    reduce(predicate, initialValue) {
  	        return this.ops.reduce(predicate, initialValue);
  	    }
  	    changeLength() {
  	        return this.reduce((length, elem) => {
  	            if (elem.insert) {
  	                return length + Op_1.default.length(elem);
  	            }
  	            else if (elem.delete) {
  	                return length - elem.delete;
  	            }
  	            return length;
  	        }, 0);
  	    }
  	    length() {
  	        return this.reduce((length, elem) => {
  	            return length + Op_1.default.length(elem);
  	        }, 0);
  	    }
  	    slice(start = 0, end = Infinity) {
  	        const ops = [];
  	        const iter = new OpIterator_1.default(this.ops);
  	        let index = 0;
  	        while (index < end && iter.hasNext()) {
  	            let nextOp;
  	            if (index < start) {
  	                nextOp = iter.next(start - index);
  	            }
  	            else {
  	                nextOp = iter.next(end - index);
  	                ops.push(nextOp);
  	            }
  	            index += Op_1.default.length(nextOp);
  	        }
  	        return new Delta(ops);
  	    }
  	    compose(other) {
  	        const thisIter = new OpIterator_1.default(this.ops);
  	        const otherIter = new OpIterator_1.default(other.ops);
  	        const ops = [];
  	        const firstOther = otherIter.peek();
  	        if (firstOther != null &&
  	            typeof firstOther.retain === 'number' &&
  	            firstOther.attributes == null) {
  	            let firstLeft = firstOther.retain;
  	            while (thisIter.peekType() === 'insert' &&
  	                thisIter.peekLength() <= firstLeft) {
  	                firstLeft -= thisIter.peekLength();
  	                ops.push(thisIter.next());
  	            }
  	            if (firstOther.retain - firstLeft > 0) {
  	                otherIter.next(firstOther.retain - firstLeft);
  	            }
  	        }
  	        const delta = new Delta(ops);
  	        while (thisIter.hasNext() || otherIter.hasNext()) {
  	            if (otherIter.peekType() === 'insert') {
  	                delta.push(otherIter.next());
  	            }
  	            else if (thisIter.peekType() === 'delete') {
  	                delta.push(thisIter.next());
  	            }
  	            else {
  	                const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
  	                const thisOp = thisIter.next(length);
  	                const otherOp = otherIter.next(length);
  	                if (otherOp.retain) {
  	                    const newOp = {};
  	                    if (typeof thisOp.retain === 'number') {
  	                        newOp.retain =
  	                            typeof otherOp.retain === 'number' ? length : otherOp.retain;
  	                    }
  	                    else {
  	                        if (typeof otherOp.retain === 'number') {
  	                            if (thisOp.retain == null) {
  	                                newOp.insert = thisOp.insert;
  	                            }
  	                            else {
  	                                newOp.retain = thisOp.retain;
  	                            }
  	                        }
  	                        else {
  	                            const action = thisOp.retain == null ? 'insert' : 'retain';
  	                            const [embedType, thisData, otherData] = getEmbedTypeAndData(thisOp[action], otherOp.retain);
  	                            const handler = Delta.getHandler(embedType);
  	                            newOp[action] = {
  	                                [embedType]: handler.compose(thisData, otherData, action === 'retain'),
  	                            };
  	                        }
  	                    }
  	                    // Preserve null when composing with a retain, otherwise remove it for inserts
  	                    const attributes = AttributeMap_1.default.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
  	                    if (attributes) {
  	                        newOp.attributes = attributes;
  	                    }
  	                    delta.push(newOp);
  	                    // Optimization if rest of other is just retain
  	                    if (!otherIter.hasNext() &&
  	                        isEqual(delta.ops[delta.ops.length - 1], newOp)) {
  	                        const rest = new Delta(thisIter.rest());
  	                        return delta.concat(rest).chop();
  	                    }
  	                    // Other op should be delete, we could be an insert or retain
  	                    // Insert + delete cancels out
  	                }
  	                else if (typeof otherOp.delete === 'number' &&
  	                    (typeof thisOp.retain === 'number' ||
  	                        (typeof thisOp.retain === 'object' && thisOp.retain !== null))) {
  	                    delta.push(otherOp);
  	                }
  	            }
  	        }
  	        return delta.chop();
  	    }
  	    concat(other) {
  	        const delta = new Delta(this.ops.slice());
  	        if (other.ops.length > 0) {
  	            delta.push(other.ops[0]);
  	            delta.ops = delta.ops.concat(other.ops.slice(1));
  	        }
  	        return delta;
  	    }
  	    diff(other, cursor) {
  	        if (this.ops === other.ops) {
  	            return new Delta();
  	        }
  	        const strings = [this, other].map((delta) => {
  	            return delta
  	                .map((op) => {
  	                if (op.insert != null) {
  	                    return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
  	                }
  	                const prep = delta === other ? 'on' : 'with';
  	                throw new Error('diff() called ' + prep + ' non-document');
  	            })
  	                .join('');
  	        });
  	        const retDelta = new Delta();
  	        const diffResult = diff(strings[0], strings[1], cursor, true);
  	        const thisIter = new OpIterator_1.default(this.ops);
  	        const otherIter = new OpIterator_1.default(other.ops);
  	        diffResult.forEach((component) => {
  	            let length = component[1].length;
  	            while (length > 0) {
  	                let opLength = 0;
  	                switch (component[0]) {
  	                    case diff.INSERT:
  	                        opLength = Math.min(otherIter.peekLength(), length);
  	                        retDelta.push(otherIter.next(opLength));
  	                        break;
  	                    case diff.DELETE:
  	                        opLength = Math.min(length, thisIter.peekLength());
  	                        thisIter.next(opLength);
  	                        retDelta.delete(opLength);
  	                        break;
  	                    case diff.EQUAL:
  	                        opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
  	                        const thisOp = thisIter.next(opLength);
  	                        const otherOp = otherIter.next(opLength);
  	                        if (isEqual(thisOp.insert, otherOp.insert)) {
  	                            retDelta.retain(opLength, AttributeMap_1.default.diff(thisOp.attributes, otherOp.attributes));
  	                        }
  	                        else {
  	                            retDelta.push(otherOp).delete(opLength);
  	                        }
  	                        break;
  	                }
  	                length -= opLength;
  	            }
  	        });
  	        return retDelta.chop();
  	    }
  	    eachLine(predicate, newline = '\n') {
  	        const iter = new OpIterator_1.default(this.ops);
  	        let line = new Delta();
  	        let i = 0;
  	        while (iter.hasNext()) {
  	            if (iter.peekType() !== 'insert') {
  	                return;
  	            }
  	            const thisOp = iter.peek();
  	            const start = Op_1.default.length(thisOp) - iter.peekLength();
  	            const index = typeof thisOp.insert === 'string'
  	                ? thisOp.insert.indexOf(newline, start) - start
  	                : -1;
  	            if (index < 0) {
  	                line.push(iter.next());
  	            }
  	            else if (index > 0) {
  	                line.push(iter.next(index));
  	            }
  	            else {
  	                if (predicate(line, iter.next(1).attributes || {}, i) === false) {
  	                    return;
  	                }
  	                i += 1;
  	                line = new Delta();
  	            }
  	        }
  	        if (line.length() > 0) {
  	            predicate(line, {}, i);
  	        }
  	    }
  	    invert(base) {
  	        const inverted = new Delta();
  	        this.reduce((baseIndex, op) => {
  	            if (op.insert) {
  	                inverted.delete(Op_1.default.length(op));
  	            }
  	            else if (typeof op.retain === 'number' && op.attributes == null) {
  	                inverted.retain(op.retain);
  	                return baseIndex + op.retain;
  	            }
  	            else if (op.delete || typeof op.retain === 'number') {
  	                const length = (op.delete || op.retain);
  	                const slice = base.slice(baseIndex, baseIndex + length);
  	                slice.forEach((baseOp) => {
  	                    if (op.delete) {
  	                        inverted.push(baseOp);
  	                    }
  	                    else if (op.retain && op.attributes) {
  	                        inverted.retain(Op_1.default.length(baseOp), AttributeMap_1.default.invert(op.attributes, baseOp.attributes));
  	                    }
  	                });
  	                return baseIndex + length;
  	            }
  	            else if (typeof op.retain === 'object' && op.retain !== null) {
  	                const slice = base.slice(baseIndex, baseIndex + 1);
  	                const baseOp = new OpIterator_1.default(slice.ops).next();
  	                const [embedType, opData, baseOpData] = getEmbedTypeAndData(op.retain, baseOp.insert);
  	                const handler = Delta.getHandler(embedType);
  	                inverted.retain({ [embedType]: handler.invert(opData, baseOpData) }, AttributeMap_1.default.invert(op.attributes, baseOp.attributes));
  	                return baseIndex + 1;
  	            }
  	            return baseIndex;
  	        }, 0);
  	        return inverted.chop();
  	    }
  	    transform(arg, priority = false) {
  	        priority = !!priority;
  	        if (typeof arg === 'number') {
  	            return this.transformPosition(arg, priority);
  	        }
  	        const other = arg;
  	        const thisIter = new OpIterator_1.default(this.ops);
  	        const otherIter = new OpIterator_1.default(other.ops);
  	        const delta = new Delta();
  	        while (thisIter.hasNext() || otherIter.hasNext()) {
  	            if (thisIter.peekType() === 'insert' &&
  	                (priority || otherIter.peekType() !== 'insert')) {
  	                delta.retain(Op_1.default.length(thisIter.next()));
  	            }
  	            else if (otherIter.peekType() === 'insert') {
  	                delta.push(otherIter.next());
  	            }
  	            else {
  	                const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
  	                const thisOp = thisIter.next(length);
  	                const otherOp = otherIter.next(length);
  	                if (thisOp.delete) {
  	                    // Our delete either makes their delete redundant or removes their retain
  	                    continue;
  	                }
  	                else if (otherOp.delete) {
  	                    delta.push(otherOp);
  	                }
  	                else {
  	                    const thisData = thisOp.retain;
  	                    const otherData = otherOp.retain;
  	                    let transformedData = typeof otherData === 'object' && otherData !== null
  	                        ? otherData
  	                        : length;
  	                    if (typeof thisData === 'object' &&
  	                        thisData !== null &&
  	                        typeof otherData === 'object' &&
  	                        otherData !== null) {
  	                        const embedType = Object.keys(thisData)[0];
  	                        if (embedType === Object.keys(otherData)[0]) {
  	                            const handler = Delta.getHandler(embedType);
  	                            if (handler) {
  	                                transformedData = {
  	                                    [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority),
  	                                };
  	                            }
  	                        }
  	                    }
  	                    // We retain either their retain or insert
  	                    delta.retain(transformedData, AttributeMap_1.default.transform(thisOp.attributes, otherOp.attributes, priority));
  	                }
  	            }
  	        }
  	        return delta.chop();
  	    }
  	    transformPosition(index, priority = false) {
  	        priority = !!priority;
  	        const thisIter = new OpIterator_1.default(this.ops);
  	        let offset = 0;
  	        while (thisIter.hasNext() && offset <= index) {
  	            const length = thisIter.peekLength();
  	            const nextType = thisIter.peekType();
  	            thisIter.next();
  	            if (nextType === 'delete') {
  	                index -= Math.min(length, index - offset);
  	                continue;
  	            }
  	            else if (nextType === 'insert' && (offset < index || !priority)) {
  	                index += length;
  	            }
  	            offset += length;
  	        }
  	        return index;
  	    }
  	}
  	Delta.Op = Op_1.default;
  	Delta.OpIterator = OpIterator_1.default;
  	Delta.AttributeMap = AttributeMap_1.default;
  	Delta.handlers = {};
  	exports.default = Delta;
  	{
  	    module.exports = Delta;
  	    module.exports.default = Delta;
  	}
  	
  } (Delta$1, Delta$1.exports));

  var DeltaExports = Delta$1.exports;
  var Delta = /*@__PURE__*/getDefaultExportFromCjs(DeltaExports);

  class Break extends EmbedBlot$1 {
    static value() {
      return undefined;
    }
    optimize() {
      if (this.prev || this.next) {
        this.remove();
      }
    }
    length() {
      return 0;
    }
    value() {
      return '';
    }
  }
  Break.blotName = 'break';
  Break.tagName = 'BR';

  let Text$1 = class Text extends TextBlot$1 {};

  // https://lodash.com/docs#escape
  const entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };
  function escapeText(text) {
    return text.replace(/[&<>"']/g, s => entityMap[s]);
  }

  class Inline extends InlineBlot$1 {
    static allowedChildren = [Inline, Break, EmbedBlot$1, Text$1];
    // Lower index means deeper in the DOM tree, since not found (-1) is for embeds
    static order = ['cursor', 'inline',
    // Must be lower
    'link',
    // Chrome wants <a> to be lower
    'underline', 'strike', 'italic', 'bold', 'script', 'code' // Must be higher
    ];
    static compare(self, other) {
      const selfIndex = Inline.order.indexOf(self);
      const otherIndex = Inline.order.indexOf(other);
      if (selfIndex >= 0 || otherIndex >= 0) {
        return selfIndex - otherIndex;
      }
      if (self === other) {
        return 0;
      }
      if (self < other) {
        return -1;
      }
      return 1;
    }
    formatAt(index, length, name, value) {
      if (Inline.compare(this.statics.blotName, name) < 0 && this.scroll.query(name, Scope.BLOT)) {
        const blot = this.isolate(index, length);
        if (value) {
          blot.wrap(name, value);
        }
      } else {
        super.formatAt(index, length, name, value);
      }
    }
    optimize(context) {
      super.optimize(context);
      if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
        const parent = this.parent.isolate(this.offset(), this.length());
        // @ts-expect-error TODO: make isolate generic
        this.moveChildren(parent);
        parent.wrap(this);
      }
    }
  }

  const NEWLINE_LENGTH = 1;
  class Block extends BlockBlot$1 {
    cache = {};
    delta() {
      if (this.cache.delta == null) {
        this.cache.delta = blockDelta(this);
      }
      return this.cache.delta;
    }
    deleteAt(index, length) {
      super.deleteAt(index, length);
      this.cache = {};
    }
    formatAt(index, length, name, value) {
      if (length <= 0) return;
      if (this.scroll.query(name, Scope.BLOCK)) {
        if (index + length === this.length()) {
          this.format(name, value);
        }
      } else {
        super.formatAt(index, Math.min(length, this.length() - index - 1), name, value);
      }
      this.cache = {};
    }
    insertAt(index, value, def) {
      if (def != null) {
        super.insertAt(index, value, def);
        this.cache = {};
        return;
      }
      if (value.length === 0) return;
      const lines = value.split('\n');
      const text = lines.shift();
      if (text.length > 0) {
        if (index < this.length() - 1 || this.children.tail == null) {
          super.insertAt(Math.min(index, this.length() - 1), text);
        } else {
          this.children.tail.insertAt(this.children.tail.length(), text);
        }
        this.cache = {};
      }
      // TODO: Fix this next time the file is edited.
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      let block = this;
      lines.reduce((lineIndex, line) => {
        // @ts-expect-error Fix me later
        block = block.split(lineIndex, true);
        block.insertAt(0, line);
        return line.length;
      }, index + text.length);
    }
    insertBefore(blot, ref) {
      const {
        head
      } = this.children;
      super.insertBefore(blot, ref);
      if (head instanceof Break) {
        head.remove();
      }
      this.cache = {};
    }
    length() {
      if (this.cache.length == null) {
        this.cache.length = super.length() + NEWLINE_LENGTH;
      }
      return this.cache.length;
    }
    moveChildren(target, ref) {
      super.moveChildren(target, ref);
      this.cache = {};
    }
    optimize(context) {
      super.optimize(context);
      this.cache = {};
    }
    path(index) {
      return super.path(index, true);
    }
    removeChild(child) {
      super.removeChild(child);
      this.cache = {};
    }
    split(index) {
      let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
        const clone = this.clone();
        if (index === 0) {
          this.parent.insertBefore(clone, this);
          return this;
        }
        this.parent.insertBefore(clone, this.next);
        return clone;
      }
      const next = super.split(index, force);
      this.cache = {};
      return next;
    }
  }
  Block.blotName = 'block';
  Block.tagName = 'P';
  Block.defaultChild = Break;
  Block.allowedChildren = [Break, Inline, EmbedBlot$1, Text$1];
  class BlockEmbed extends EmbedBlot$1 {
    attach() {
      super.attach();
      this.attributes = new AttributorStore$1(this.domNode);
    }
    delta() {
      return new Delta().insert(this.value(), {
        ...this.formats(),
        ...this.attributes.values()
      });
    }
    format(name, value) {
      const attribute = this.scroll.query(name, Scope.BLOCK_ATTRIBUTE);
      if (attribute != null) {
        // @ts-expect-error TODO: Scroll#query() should return Attributor when scope is attribute
        this.attributes.attribute(attribute, value);
      }
    }
    formatAt(index, length, name, value) {
      this.format(name, value);
    }
    insertAt(index, value, def) {
      if (def != null) {
        super.insertAt(index, value, def);
        return;
      }
      const lines = value.split('\n');
      const text = lines.pop();
      const blocks = lines.map(line => {
        const block = this.scroll.create(Block.blotName);
        block.insertAt(0, line);
        return block;
      });
      const ref = this.split(index);
      blocks.forEach(block => {
        this.parent.insertBefore(block, ref);
      });
      if (text) {
        this.parent.insertBefore(this.scroll.create('text', text), ref);
      }
    }
  }
  BlockEmbed.scope = Scope.BLOCK_BLOT;
  // It is important for cursor behavior BlockEmbeds use tags that are block level elements

  function blockDelta(blot) {
    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return blot.descendants(LeafBlot$1).reduce((delta, leaf) => {
      if (leaf.length() === 0) {
        return delta;
      }
      return delta.insert(leaf.value(), bubbleFormats(leaf, {}, filter));
    }, new Delta()).insert('\n', bubbleFormats(blot));
  }
  function bubbleFormats(blot) {
    let formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (blot == null) return formats;
    if ('formats' in blot && typeof blot.formats === 'function') {
      formats = {
        ...formats,
        ...blot.formats()
      };
      if (filter) {
        // exclude syntax highlighting from deltas and getFormat()
        delete formats['code-token'];
      }
    }
    if (blot.parent == null || blot.parent.statics.blotName === 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
      return formats;
    }
    return bubbleFormats(blot.parent, formats, filter);
  }

  class Cursor extends EmbedBlot$1 {
    static blotName = 'cursor';
    static className = 'ql-cursor';
    static tagName = 'span';
    static CONTENTS = '\uFEFF'; // Zero width no break space

    static value() {
      return undefined;
    }
    constructor(scroll, domNode, selection) {
      super(scroll, domNode);
      this.selection = selection;
      this.textNode = document.createTextNode(Cursor.CONTENTS);
      this.domNode.appendChild(this.textNode);
      this.savedLength = 0;
    }
    detach() {
      // super.detach() will also clear domNode.__blot
      if (this.parent != null) this.parent.removeChild(this);
    }
    format(name, value) {
      if (this.savedLength !== 0) {
        super.format(name, value);
        return;
      }
      // TODO: Fix this next time the file is edited.
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      let target = this;
      let index = 0;
      while (target != null && target.statics.scope !== Scope.BLOCK_BLOT) {
        index += target.offset(target.parent);
        target = target.parent;
      }
      if (target != null) {
        this.savedLength = Cursor.CONTENTS.length;
        // @ts-expect-error TODO: allow empty context in Parchment
        target.optimize();
        target.formatAt(index, Cursor.CONTENTS.length, name, value);
        this.savedLength = 0;
      }
    }
    index(node, offset) {
      if (node === this.textNode) return 0;
      return super.index(node, offset);
    }
    length() {
      return this.savedLength;
    }
    position() {
      return [this.textNode, this.textNode.data.length];
    }
    remove() {
      super.remove();
      // @ts-expect-error Fix me later
      this.parent = null;
    }
    restore() {
      if (this.selection.composing || this.parent == null) return null;
      const range = this.selection.getNativeRange();
      // Browser may push down styles/nodes inside the cursor blot.
      // https://dvcs.w3.org/hg/editing/raw-file/tip/editing.html#push-down-values
      while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
        // @ts-expect-error Fix me later
        this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
      }
      const prevTextBlot = this.prev instanceof Text$1 ? this.prev : null;
      const prevTextLength = prevTextBlot ? prevTextBlot.length() : 0;
      const nextTextBlot = this.next instanceof Text$1 ? this.next : null;
      // @ts-expect-error TODO: make TextBlot.text public
      const nextText = nextTextBlot ? nextTextBlot.text : '';
      const {
        textNode
      } = this;
      // take text from inside this blot and reset it
      const newText = textNode.data.split(Cursor.CONTENTS).join('');
      textNode.data = Cursor.CONTENTS;

      // proactively merge TextBlots around cursor so that optimization
      // doesn't lose the cursor.  the reason we are here in cursor.restore
      // could be that the user clicked in prevTextBlot or nextTextBlot, or
      // the user typed something.
      let mergedTextBlot;
      if (prevTextBlot) {
        mergedTextBlot = prevTextBlot;
        if (newText || nextTextBlot) {
          prevTextBlot.insertAt(prevTextBlot.length(), newText + nextText);
          if (nextTextBlot) {
            nextTextBlot.remove();
          }
        }
      } else if (nextTextBlot) {
        mergedTextBlot = nextTextBlot;
        nextTextBlot.insertAt(0, newText);
      } else {
        const newTextNode = document.createTextNode(newText);
        mergedTextBlot = this.scroll.create(newTextNode);
        this.parent.insertBefore(mergedTextBlot, this);
      }
      this.remove();
      if (range) {
        // calculate selection to restore
        const remapOffset = (node, offset) => {
          if (prevTextBlot && node === prevTextBlot.domNode) {
            return offset;
          }
          if (node === textNode) {
            return prevTextLength + offset - 1;
          }
          if (nextTextBlot && node === nextTextBlot.domNode) {
            return prevTextLength + newText.length + offset;
          }
          return null;
        };
        const start = remapOffset(range.start.node, range.start.offset);
        const end = remapOffset(range.end.node, range.end.offset);
        if (start !== null && end !== null) {
          return {
            startNode: mergedTextBlot.domNode,
            startOffset: start,
            endNode: mergedTextBlot.domNode,
            endOffset: end
          };
        }
      }
      return null;
    }
    update(mutations, context) {
      if (mutations.some(mutation => {
        return mutation.type === 'characterData' && mutation.target === this.textNode;
      })) {
        const range = this.restore();
        if (range) context.range = range;
      }
    }

    // Avoid .ql-cursor being a descendant of `<a/>`.
    // The reason is Safari pushes down `<a/>` on text insertion.
    // That will cause DOM nodes not sync with the model.
    //
    // For example ({I} is the caret), given the markup:
    //    <a><span class="ql-cursor">\uFEFF{I}</span></a>
    // When typing a char "x", `<a/>` will be pushed down inside the `<span>` first:
    //    <span class="ql-cursor"><a>\uFEFF{I}</a></span>
    // And then "x" will be inserted after `<a/>`:
    //    <span class="ql-cursor"><a>\uFEFF</a>d{I}</span>
    optimize(context) {
      // @ts-expect-error Fix me later
      super.optimize(context);
      let {
        parent
      } = this;
      while (parent) {
        if (parent.domNode.tagName === 'A') {
          this.savedLength = Cursor.CONTENTS.length;
          // @ts-expect-error TODO: make isolate generic
          parent.isolate(this.offset(parent), this.length()).unwrap();
          this.savedLength = 0;
          break;
        }
        parent = parent.parent;
      }
    }
    value() {
      return '';
    }
  }

  var eventemitter3 = {exports: {}};

  (function (module) {

  	var has = Object.prototype.hasOwnProperty
  	  , prefix = '~';

  	/**
  	 * Constructor to create a storage for our `EE` objects.
  	 * An `Events` instance is a plain object whose properties are event names.
  	 *
  	 * @constructor
  	 * @private
  	 */
  	function Events() {}

  	//
  	// We try to not inherit from `Object.prototype`. In some engines creating an
  	// instance in this way is faster than calling `Object.create(null)` directly.
  	// If `Object.create(null)` is not supported we prefix the event names with a
  	// character to make sure that the built-in object properties are not
  	// overridden or used as an attack vector.
  	//
  	if (Object.create) {
  	  Events.prototype = Object.create(null);

  	  //
  	  // This hack is needed because the `__proto__` property is still inherited in
  	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  	  //
  	  if (!new Events().__proto__) prefix = false;
  	}

  	/**
  	 * Representation of a single event listener.
  	 *
  	 * @param {Function} fn The listener function.
  	 * @param {*} context The context to invoke the listener with.
  	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
  	 * @constructor
  	 * @private
  	 */
  	function EE(fn, context, once) {
  	  this.fn = fn;
  	  this.context = context;
  	  this.once = once || false;
  	}

  	/**
  	 * Add a listener for a given event.
  	 *
  	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {*} context The context to invoke the listener with.
  	 * @param {Boolean} once Specify if the listener is a one-time listener.
  	 * @returns {EventEmitter}
  	 * @private
  	 */
  	function addListener(emitter, event, fn, context, once) {
  	  if (typeof fn !== 'function') {
  	    throw new TypeError('The listener must be a function');
  	  }

  	  var listener = new EE(fn, context || emitter, once)
  	    , evt = prefix ? prefix + event : event;

  	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  	  else emitter._events[evt] = [emitter._events[evt], listener];

  	  return emitter;
  	}

  	/**
  	 * Clear event by name.
  	 *
  	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
  	 * @param {(String|Symbol)} evt The Event name.
  	 * @private
  	 */
  	function clearEvent(emitter, evt) {
  	  if (--emitter._eventsCount === 0) emitter._events = new Events();
  	  else delete emitter._events[evt];
  	}

  	/**
  	 * Minimal `EventEmitter` interface that is molded against the Node.js
  	 * `EventEmitter` interface.
  	 *
  	 * @constructor
  	 * @public
  	 */
  	function EventEmitter() {
  	  this._events = new Events();
  	  this._eventsCount = 0;
  	}

  	/**
  	 * Return an array listing the events for which the emitter has registered
  	 * listeners.
  	 *
  	 * @returns {Array}
  	 * @public
  	 */
  	EventEmitter.prototype.eventNames = function eventNames() {
  	  var names = []
  	    , events
  	    , name;

  	  if (this._eventsCount === 0) return names;

  	  for (name in (events = this._events)) {
  	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  	  }

  	  if (Object.getOwnPropertySymbols) {
  	    return names.concat(Object.getOwnPropertySymbols(events));
  	  }

  	  return names;
  	};

  	/**
  	 * Return the listeners registered for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @returns {Array} The registered listeners.
  	 * @public
  	 */
  	EventEmitter.prototype.listeners = function listeners(event) {
  	  var evt = prefix ? prefix + event : event
  	    , handlers = this._events[evt];

  	  if (!handlers) return [];
  	  if (handlers.fn) return [handlers.fn];

  	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
  	    ee[i] = handlers[i].fn;
  	  }

  	  return ee;
  	};

  	/**
  	 * Return the number of listeners listening to a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @returns {Number} The number of listeners.
  	 * @public
  	 */
  	EventEmitter.prototype.listenerCount = function listenerCount(event) {
  	  var evt = prefix ? prefix + event : event
  	    , listeners = this._events[evt];

  	  if (!listeners) return 0;
  	  if (listeners.fn) return 1;
  	  return listeners.length;
  	};

  	/**
  	 * Calls each of the listeners registered for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @returns {Boolean} `true` if the event had listeners, else `false`.
  	 * @public
  	 */
  	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  	  var evt = prefix ? prefix + event : event;

  	  if (!this._events[evt]) return false;

  	  var listeners = this._events[evt]
  	    , len = arguments.length
  	    , args
  	    , i;

  	  if (listeners.fn) {
  	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

  	    switch (len) {
  	      case 1: return listeners.fn.call(listeners.context), true;
  	      case 2: return listeners.fn.call(listeners.context, a1), true;
  	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
  	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
  	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
  	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
  	    }

  	    for (i = 1, args = new Array(len -1); i < len; i++) {
  	      args[i - 1] = arguments[i];
  	    }

  	    listeners.fn.apply(listeners.context, args);
  	  } else {
  	    var length = listeners.length
  	      , j;

  	    for (i = 0; i < length; i++) {
  	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

  	      switch (len) {
  	        case 1: listeners[i].fn.call(listeners[i].context); break;
  	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
  	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
  	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
  	        default:
  	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
  	            args[j - 1] = arguments[j];
  	          }

  	          listeners[i].fn.apply(listeners[i].context, args);
  	      }
  	    }
  	  }

  	  return true;
  	};

  	/**
  	 * Add a listener for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {*} [context=this] The context to invoke the listener with.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.on = function on(event, fn, context) {
  	  return addListener(this, event, fn, context, false);
  	};

  	/**
  	 * Add a one-time listener for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {*} [context=this] The context to invoke the listener with.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.once = function once(event, fn, context) {
  	  return addListener(this, event, fn, context, true);
  	};

  	/**
  	 * Remove the listeners of a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn Only remove the listeners that match this function.
  	 * @param {*} context Only remove the listeners that have this context.
  	 * @param {Boolean} once Only remove one-time listeners.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  	  var evt = prefix ? prefix + event : event;

  	  if (!this._events[evt]) return this;
  	  if (!fn) {
  	    clearEvent(this, evt);
  	    return this;
  	  }

  	  var listeners = this._events[evt];

  	  if (listeners.fn) {
  	    if (
  	      listeners.fn === fn &&
  	      (!once || listeners.once) &&
  	      (!context || listeners.context === context)
  	    ) {
  	      clearEvent(this, evt);
  	    }
  	  } else {
  	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
  	      if (
  	        listeners[i].fn !== fn ||
  	        (once && !listeners[i].once) ||
  	        (context && listeners[i].context !== context)
  	      ) {
  	        events.push(listeners[i]);
  	      }
  	    }

  	    //
  	    // Reset the array, or remove it completely if we have no more listeners.
  	    //
  	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
  	    else clearEvent(this, evt);
  	  }

  	  return this;
  	};

  	/**
  	 * Remove all listeners, or those of the specified event.
  	 *
  	 * @param {(String|Symbol)} [event] The event name.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  	  var evt;

  	  if (event) {
  	    evt = prefix ? prefix + event : event;
  	    if (this._events[evt]) clearEvent(this, evt);
  	  } else {
  	    this._events = new Events();
  	    this._eventsCount = 0;
  	  }

  	  return this;
  	};

  	//
  	// Alias methods names because people roll like that.
  	//
  	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  	//
  	// Expose the prefix.
  	//
  	EventEmitter.prefixed = prefix;

  	//
  	// Allow `EventEmitter` to be imported as module namespace.
  	//
  	EventEmitter.EventEmitter = EventEmitter;

  	//
  	// Expose the module.
  	//
  	{
  	  module.exports = EventEmitter;
  	} 
  } (eventemitter3));

  var eventemitter3Exports = eventemitter3.exports;
  var EventEmitter = /*@__PURE__*/getDefaultExportFromCjs(eventemitter3Exports);

  var instances = new WeakMap();

  const levels = ['error', 'warn', 'log', 'info'];
  let level = 'warn';
  function debug$6(method) {
    if (level) {
      if (levels.indexOf(method) <= levels.indexOf(level)) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        console[method](...args); // eslint-disable-line no-console
      }
    }
  }
  function namespace(ns) {
    return levels.reduce((logger, method) => {
      logger[method] = debug$6.bind(console, method, ns);
      return logger;
    }, {});
  }
  namespace.level = newLevel => {
    level = newLevel;
  };
  debug$6.level = namespace.level;

  const debug$5 = namespace('quill:events');
  const EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];
  EVENTS.forEach(eventName => {
    document.addEventListener(eventName, function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      Array.from(document.querySelectorAll('.ql-container')).forEach(node => {
        const quill = instances.get(node);
        if (quill && quill.emitter) {
          quill.emitter.handleDOM(...args);
        }
      });
    });
  });
  class Emitter extends EventEmitter {
    static events = {
      EDITOR_CHANGE: 'editor-change',
      SCROLL_BEFORE_UPDATE: 'scroll-before-update',
      SCROLL_BLOT_MOUNT: 'scroll-blot-mount',
      SCROLL_BLOT_UNMOUNT: 'scroll-blot-unmount',
      SCROLL_OPTIMIZE: 'scroll-optimize',
      SCROLL_UPDATE: 'scroll-update',
      SCROLL_EMBED_UPDATE: 'scroll-embed-update',
      SELECTION_CHANGE: 'selection-change',
      TEXT_CHANGE: 'text-change',
      COMPOSITION_BEFORE_START: 'composition-before-start',
      COMPOSITION_START: 'composition-start',
      COMPOSITION_BEFORE_END: 'composition-before-end',
      COMPOSITION_END: 'composition-end'
    };
    static sources = {
      API: 'api',
      SILENT: 'silent',
      USER: 'user'
    };
    constructor() {
      super();
      this.domListeners = {};
      this.on('error', debug$5.error);
    }
    emit() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      debug$5.log.call(debug$5, ...args);
      // @ts-expect-error
      return super.emit(...args);
    }
    handleDOM(event) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      (this.domListeners[event.type] || []).forEach(_ref => {
        let {
          node,
          handler
        } = _ref;
        if (event.target === node || node.contains(event.target)) {
          handler(event, ...args);
        }
      });
    }
    listenDOM(eventName, node, handler) {
      if (!this.domListeners[eventName]) {
        this.domListeners[eventName] = [];
      }
      this.domListeners[eventName].push({
        node,
        handler
      });
    }
  }

  const debug$4 = namespace('quill:selection');
  class Range {
    constructor(index) {
      let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this.index = index;
      this.length = length;
    }
  }
  class Selection {
    constructor(scroll, emitter) {
      this.emitter = emitter;
      this.scroll = scroll;
      this.composing = false;
      this.mouseDown = false;
      this.root = this.scroll.domNode;
      // @ts-expect-error
      this.cursor = this.scroll.create('cursor', this);
      // savedRange is last non-null range
      this.savedRange = new Range(0, 0);
      this.lastRange = this.savedRange;
      this.lastNative = null;
      this.handleComposition();
      this.handleDragging();
      this.emitter.listenDOM('selectionchange', document, () => {
        if (!this.mouseDown && !this.composing) {
          setTimeout(this.update.bind(this, Emitter.sources.USER), 1);
        }
      });
      this.emitter.on(Emitter.events.SCROLL_BEFORE_UPDATE, () => {
        if (!this.hasFocus()) return;
        const native = this.getNativeRange();
        if (native == null) return;
        if (native.start.node === this.cursor.textNode) return; // cursor.restore() will handle
        this.emitter.once(Emitter.events.SCROLL_UPDATE, (source, mutations) => {
          try {
            if (this.root.contains(native.start.node) && this.root.contains(native.end.node)) {
              this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
            }
            const triggeredByTyping = mutations.some(mutation => mutation.type === 'characterData' || mutation.type === 'childList' || mutation.type === 'attributes' && mutation.target === this.root);
            this.update(triggeredByTyping ? Emitter.sources.SILENT : source);
          } catch (ignored) {
            // ignore
          }
        });
      });
      this.emitter.on(Emitter.events.SCROLL_OPTIMIZE, (mutations, context) => {
        if (context.range) {
          const {
            startNode,
            startOffset,
            endNode,
            endOffset
          } = context.range;
          this.setNativeRange(startNode, startOffset, endNode, endOffset);
          this.update(Emitter.sources.SILENT);
        }
      });
      this.update(Emitter.sources.SILENT);
    }
    handleComposition() {
      this.emitter.on(Emitter.events.COMPOSITION_BEFORE_START, () => {
        this.composing = true;
      });
      this.emitter.on(Emitter.events.COMPOSITION_END, () => {
        this.composing = false;
        if (this.cursor.parent) {
          const range = this.cursor.restore();
          if (!range) return;
          setTimeout(() => {
            this.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
          }, 1);
        }
      });
    }
    handleDragging() {
      this.emitter.listenDOM('mousedown', document.body, () => {
        this.mouseDown = true;
      });
      this.emitter.listenDOM('mouseup', document.body, () => {
        this.mouseDown = false;
        this.update(Emitter.sources.USER);
      });
    }
    focus() {
      if (this.hasFocus()) return;
      this.root.focus({
        preventScroll: true
      });
      this.setRange(this.savedRange);
    }
    format(format, value) {
      this.scroll.update();
      const nativeRange = this.getNativeRange();
      if (nativeRange == null || !nativeRange.native.collapsed || this.scroll.query(format, Scope.BLOCK)) return;
      if (nativeRange.start.node !== this.cursor.textNode) {
        const blot = this.scroll.find(nativeRange.start.node, false);
        if (blot == null) return;
        // TODO Give blot ability to not split
        if (blot instanceof LeafBlot$1) {
          const after = blot.split(nativeRange.start.offset);
          blot.parent.insertBefore(this.cursor, after);
        } else {
          // @ts-expect-error TODO: nativeRange.start.node doesn't seem to match function signature
          blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
        }
        this.cursor.attach();
      }
      this.cursor.format(format, value);
      this.scroll.optimize();
      this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
      this.update();
    }
    getBounds(index) {
      let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      const scrollLength = this.scroll.length();
      index = Math.min(index, scrollLength - 1);
      length = Math.min(index + length, scrollLength - 1) - index;
      let node;
      let [leaf, offset] = this.scroll.leaf(index);
      if (leaf == null) return null;
      if (length > 0 && offset === leaf.length()) {
        const [next] = this.scroll.leaf(index + 1);
        if (next) {
          const [line] = this.scroll.line(index);
          const [nextLine] = this.scroll.line(index + 1);
          if (line === nextLine) {
            leaf = next;
            offset = 0;
          }
        }
      }
      [node, offset] = leaf.position(offset, true);
      const range = document.createRange();
      if (length > 0) {
        range.setStart(node, offset);
        [leaf, offset] = this.scroll.leaf(index + length);
        if (leaf == null) return null;
        [node, offset] = leaf.position(offset, true);
        range.setEnd(node, offset);
        return range.getBoundingClientRect();
      }
      let side = 'left';
      let rect;
      if (node instanceof Text) {
        // Return null if the text node is empty because it is
        // not able to get a useful client rect:
        // https://github.com/w3c/csswg-drafts/issues/2514.
        // Empty text nodes are most likely caused by TextBlot#optimize()
        // not getting called when editor content changes.
        if (!node.data.length) {
          return null;
        }
        if (offset < node.data.length) {
          range.setStart(node, offset);
          range.setEnd(node, offset + 1);
        } else {
          range.setStart(node, offset - 1);
          range.setEnd(node, offset);
          side = 'right';
        }
        rect = range.getBoundingClientRect();
      } else {
        if (!(leaf.domNode instanceof Element)) return null;
        rect = leaf.domNode.getBoundingClientRect();
        if (offset > 0) side = 'right';
      }
      return {
        bottom: rect.top + rect.height,
        height: rect.height,
        left: rect[side],
        right: rect[side],
        top: rect.top,
        width: 0
      };
    }
    getNativeRange() {
      const selection = document.getSelection();
      if (selection == null || selection.rangeCount <= 0) return null;
      const nativeRange = selection.getRangeAt(0);
      if (nativeRange == null) return null;
      const range = this.normalizeNative(nativeRange);
      debug$4.info('getNativeRange', range);
      return range;
    }
    getRange() {
      const root = this.scroll.domNode;
      if ('isConnected' in root && !root.isConnected) {
        // document.getSelection() forces layout on Blink, so we trend to
        // not calling it.
        return [null, null];
      }
      const normalized = this.getNativeRange();
      if (normalized == null) return [null, null];
      const range = this.normalizedToRange(normalized);
      return [range, normalized];
    }
    hasFocus() {
      return document.activeElement === this.root || document.activeElement != null && contains(this.root, document.activeElement);
    }
    normalizedToRange(range) {
      const positions = [[range.start.node, range.start.offset]];
      if (!range.native.collapsed) {
        positions.push([range.end.node, range.end.offset]);
      }
      const indexes = positions.map(position => {
        const [node, offset] = position;
        const blot = this.scroll.find(node, true);
        // @ts-expect-error Fix me later
        const index = blot.offset(this.scroll);
        if (offset === 0) {
          return index;
        }
        if (blot instanceof LeafBlot$1) {
          return index + blot.index(node, offset);
        }
        // @ts-expect-error Fix me later
        return index + blot.length();
      });
      const end = Math.min(Math.max(...indexes), this.scroll.length() - 1);
      const start = Math.min(end, ...indexes);
      return new Range(start, end - start);
    }
    normalizeNative(nativeRange) {
      if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
        return null;
      }
      const range = {
        start: {
          node: nativeRange.startContainer,
          offset: nativeRange.startOffset
        },
        end: {
          node: nativeRange.endContainer,
          offset: nativeRange.endOffset
        },
        native: nativeRange
      };
      [range.start, range.end].forEach(position => {
        let {
          node,
          offset
        } = position;
        while (!(node instanceof Text) && node.childNodes.length > 0) {
          if (node.childNodes.length > offset) {
            node = node.childNodes[offset];
            offset = 0;
          } else if (node.childNodes.length === offset) {
            // @ts-expect-error Fix me later
            node = node.lastChild;
            if (node instanceof Text) {
              offset = node.data.length;
            } else if (node.childNodes.length > 0) {
              // Container case
              offset = node.childNodes.length;
            } else {
              // Embed case
              offset = node.childNodes.length + 1;
            }
          } else {
            break;
          }
        }
        position.node = node;
        position.offset = offset;
      });
      return range;
    }
    rangeToNative(range) {
      const scrollLength = this.scroll.length();
      const getPosition = (index, inclusive) => {
        index = Math.min(scrollLength - 1, index);
        const [leaf, leafOffset] = this.scroll.leaf(index);
        return leaf ? leaf.position(leafOffset, inclusive) : [null, -1];
      };
      return [...getPosition(range.index, false), ...getPosition(range.index + range.length, true)];
    }
    setNativeRange(startNode, startOffset) {
      let endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
      let endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
      let force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      debug$4.info('setNativeRange', startNode, startOffset, endNode, endOffset);
      if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null ||
      // @ts-expect-error Fix me later
      endNode.parentNode == null)) {
        return;
      }
      const selection = document.getSelection();
      if (selection == null) return;
      if (startNode != null) {
        if (!this.hasFocus()) this.root.focus({
          preventScroll: true
        });
        const {
          native
        } = this.getNativeRange() || {};
        if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {
          if (startNode instanceof Element && startNode.tagName === 'BR') {
            // @ts-expect-error Fix me later
            startOffset = Array.from(startNode.parentNode.childNodes).indexOf(startNode);
            startNode = startNode.parentNode;
          }
          if (endNode instanceof Element && endNode.tagName === 'BR') {
            // @ts-expect-error Fix me later
            endOffset = Array.from(endNode.parentNode.childNodes).indexOf(endNode);
            endNode = endNode.parentNode;
          }
          const range = document.createRange();
          // @ts-expect-error Fix me later
          range.setStart(startNode, startOffset);
          // @ts-expect-error Fix me later
          range.setEnd(endNode, endOffset);
          selection.removeAllRanges();
          selection.addRange(range);
        }
      } else {
        selection.removeAllRanges();
        this.root.blur();
      }
    }
    setRange(range) {
      let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Emitter.sources.API;
      if (typeof force === 'string') {
        source = force;
        force = false;
      }
      debug$4.info('setRange', range);
      if (range != null) {
        const args = this.rangeToNative(range);
        this.setNativeRange(...args, force);
      } else {
        this.setNativeRange(null);
      }
      this.update(source);
    }
    update() {
      let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Emitter.sources.USER;
      const oldRange = this.lastRange;
      const [lastRange, nativeRange] = this.getRange();
      this.lastRange = lastRange;
      this.lastNative = nativeRange;
      if (this.lastRange != null) {
        this.savedRange = this.lastRange;
      }
      if (!isEqual$2(oldRange, this.lastRange)) {
        if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
          const range = this.cursor.restore();
          if (range) {
            this.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
          }
        }
        const args = [Emitter.events.SELECTION_CHANGE, cloneDeep$1(this.lastRange), cloneDeep$1(oldRange), source];
        this.emitter.emit(Emitter.events.EDITOR_CHANGE, ...args);
        if (source !== Emitter.sources.SILENT) {
          this.emitter.emit(...args);
        }
      }
    }
  }
  function contains(parent, descendant) {
    try {
      // Firefox inserts inaccessible nodes around video elements
      descendant.parentNode; // eslint-disable-line @typescript-eslint/no-unused-expressions
    } catch (e) {
      return false;
    }
    return parent.contains(descendant);
  }

  const ASCII = /^[ -~]*$/;
  let Editor$1 = class Editor {
    constructor(scroll) {
      this.scroll = scroll;
      this.delta = this.getDelta();
    }
    applyDelta(delta) {
      this.scroll.update();
      let scrollLength = this.scroll.length();
      this.scroll.batchStart();
      const normalizedDelta = normalizeDelta(delta);
      const deleteDelta = new Delta();
      const normalizedOps = splitOpLines(normalizedDelta.ops.slice());
      normalizedOps.reduce((index, op) => {
        const length = DeltaExports.Op.length(op);
        let attributes = op.attributes || {};
        let isImplicitNewlinePrepended = false;
        let isImplicitNewlineAppended = false;
        if (op.insert != null) {
          deleteDelta.retain(length);
          if (typeof op.insert === 'string') {
            const text = op.insert;
            isImplicitNewlineAppended = !text.endsWith('\n') && (scrollLength <= index || !!this.scroll.descendant(BlockEmbed, index)[0]);
            this.scroll.insertAt(index, text);
            const [line, offset] = this.scroll.line(index);
            let formats = merge({}, bubbleFormats(line));
            if (line instanceof Block) {
              const [leaf] = line.descendant(LeafBlot$1, offset);
              if (leaf) {
                formats = merge(formats, bubbleFormats(leaf));
              }
            }
            attributes = DeltaExports.AttributeMap.diff(formats, attributes) || {};
          } else if (typeof op.insert === 'object') {
            const key = Object.keys(op.insert)[0]; // There should only be one key
            if (key == null) return index;
            const isInlineEmbed = this.scroll.query(key, Scope.INLINE) != null;
            if (isInlineEmbed) {
              if (scrollLength <= index || !!this.scroll.descendant(BlockEmbed, index)[0]) {
                isImplicitNewlineAppended = true;
              }
            } else if (index > 0) {
              const [leaf, offset] = this.scroll.descendant(LeafBlot$1, index - 1);
              if (leaf instanceof Text$1) {
                const text = leaf.value();
                if (text[offset] !== '\n') {
                  isImplicitNewlinePrepended = true;
                }
              } else if (leaf instanceof EmbedBlot$1 && leaf.statics.scope === Scope.INLINE_BLOT) {
                isImplicitNewlinePrepended = true;
              }
            }
            this.scroll.insertAt(index, key, op.insert[key]);
            if (isInlineEmbed) {
              const [leaf] = this.scroll.descendant(LeafBlot$1, index);
              if (leaf) {
                const formats = merge({}, bubbleFormats(leaf));
                attributes = DeltaExports.AttributeMap.diff(formats, attributes) || {};
              }
            }
          }
          scrollLength += length;
        } else {
          deleteDelta.push(op);
          if (op.retain !== null && typeof op.retain === 'object') {
            const key = Object.keys(op.retain)[0];
            if (key == null) return index;
            this.scroll.updateEmbedAt(index, key, op.retain[key]);
          }
        }
        Object.keys(attributes).forEach(name => {
          this.scroll.formatAt(index, length, name, attributes[name]);
        });
        const prependedLength = isImplicitNewlinePrepended ? 1 : 0;
        const addedLength = isImplicitNewlineAppended ? 1 : 0;
        scrollLength += prependedLength + addedLength;
        deleteDelta.retain(prependedLength);
        deleteDelta.delete(addedLength);
        return index + length + prependedLength + addedLength;
      }, 0);
      deleteDelta.reduce((index, op) => {
        if (typeof op.delete === 'number') {
          this.scroll.deleteAt(index, op.delete);
          return index;
        }
        return index + DeltaExports.Op.length(op);
      }, 0);
      this.scroll.batchEnd();
      this.scroll.optimize();
      return this.update(normalizedDelta);
    }
    deleteText(index, length) {
      this.scroll.deleteAt(index, length);
      return this.update(new Delta().retain(index).delete(length));
    }
    formatLine(index, length) {
      let formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this.scroll.update();
      Object.keys(formats).forEach(format => {
        this.scroll.lines(index, Math.max(length, 1)).forEach(line => {
          line.format(format, formats[format]);
        });
      });
      this.scroll.optimize();
      const delta = new Delta().retain(index).retain(length, cloneDeep$1(formats));
      return this.update(delta);
    }
    formatText(index, length) {
      let formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      Object.keys(formats).forEach(format => {
        this.scroll.formatAt(index, length, format, formats[format]);
      });
      const delta = new Delta().retain(index).retain(length, cloneDeep$1(formats));
      return this.update(delta);
    }
    getContents(index, length) {
      return this.delta.slice(index, index + length);
    }
    getDelta() {
      return this.scroll.lines().reduce((delta, line) => {
        return delta.concat(line.delta());
      }, new Delta());
    }
    getFormat(index) {
      let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      let lines = [];
      let leaves = [];
      if (length === 0) {
        this.scroll.path(index).forEach(path => {
          const [blot] = path;
          if (blot instanceof Block) {
            lines.push(blot);
          } else if (blot instanceof LeafBlot$1) {
            leaves.push(blot);
          }
        });
      } else {
        lines = this.scroll.lines(index, length);
        leaves = this.scroll.descendants(LeafBlot$1, index, length);
      }
      const [lineFormats, leafFormats] = [lines, leaves].map(blots => {
        const blot = blots.shift();
        if (blot == null) return {};
        let formats = bubbleFormats(blot);
        while (Object.keys(formats).length > 0) {
          const blot = blots.shift();
          if (blot == null) return formats;
          formats = combineFormats(bubbleFormats(blot), formats);
        }
        return formats;
      });
      return {
        ...lineFormats,
        ...leafFormats
      };
    }
    getHTML(index, length) {
      const [line, lineOffset] = this.scroll.line(index);
      if (line) {
        const lineLength = line.length();
        const isWithinLine = line.length() >= lineOffset + length;
        if (isWithinLine && !(lineOffset === 0 && length === lineLength)) {
          return convertHTML(line, lineOffset, length, true);
        }
        return convertHTML(this.scroll, index, length, true);
      }
      return '';
    }
    getText(index, length) {
      return this.getContents(index, length).filter(op => typeof op.insert === 'string').map(op => op.insert).join('');
    }
    insertContents(index, contents) {
      const normalizedDelta = normalizeDelta(contents);
      const change = new Delta().retain(index).concat(normalizedDelta);
      this.scroll.insertContents(index, normalizedDelta);
      return this.update(change);
    }
    insertEmbed(index, embed, value) {
      this.scroll.insertAt(index, embed, value);
      return this.update(new Delta().retain(index).insert({
        [embed]: value
      }));
    }
    insertText(index, text) {
      let formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
      this.scroll.insertAt(index, text);
      Object.keys(formats).forEach(format => {
        this.scroll.formatAt(index, text.length, format, formats[format]);
      });
      return this.update(new Delta().retain(index).insert(text, cloneDeep$1(formats)));
    }
    isBlank() {
      if (this.scroll.children.length === 0) return true;
      if (this.scroll.children.length > 1) return false;
      const blot = this.scroll.children.head;
      if (blot?.statics.blotName !== Block.blotName) return false;
      const block = blot;
      if (block.children.length > 1) return false;
      return block.children.head instanceof Break;
    }
    removeFormat(index, length) {
      const text = this.getText(index, length);
      const [line, offset] = this.scroll.line(index + length);
      let suffixLength = 0;
      let suffix = new Delta();
      if (line != null) {
        suffixLength = line.length() - offset;
        suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
      }
      const contents = this.getContents(index, length + suffixLength);
      const diff = contents.diff(new Delta().insert(text).concat(suffix));
      const delta = new Delta().retain(index).concat(diff);
      return this.applyDelta(delta);
    }
    update(change) {
      let mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      let selectionInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      const oldDelta = this.delta;
      if (mutations.length === 1 && mutations[0].type === 'characterData' &&
      // @ts-expect-error Fix me later
      mutations[0].target.data.match(ASCII) && this.scroll.find(mutations[0].target)) {
        // Optimization for character changes
        const textBlot = this.scroll.find(mutations[0].target);
        const formats = bubbleFormats(textBlot);
        const index = textBlot.offset(this.scroll);
        // @ts-expect-error Fix me later
        const oldValue = mutations[0].oldValue.replace(Cursor.CONTENTS, '');
        const oldText = new Delta().insert(oldValue);
        // @ts-expect-error
        const newText = new Delta().insert(textBlot.value());
        const relativeSelectionInfo = selectionInfo && {
          oldRange: shiftRange$1(selectionInfo.oldRange, -index),
          newRange: shiftRange$1(selectionInfo.newRange, -index)
        };
        const diffDelta = new Delta().retain(index).concat(oldText.diff(newText, relativeSelectionInfo));
        change = diffDelta.reduce((delta, op) => {
          if (op.insert) {
            return delta.insert(op.insert, formats);
          }
          return delta.push(op);
        }, new Delta());
        this.delta = oldDelta.compose(change);
      } else {
        this.delta = this.getDelta();
        if (!change || !isEqual$2(oldDelta.compose(change), this.delta)) {
          change = oldDelta.diff(this.delta, selectionInfo);
        }
      }
      return change;
    }
  };
  function convertListHTML(items, lastIndent, types) {
    if (items.length === 0) {
      const [endTag] = getListType(types.pop());
      if (lastIndent <= 0) {
        return `</li></${endTag}>`;
      }
      return `</li></${endTag}>${convertListHTML([], lastIndent - 1, types)}`;
    }
    const [{
      child,
      offset,
      length,
      indent,
      type
    }, ...rest] = items;
    const [tag, attribute] = getListType(type);
    if (indent > lastIndent) {
      types.push(type);
      if (indent === lastIndent + 1) {
        return `<${tag}><li${attribute}>${convertHTML(child, offset, length)}${convertListHTML(rest, indent, types)}`;
      }
      return `<${tag}><li>${convertListHTML(items, lastIndent + 1, types)}`;
    }
    const previousType = types[types.length - 1];
    if (indent === lastIndent && type === previousType) {
      return `</li><li${attribute}>${convertHTML(child, offset, length)}${convertListHTML(rest, indent, types)}`;
    }
    const [endTag] = getListType(types.pop());
    return `</li></${endTag}>${convertListHTML(items, lastIndent - 1, types)}`;
  }
  function convertHTML(blot, index, length) {
    let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    if ('html' in blot && typeof blot.html === 'function') {
      return blot.html(index, length);
    }
    if (blot instanceof Text$1) {
      const escapedText = escapeText(blot.value().slice(index, index + length));
      return escapedText.replaceAll(' ', '&nbsp;');
    }
    if (blot instanceof ParentBlot$1) {
      // TODO fix API
      if (blot.statics.blotName === 'list-container') {
        const items = [];
        blot.children.forEachAt(index, length, (child, offset, childLength) => {
          const formats = 'formats' in child && typeof child.formats === 'function' ? child.formats() : {};
          items.push({
            child,
            offset,
            length: childLength,
            indent: formats.indent || 0,
            type: formats.list
          });
        });
        return convertListHTML(items, -1, []);
      }
      const parts = [];
      blot.children.forEachAt(index, length, (child, offset, childLength) => {
        parts.push(convertHTML(child, offset, childLength));
      });
      if (isRoot || blot.statics.blotName === 'list') {
        return parts.join('');
      }
      const {
        outerHTML,
        innerHTML
      } = blot.domNode;
      const [start, end] = outerHTML.split(`>${innerHTML}<`);
      // TODO cleanup
      if (start === '<table') {
        return `<table style="border: 1px solid #000;">${parts.join('')}<${end}`;
      }
      return `${start}>${parts.join('')}<${end}`;
    }
    return blot.domNode instanceof Element ? blot.domNode.outerHTML : '';
  }
  function combineFormats(formats, combined) {
    return Object.keys(combined).reduce((merged, name) => {
      if (formats[name] == null) return merged;
      const combinedValue = combined[name];
      if (combinedValue === formats[name]) {
        merged[name] = combinedValue;
      } else if (Array.isArray(combinedValue)) {
        if (combinedValue.indexOf(formats[name]) < 0) {
          merged[name] = combinedValue.concat([formats[name]]);
        } else {
          // If style already exists, don't add to an array, but don't lose other styles
          merged[name] = combinedValue;
        }
      } else {
        merged[name] = [combinedValue, formats[name]];
      }
      return merged;
    }, {});
  }
  function getListType(type) {
    const tag = type === 'ordered' ? 'ol' : 'ul';
    switch (type) {
      case 'checked':
        return [tag, ' data-list="checked"'];
      case 'unchecked':
        return [tag, ' data-list="unchecked"'];
      default:
        return [tag, ''];
    }
  }
  function normalizeDelta(delta) {
    return delta.reduce((normalizedDelta, op) => {
      if (typeof op.insert === 'string') {
        const text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
        return normalizedDelta.insert(text, op.attributes);
      }
      return normalizedDelta.push(op);
    }, new Delta());
  }
  function shiftRange$1(_ref, amount) {
    let {
      index,
      length
    } = _ref;
    return new Range(index + amount, length);
  }
  function splitOpLines(ops) {
    const split = [];
    ops.forEach(op => {
      if (typeof op.insert === 'string') {
        const lines = op.insert.split('\n');
        lines.forEach((line, index) => {
          if (index) split.push({
            insert: '\n',
            attributes: op.attributes
          });
          if (line) split.push({
            insert: line,
            attributes: op.attributes
          });
        });
      } else {
        split.push(op);
      }
    });
    return split;
  }

  class Module {
    static DEFAULTS = {};
    constructor(quill) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.quill = quill;
      this.options = options;
    }
  }

  const GUARD_TEXT = '\uFEFF';
  class Embed extends EmbedBlot$1 {
    constructor(scroll, node) {
      super(scroll, node);
      this.contentNode = document.createElement('span');
      this.contentNode.setAttribute('contenteditable', 'false');
      Array.from(this.domNode.childNodes).forEach(childNode => {
        this.contentNode.appendChild(childNode);
      });
      this.leftGuard = document.createTextNode(GUARD_TEXT);
      this.rightGuard = document.createTextNode(GUARD_TEXT);
      this.domNode.appendChild(this.leftGuard);
      this.domNode.appendChild(this.contentNode);
      this.domNode.appendChild(this.rightGuard);
    }
    index(node, offset) {
      if (node === this.leftGuard) return 0;
      if (node === this.rightGuard) return 1;
      return super.index(node, offset);
    }
    restore(node) {
      let range = null;
      let textNode;
      const text = node.data.split(GUARD_TEXT).join('');
      if (node === this.leftGuard) {
        if (this.prev instanceof Text$1) {
          const prevLength = this.prev.length();
          this.prev.insertAt(prevLength, text);
          range = {
            startNode: this.prev.domNode,
            startOffset: prevLength + text.length
          };
        } else {
          textNode = document.createTextNode(text);
          this.parent.insertBefore(this.scroll.create(textNode), this);
          range = {
            startNode: textNode,
            startOffset: text.length
          };
        }
      } else if (node === this.rightGuard) {
        if (this.next instanceof Text$1) {
          this.next.insertAt(0, text);
          range = {
            startNode: this.next.domNode,
            startOffset: text.length
          };
        } else {
          textNode = document.createTextNode(text);
          this.parent.insertBefore(this.scroll.create(textNode), this.next);
          range = {
            startNode: textNode,
            startOffset: text.length
          };
        }
      }
      node.data = GUARD_TEXT;
      return range;
    }
    update(mutations, context) {
      mutations.forEach(mutation => {
        if (mutation.type === 'characterData' && (mutation.target === this.leftGuard || mutation.target === this.rightGuard)) {
          const range = this.restore(mutation.target);
          if (range) context.range = range;
        }
      });
    }
  }

  class Composition {
    isComposing = false;
    constructor(scroll, emitter) {
      this.scroll = scroll;
      this.emitter = emitter;
      this.setupListeners();
    }
    setupListeners() {
      this.scroll.domNode.addEventListener('compositionstart', event => {
        if (!this.isComposing) {
          this.handleCompositionStart(event);
        }
      });
      this.scroll.domNode.addEventListener('compositionend', event => {
        if (this.isComposing) {
          // Webkit makes DOM changes after compositionend, so we use microtask to
          // ensure the order.
          // https://bugs.webkit.org/show_bug.cgi?id=31902
          queueMicrotask(() => {
            this.handleCompositionEnd(event);
          });
        }
      });
    }
    handleCompositionStart(event) {
      const blot = event.target instanceof Node ? this.scroll.find(event.target, true) : null;
      if (blot && !(blot instanceof Embed)) {
        this.emitter.emit(Emitter.events.COMPOSITION_BEFORE_START, event);
        this.scroll.batchStart();
        this.emitter.emit(Emitter.events.COMPOSITION_START, event);
        this.isComposing = true;
      }
    }
    handleCompositionEnd(event) {
      this.emitter.emit(Emitter.events.COMPOSITION_BEFORE_END, event);
      this.scroll.batchEnd();
      this.emitter.emit(Emitter.events.COMPOSITION_END, event);
      this.isComposing = false;
    }
  }

  class Theme {
    static DEFAULTS = {
      modules: {}
    };
    static themes = {
      default: Theme
    };
    modules = {};
    constructor(quill, options) {
      this.quill = quill;
      this.options = options;
    }
    init() {
      Object.keys(this.options.modules).forEach(name => {
        if (this.modules[name] == null) {
          this.addModule(name);
        }
      });
    }
    addModule(name) {
      // @ts-expect-error
      const ModuleClass = this.quill.constructor.import(`modules/${name}`);
      this.modules[name] = new ModuleClass(this.quill, this.options.modules[name] || {});
      return this.modules[name];
    }
  }

  const getParentElement = element => element.parentElement || element.getRootNode().host || null;
  const getElementRect = element => {
    const rect = element.getBoundingClientRect();
    const scaleX = 'offsetWidth' in element && Math.abs(rect.width) / element.offsetWidth || 1;
    const scaleY = 'offsetHeight' in element && Math.abs(rect.height) / element.offsetHeight || 1;
    return {
      top: rect.top,
      right: rect.left + element.clientWidth * scaleX,
      bottom: rect.top + element.clientHeight * scaleY,
      left: rect.left
    };
  };
  const paddingValueToInt = value => {
    const number = parseInt(value, 10);
    return Number.isNaN(number) ? 0 : number;
  };

  // Follow the steps described in https://www.w3.org/TR/cssom-view-1/#element-scrolling-members,
  // assuming that the scroll option is set to 'nearest'.
  const getScrollDistance = (targetStart, targetEnd, scrollStart, scrollEnd, scrollPaddingStart, scrollPaddingEnd) => {
    if (targetStart < scrollStart && targetEnd > scrollEnd) {
      return 0;
    }
    if (targetStart < scrollStart) {
      return -(scrollStart - targetStart + scrollPaddingStart);
    }
    if (targetEnd > scrollEnd) {
      return targetEnd - targetStart > scrollEnd - scrollStart ? targetStart + scrollPaddingStart - scrollStart : targetEnd - scrollEnd + scrollPaddingEnd;
    }
    return 0;
  };
  const scrollRectIntoView = (root, targetRect) => {
    const document = root.ownerDocument;
    let rect = targetRect;
    let current = root;
    while (current) {
      const isDocumentBody = current === document.body;
      const bounding = isDocumentBody ? {
        top: 0,
        right: window.visualViewport?.width ?? document.documentElement.clientWidth,
        bottom: window.visualViewport?.height ?? document.documentElement.clientHeight,
        left: 0
      } : getElementRect(current);
      const style = getComputedStyle(current);
      const scrollDistanceX = getScrollDistance(rect.left, rect.right, bounding.left, bounding.right, paddingValueToInt(style.scrollPaddingLeft), paddingValueToInt(style.scrollPaddingRight));
      const scrollDistanceY = getScrollDistance(rect.top, rect.bottom, bounding.top, bounding.bottom, paddingValueToInt(style.scrollPaddingTop), paddingValueToInt(style.scrollPaddingBottom));
      if (scrollDistanceX || scrollDistanceY) {
        if (isDocumentBody) {
          document.defaultView?.scrollBy(scrollDistanceX, scrollDistanceY);
        } else {
          const {
            scrollLeft,
            scrollTop
          } = current;
          if (scrollDistanceY) {
            current.scrollTop += scrollDistanceY;
          }
          if (scrollDistanceX) {
            current.scrollLeft += scrollDistanceX;
          }
          const scrolledLeft = current.scrollLeft - scrollLeft;
          const scrolledTop = current.scrollTop - scrollTop;
          rect = {
            left: rect.left - scrolledLeft,
            top: rect.top - scrolledTop,
            right: rect.right - scrolledLeft,
            bottom: rect.bottom - scrolledTop
          };
        }
      }
      current = isDocumentBody || style.position === 'fixed' ? null : getParentElement(current);
    }
  };

  const MAX_REGISTER_ITERATIONS = 100;
  const CORE_FORMATS = ['block', 'break', 'cursor', 'inline', 'scroll', 'text'];
  const createRegistryWithFormats = (formats, sourceRegistry, debug) => {
    const registry = new Registry();
    CORE_FORMATS.forEach(name => {
      const coreBlot = sourceRegistry.query(name);
      if (coreBlot) registry.register(coreBlot);
    });
    formats.forEach(name => {
      let format = sourceRegistry.query(name);
      if (!format) {
        debug.error(`Cannot register "${name}" specified in "formats" config. Are you sure it was registered?`);
      }
      let iterations = 0;
      while (format) {
        registry.register(format);
        format = 'blotName' in format ? format.requiredContainer ?? null : null;
        iterations += 1;
        if (iterations > MAX_REGISTER_ITERATIONS) {
          debug.error(`Cycle detected in registering blot requiredContainer: "${name}"`);
          break;
        }
      }
    });
    return registry;
  };

  const debug$3 = namespace('quill');
  const globalRegistry = new Registry();
  ParentBlot$1.uiClass = 'ql-ui';

  /**
   * Options for initializing a Quill instance
   */

  /**
   * Similar to QuillOptions, but with all properties expanded to their default values,
   * and all selectors resolved to HTMLElements.
   */

  let Quill$1 = class Quill {
    static DEFAULTS = {
      bounds: null,
      modules: {
        clipboard: true,
        keyboard: true,
        history: true,
        uploader: true
      },
      placeholder: '',
      readOnly: false,
      registry: globalRegistry,
      theme: 'default'
    };
    static events = Emitter.events;
    static sources = Emitter.sources;
    static version = "2.0.3";
    static imports = {
      delta: Delta,
      parchment: Parchment,
      'core/module': Module,
      'core/theme': Theme
    };
    static debug(limit) {
      if (limit === true) {
        limit = 'log';
      }
      namespace.level(limit);
    }
    static find(node) {
      let bubble = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return instances.get(node) || globalRegistry.find(node, bubble);
    }
    static import(name) {
      if (this.imports[name] == null) {
        debug$3.error(`Cannot import ${name}. Are you sure it was registered?`);
      }
      return this.imports[name];
    }
    static register() {
      if (typeof (arguments.length <= 0 ? undefined : arguments[0]) !== 'string') {
        const target = arguments.length <= 0 ? undefined : arguments[0];
        const overwrite = !!(arguments.length <= 1 ? undefined : arguments[1]);
        const name = 'attrName' in target ? target.attrName : target.blotName;
        if (typeof name === 'string') {
          // Shortcut for formats:
          // register(Blot | Attributor, overwrite)
          this.register(`formats/${name}`, target, overwrite);
        } else {
          Object.keys(target).forEach(key => {
            this.register(key, target[key], overwrite);
          });
        }
      } else {
        const path = arguments.length <= 0 ? undefined : arguments[0];
        const target = arguments.length <= 1 ? undefined : arguments[1];
        const overwrite = !!(arguments.length <= 2 ? undefined : arguments[2]);
        if (this.imports[path] != null && !overwrite) {
          debug$3.warn(`Overwriting ${path} with`, target);
        }
        this.imports[path] = target;
        if ((path.startsWith('blots/') || path.startsWith('formats/')) && target && typeof target !== 'boolean' && target.blotName !== 'abstract') {
          globalRegistry.register(target);
        }
        if (typeof target.register === 'function') {
          target.register(globalRegistry);
        }
      }
    }
    constructor(container) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.options = expandConfig(container, options);
      this.container = this.options.container;
      if (this.container == null) {
        debug$3.error('Invalid Quill container', container);
        return;
      }
      if (this.options.debug) {
        Quill.debug(this.options.debug);
      }
      const html = this.container.innerHTML.trim();
      this.container.classList.add('ql-container');
      this.container.innerHTML = '';
      instances.set(this.container, this);
      this.root = this.addContainer('ql-editor');
      this.root.classList.add('ql-blank');
      this.emitter = new Emitter();
      const scrollBlotName = ScrollBlot$1.blotName;
      const ScrollBlot = this.options.registry.query(scrollBlotName);
      if (!ScrollBlot || !('blotName' in ScrollBlot)) {
        throw new Error(`Cannot initialize Quill without "${scrollBlotName}" blot`);
      }
      this.scroll = new ScrollBlot(this.options.registry, this.root, {
        emitter: this.emitter
      });
      this.editor = new Editor$1(this.scroll);
      this.selection = new Selection(this.scroll, this.emitter);
      this.composition = new Composition(this.scroll, this.emitter);
      this.theme = new this.options.theme(this, this.options); // eslint-disable-line new-cap
      this.keyboard = this.theme.addModule('keyboard');
      this.clipboard = this.theme.addModule('clipboard');
      this.history = this.theme.addModule('history');
      this.uploader = this.theme.addModule('uploader');
      this.theme.addModule('input');
      this.theme.addModule('uiNode');
      this.theme.init();
      this.emitter.on(Emitter.events.EDITOR_CHANGE, type => {
        if (type === Emitter.events.TEXT_CHANGE) {
          this.root.classList.toggle('ql-blank', this.editor.isBlank());
        }
      });
      this.emitter.on(Emitter.events.SCROLL_UPDATE, (source, mutations) => {
        const oldRange = this.selection.lastRange;
        const [newRange] = this.selection.getRange();
        const selectionInfo = oldRange && newRange ? {
          oldRange,
          newRange
        } : undefined;
        modify.call(this, () => this.editor.update(null, mutations, selectionInfo), source);
      });
      this.emitter.on(Emitter.events.SCROLL_EMBED_UPDATE, (blot, delta) => {
        const oldRange = this.selection.lastRange;
        const [newRange] = this.selection.getRange();
        const selectionInfo = oldRange && newRange ? {
          oldRange,
          newRange
        } : undefined;
        modify.call(this, () => {
          const change = new Delta().retain(blot.offset(this)).retain({
            [blot.statics.blotName]: delta
          });
          return this.editor.update(change, [], selectionInfo);
        }, Quill.sources.USER);
      });
      if (html) {
        const contents = this.clipboard.convert({
          html: `${html}<p><br></p>`,
          text: '\n'
        });
        this.setContents(contents);
      }
      this.history.clear();
      if (this.options.placeholder) {
        this.root.setAttribute('data-placeholder', this.options.placeholder);
      }
      if (this.options.readOnly) {
        this.disable();
      }
      this.allowReadOnlyEdits = false;
    }
    addContainer(container) {
      let refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (typeof container === 'string') {
        const className = container;
        container = document.createElement('div');
        container.classList.add(className);
      }
      this.container.insertBefore(container, refNode);
      return container;
    }
    blur() {
      this.selection.setRange(null);
    }
    deleteText(index, length, source) {
      // @ts-expect-error
      [index, length,, source] = overload(index, length, source);
      return modify.call(this, () => {
        return this.editor.deleteText(index, length);
      }, source, index, -1 * length);
    }
    disable() {
      this.enable(false);
    }
    editReadOnly(modifier) {
      this.allowReadOnlyEdits = true;
      const value = modifier();
      this.allowReadOnlyEdits = false;
      return value;
    }
    enable() {
      let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.scroll.enable(enabled);
      this.container.classList.toggle('ql-disabled', !enabled);
    }
    focus() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.selection.focus();
      if (!options.preventScroll) {
        this.scrollSelectionIntoView();
      }
    }
    format(name, value) {
      let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Emitter.sources.API;
      return modify.call(this, () => {
        const range = this.getSelection(true);
        let change = new Delta();
        if (range == null) return change;
        if (this.scroll.query(name, Scope.BLOCK)) {
          change = this.editor.formatLine(range.index, range.length, {
            [name]: value
          });
        } else if (range.length === 0) {
          this.selection.format(name, value);
          return change;
        } else {
          change = this.editor.formatText(range.index, range.length, {
            [name]: value
          });
        }
        this.setSelection(range, Emitter.sources.SILENT);
        return change;
      }, source);
    }
    formatLine(index, length, name, value, source) {
      let formats;
      // eslint-disable-next-line prefer-const
      [index, length, formats, source] = overload(index, length,
      // @ts-expect-error
      name, value, source);
      return modify.call(this, () => {
        return this.editor.formatLine(index, length, formats);
      }, source, index, 0);
    }
    formatText(index, length, name, value, source) {
      let formats;
      // eslint-disable-next-line prefer-const
      [index, length, formats, source] = overload(
      // @ts-expect-error
      index, length, name, value, source);
      return modify.call(this, () => {
        return this.editor.formatText(index, length, formats);
      }, source, index, 0);
    }
    getBounds(index) {
      let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      let bounds = null;
      if (typeof index === 'number') {
        bounds = this.selection.getBounds(index, length);
      } else {
        bounds = this.selection.getBounds(index.index, index.length);
      }
      if (!bounds) return null;
      const containerBounds = this.container.getBoundingClientRect();
      return {
        bottom: bounds.bottom - containerBounds.top,
        height: bounds.height,
        left: bounds.left - containerBounds.left,
        right: bounds.right - containerBounds.left,
        top: bounds.top - containerBounds.top,
        width: bounds.width
      };
    }
    getContents() {
      let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;
      [index, length] = overload(index, length);
      return this.editor.getContents(index, length);
    }
    getFormat() {
      let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
      let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (typeof index === 'number') {
        return this.editor.getFormat(index, length);
      }
      return this.editor.getFormat(index.index, index.length);
    }
    getIndex(blot) {
      return blot.offset(this.scroll);
    }
    getLength() {
      return this.scroll.length();
    }
    getLeaf(index) {
      return this.scroll.leaf(index);
    }
    getLine(index) {
      return this.scroll.line(index);
    }
    getLines() {
      let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;
      if (typeof index !== 'number') {
        return this.scroll.lines(index.index, index.length);
      }
      return this.scroll.lines(index, length);
    }
    getModule(name) {
      return this.theme.modules[name];
    }
    getSelection() {
      let focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (focus) this.focus();
      this.update(); // Make sure we access getRange with editor in consistent state
      return this.selection.getRange()[0];
    }
    getSemanticHTML() {
      let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      let length = arguments.length > 1 ? arguments[1] : undefined;
      if (typeof index === 'number') {
        length = length ?? this.getLength() - index;
      }
      // @ts-expect-error
      [index, length] = overload(index, length);
      return this.editor.getHTML(index, length);
    }
    getText() {
      let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      let length = arguments.length > 1 ? arguments[1] : undefined;
      if (typeof index === 'number') {
        length = length ?? this.getLength() - index;
      }
      // @ts-expect-error
      [index, length] = overload(index, length);
      return this.editor.getText(index, length);
    }
    hasFocus() {
      return this.selection.hasFocus();
    }
    insertEmbed(index, embed, value) {
      let source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;
      return modify.call(this, () => {
        return this.editor.insertEmbed(index, embed, value);
      }, source, index);
    }
    insertText(index, text, name, value, source) {
      let formats;
      // eslint-disable-next-line prefer-const
      // @ts-expect-error
      [index,, formats, source] = overload(index, 0, name, value, source);
      return modify.call(this, () => {
        return this.editor.insertText(index, text, formats);
      }, source, index, text.length);
    }
    isEnabled() {
      return this.scroll.isEnabled();
    }
    off() {
      return this.emitter.off(...arguments);
    }
    on() {
      return this.emitter.on(...arguments);
    }
    once() {
      return this.emitter.once(...arguments);
    }
    removeFormat(index, length, source) {
      [index, length,, source] = overload(index, length, source);
      return modify.call(this, () => {
        return this.editor.removeFormat(index, length);
      }, source, index);
    }
    scrollRectIntoView(rect) {
      scrollRectIntoView(this.root, rect);
    }

    /**
     * @deprecated Use Quill#scrollSelectionIntoView() instead.
     */
    scrollIntoView() {
      console.warn('Quill#scrollIntoView() has been deprecated and will be removed in the near future. Please use Quill#scrollSelectionIntoView() instead.');
      this.scrollSelectionIntoView();
    }

    /**
     * Scroll the current selection into the visible area.
     * If the selection is already visible, no scrolling will occur.
     */
    scrollSelectionIntoView() {
      const range = this.selection.lastRange;
      const bounds = range && this.selection.getBounds(range.index, range.length);
      if (bounds) {
        this.scrollRectIntoView(bounds);
      }
    }
    setContents(delta) {
      let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Emitter.sources.API;
      return modify.call(this, () => {
        delta = new Delta(delta);
        const length = this.getLength();
        // Quill will set empty editor to \n
        const delete1 = this.editor.deleteText(0, length);
        const applied = this.editor.insertContents(0, delta);
        // Remove extra \n from empty editor initialization
        const delete2 = this.editor.deleteText(this.getLength() - 1, 1);
        return delete1.compose(applied).compose(delete2);
      }, source);
    }
    setSelection(index, length, source) {
      if (index == null) {
        // @ts-expect-error https://github.com/microsoft/TypeScript/issues/22609
        this.selection.setRange(null, length || Quill.sources.API);
      } else {
        // @ts-expect-error
        [index, length,, source] = overload(index, length, source);
        this.selection.setRange(new Range(Math.max(0, index), length), source);
        if (source !== Emitter.sources.SILENT) {
          this.scrollSelectionIntoView();
        }
      }
    }
    setText(text) {
      let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Emitter.sources.API;
      const delta = new Delta().insert(text);
      return this.setContents(delta, source);
    }
    update() {
      let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Emitter.sources.USER;
      const change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
      this.selection.update(source);
      // TODO this is usually undefined
      return change;
    }
    updateContents(delta) {
      let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Emitter.sources.API;
      return modify.call(this, () => {
        delta = new Delta(delta);
        return this.editor.applyDelta(delta);
      }, source, true);
    }
  };
  function resolveSelector(selector) {
    return typeof selector === 'string' ? document.querySelector(selector) : selector;
  }
  function expandModuleConfig(config) {
    return Object.entries(config ?? {}).reduce((expanded, _ref) => {
      let [key, value] = _ref;
      return {
        ...expanded,
        [key]: value === true ? {} : value
      };
    }, {});
  }
  function omitUndefinedValuesFromOptions(obj) {
    return Object.fromEntries(Object.entries(obj).filter(entry => entry[1] !== undefined));
  }
  function expandConfig(containerOrSelector, options) {
    const container = resolveSelector(containerOrSelector);
    if (!container) {
      throw new Error('Invalid Quill container');
    }
    const shouldUseDefaultTheme = !options.theme || options.theme === Quill$1.DEFAULTS.theme;
    const theme = shouldUseDefaultTheme ? Theme : Quill$1.import(`themes/${options.theme}`);
    if (!theme) {
      throw new Error(`Invalid theme ${options.theme}. Did you register it?`);
    }
    const {
      modules: quillModuleDefaults,
      ...quillDefaults
    } = Quill$1.DEFAULTS;
    const {
      modules: themeModuleDefaults,
      ...themeDefaults
    } = theme.DEFAULTS;
    let userModuleOptions = expandModuleConfig(options.modules);
    // Special case toolbar shorthand
    if (userModuleOptions != null && userModuleOptions.toolbar && userModuleOptions.toolbar.constructor !== Object) {
      userModuleOptions = {
        ...userModuleOptions,
        toolbar: {
          container: userModuleOptions.toolbar
        }
      };
    }
    const modules = merge({}, expandModuleConfig(quillModuleDefaults), expandModuleConfig(themeModuleDefaults), userModuleOptions);
    const config = {
      ...quillDefaults,
      ...omitUndefinedValuesFromOptions(themeDefaults),
      ...omitUndefinedValuesFromOptions(options)
    };
    let registry = options.registry;
    if (registry) {
      if (options.formats) {
        debug$3.warn('Ignoring "formats" option because "registry" is specified');
      }
    } else {
      registry = options.formats ? createRegistryWithFormats(options.formats, config.registry, debug$3) : config.registry;
    }
    return {
      ...config,
      registry,
      container,
      theme,
      modules: Object.entries(modules).reduce((modulesWithDefaults, _ref2) => {
        let [name, value] = _ref2;
        if (!value) return modulesWithDefaults;
        const moduleClass = Quill$1.import(`modules/${name}`);
        if (moduleClass == null) {
          debug$3.error(`Cannot load ${name} module. Are you sure you registered it?`);
          return modulesWithDefaults;
        }
        return {
          ...modulesWithDefaults,
          // @ts-expect-error
          [name]: merge({}, moduleClass.DEFAULTS || {}, value)
        };
      }, {}),
      bounds: resolveSelector(config.bounds)
    };
  }

  // Handle selection preservation and TEXT_CHANGE emission
  // common to modification APIs
  function modify(modifier, source, index, shift) {
    if (!this.isEnabled() && source === Emitter.sources.USER && !this.allowReadOnlyEdits) {
      return new Delta();
    }
    let range = index == null ? null : this.getSelection();
    const oldDelta = this.editor.delta;
    const change = modifier();
    if (range != null) {
      if (index === true) {
        index = range.index; // eslint-disable-line prefer-destructuring
      }
      if (shift == null) {
        range = shiftRange(range, change, source);
      } else if (shift !== 0) {
        // @ts-expect-error index should always be number
        range = shiftRange(range, index, shift, source);
      }
      this.setSelection(range, Emitter.sources.SILENT);
    }
    if (change.length() > 0) {
      const args = [Emitter.events.TEXT_CHANGE, change, oldDelta, source];
      this.emitter.emit(Emitter.events.EDITOR_CHANGE, ...args);
      if (source !== Emitter.sources.SILENT) {
        this.emitter.emit(...args);
      }
    }
    return change;
  }
  function overload(index, length, name, value, source) {
    let formats = {};
    // @ts-expect-error
    if (typeof index.index === 'number' && typeof index.length === 'number') {
      // Allow for throwaway end (used by insertText/insertEmbed)
      if (typeof length !== 'number') {
        // @ts-expect-error
        source = value;
        value = name;
        name = length;
        // @ts-expect-error
        length = index.length; // eslint-disable-line prefer-destructuring
        // @ts-expect-error
        index = index.index; // eslint-disable-line prefer-destructuring
      } else {
        // @ts-expect-error
        length = index.length; // eslint-disable-line prefer-destructuring
        // @ts-expect-error
        index = index.index; // eslint-disable-line prefer-destructuring
      }
    } else if (typeof length !== 'number') {
      // @ts-expect-error
      source = value;
      value = name;
      name = length;
      length = 0;
    }
    // Handle format being object, two format name/value strings or excluded
    if (typeof name === 'object') {
      // @ts-expect-error Fix me later
      formats = name;
      // @ts-expect-error
      source = value;
    } else if (typeof name === 'string') {
      if (value != null) {
        formats[name] = value;
      } else {
        // @ts-expect-error
        source = name;
      }
    }
    // Handle optional source
    source = source || Emitter.sources.API;
    // @ts-expect-error
    return [index, length, formats, source];
  }
  function shiftRange(range, index, lengthOrSource, source) {
    const length = typeof lengthOrSource === 'number' ? lengthOrSource : 0;
    if (range == null) return null;
    let start;
    let end;
    // @ts-expect-error -- TODO: add a better type guard around `index`
    if (index && typeof index.transformPosition === 'function') {
      [start, end] = [range.index, range.index + range.length].map(pos =>
      // @ts-expect-error -- TODO: add a better type guard around `index`
      index.transformPosition(pos, source !== Emitter.sources.USER));
    } else {
      [start, end] = [range.index, range.index + range.length].map(pos => {
        // @ts-expect-error -- TODO: add a better type guard around `index`
        if (pos < index || pos === index && source === Emitter.sources.USER) return pos;
        if (length >= 0) {
          return pos + length;
        }
        // @ts-expect-error -- TODO: add a better type guard around `index`
        return Math.max(index, pos + length);
      });
    }
    return new Range(start, end - start);
  }

  class Container extends ContainerBlot$1 {}

  function isLine$1(blot) {
    return blot instanceof Block || blot instanceof BlockEmbed;
  }
  function isUpdatable(blot) {
    return typeof blot.updateContent === 'function';
  }
  class Scroll extends ScrollBlot$1 {
    static blotName = 'scroll';
    static className = 'ql-editor';
    static tagName = 'DIV';
    static defaultChild = Block;
    static allowedChildren = [Block, BlockEmbed, Container];
    constructor(registry, domNode, _ref) {
      let {
        emitter
      } = _ref;
      super(registry, domNode);
      this.emitter = emitter;
      this.batch = false;
      this.optimize();
      this.enable();
      this.domNode.addEventListener('dragstart', e => this.handleDragStart(e));
    }
    batchStart() {
      if (!Array.isArray(this.batch)) {
        this.batch = [];
      }
    }
    batchEnd() {
      if (!this.batch) return;
      const mutations = this.batch;
      this.batch = false;
      this.update(mutations);
    }
    emitMount(blot) {
      this.emitter.emit(Emitter.events.SCROLL_BLOT_MOUNT, blot);
    }
    emitUnmount(blot) {
      this.emitter.emit(Emitter.events.SCROLL_BLOT_UNMOUNT, blot);
    }
    emitEmbedUpdate(blot, change) {
      this.emitter.emit(Emitter.events.SCROLL_EMBED_UPDATE, blot, change);
    }
    deleteAt(index, length) {
      const [first, offset] = this.line(index);
      const [last] = this.line(index + length);
      super.deleteAt(index, length);
      if (last != null && first !== last && offset > 0) {
        if (first instanceof BlockEmbed || last instanceof BlockEmbed) {
          this.optimize();
          return;
        }
        const ref = last.children.head instanceof Break ? null : last.children.head;
        // @ts-expect-error
        first.moveChildren(last, ref);
        // @ts-expect-error
        first.remove();
      }
      this.optimize();
    }
    enable() {
      let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.domNode.setAttribute('contenteditable', enabled ? 'true' : 'false');
    }
    formatAt(index, length, format, value) {
      super.formatAt(index, length, format, value);
      this.optimize();
    }
    insertAt(index, value, def) {
      if (index >= this.length()) {
        if (def == null || this.scroll.query(value, Scope.BLOCK) == null) {
          const blot = this.scroll.create(this.statics.defaultChild.blotName);
          this.appendChild(blot);
          if (def == null && value.endsWith('\n')) {
            blot.insertAt(0, value.slice(0, -1), def);
          } else {
            blot.insertAt(0, value, def);
          }
        } else {
          const embed = this.scroll.create(value, def);
          this.appendChild(embed);
        }
      } else {
        super.insertAt(index, value, def);
      }
      this.optimize();
    }
    insertBefore(blot, ref) {
      if (blot.statics.scope === Scope.INLINE_BLOT) {
        const wrapper = this.scroll.create(this.statics.defaultChild.blotName);
        wrapper.appendChild(blot);
        super.insertBefore(wrapper, ref);
      } else {
        super.insertBefore(blot, ref);
      }
    }
    insertContents(index, delta) {
      const renderBlocks = this.deltaToRenderBlocks(delta.concat(new Delta().insert('\n')));
      const last = renderBlocks.pop();
      if (last == null) return;
      this.batchStart();
      const first = renderBlocks.shift();
      if (first) {
        const shouldInsertNewlineChar = first.type === 'block' && (first.delta.length() === 0 || !this.descendant(BlockEmbed, index)[0] && index < this.length());
        const delta = first.type === 'block' ? first.delta : new Delta().insert({
          [first.key]: first.value
        });
        insertInlineContents(this, index, delta);
        const newlineCharLength = first.type === 'block' ? 1 : 0;
        const lineEndIndex = index + delta.length() + newlineCharLength;
        if (shouldInsertNewlineChar) {
          this.insertAt(lineEndIndex - 1, '\n');
        }
        const formats = bubbleFormats(this.line(index)[0]);
        const attributes = DeltaExports.AttributeMap.diff(formats, first.attributes) || {};
        Object.keys(attributes).forEach(name => {
          this.formatAt(lineEndIndex - 1, 1, name, attributes[name]);
        });
        index = lineEndIndex;
      }
      let [refBlot, refBlotOffset] = this.children.find(index);
      if (renderBlocks.length) {
        if (refBlot) {
          refBlot = refBlot.split(refBlotOffset);
          refBlotOffset = 0;
        }
        renderBlocks.forEach(renderBlock => {
          if (renderBlock.type === 'block') {
            const block = this.createBlock(renderBlock.attributes, refBlot || undefined);
            insertInlineContents(block, 0, renderBlock.delta);
          } else {
            const blockEmbed = this.create(renderBlock.key, renderBlock.value);
            this.insertBefore(blockEmbed, refBlot || undefined);
            Object.keys(renderBlock.attributes).forEach(name => {
              blockEmbed.format(name, renderBlock.attributes[name]);
            });
          }
        });
      }
      if (last.type === 'block' && last.delta.length()) {
        const offset = refBlot ? refBlot.offset(refBlot.scroll) + refBlotOffset : this.length();
        insertInlineContents(this, offset, last.delta);
      }
      this.batchEnd();
      this.optimize();
    }
    isEnabled() {
      return this.domNode.getAttribute('contenteditable') === 'true';
    }
    leaf(index) {
      const last = this.path(index).pop();
      if (!last) {
        return [null, -1];
      }
      const [blot, offset] = last;
      return blot instanceof LeafBlot$1 ? [blot, offset] : [null, -1];
    }
    line(index) {
      if (index === this.length()) {
        return this.line(index - 1);
      }
      // @ts-expect-error TODO: make descendant() generic
      return this.descendant(isLine$1, index);
    }
    lines() {
      let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;
      const getLines = (blot, blotIndex, blotLength) => {
        let lines = [];
        let lengthLeft = blotLength;
        blot.children.forEachAt(blotIndex, blotLength, (child, childIndex, childLength) => {
          if (isLine$1(child)) {
            lines.push(child);
          } else if (child instanceof ContainerBlot$1) {
            lines = lines.concat(getLines(child, childIndex, lengthLeft));
          }
          lengthLeft -= childLength;
        });
        return lines;
      };
      return getLines(this, index, length);
    }
    optimize() {
      let mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (this.batch) return;
      super.optimize(mutations, context);
      if (mutations.length > 0) {
        this.emitter.emit(Emitter.events.SCROLL_OPTIMIZE, mutations, context);
      }
    }
    path(index) {
      return super.path(index).slice(1); // Exclude self
    }
    remove() {
      // Never remove self
    }
    update(mutations) {
      if (this.batch) {
        if (Array.isArray(mutations)) {
          this.batch = this.batch.concat(mutations);
        }
        return;
      }
      let source = Emitter.sources.USER;
      if (typeof mutations === 'string') {
        source = mutations;
      }
      if (!Array.isArray(mutations)) {
        mutations = this.observer.takeRecords();
      }
      mutations = mutations.filter(_ref2 => {
        let {
          target
        } = _ref2;
        const blot = this.find(target, true);
        return blot && !isUpdatable(blot);
      });
      if (mutations.length > 0) {
        this.emitter.emit(Emitter.events.SCROLL_BEFORE_UPDATE, source, mutations);
      }
      super.update(mutations.concat([])); // pass copy
      if (mutations.length > 0) {
        this.emitter.emit(Emitter.events.SCROLL_UPDATE, source, mutations);
      }
    }
    updateEmbedAt(index, key, change) {
      // Currently it only supports top-level embeds (BlockEmbed).
      // We can update `ParentBlot` in parchment to support inline embeds.
      const [blot] = this.descendant(b => b instanceof BlockEmbed, index);
      if (blot && blot.statics.blotName === key && isUpdatable(blot)) {
        blot.updateContent(change);
      }
    }
    handleDragStart(event) {
      event.preventDefault();
    }
    deltaToRenderBlocks(delta) {
      const renderBlocks = [];
      let currentBlockDelta = new Delta();
      delta.forEach(op => {
        const insert = op?.insert;
        if (!insert) return;
        if (typeof insert === 'string') {
          const splitted = insert.split('\n');
          splitted.slice(0, -1).forEach(text => {
            currentBlockDelta.insert(text, op.attributes);
            renderBlocks.push({
              type: 'block',
              delta: currentBlockDelta,
              attributes: op.attributes ?? {}
            });
            currentBlockDelta = new Delta();
          });
          const last = splitted[splitted.length - 1];
          if (last) {
            currentBlockDelta.insert(last, op.attributes);
          }
        } else {
          const key = Object.keys(insert)[0];
          if (!key) return;
          if (this.query(key, Scope.INLINE)) {
            currentBlockDelta.push(op);
          } else {
            if (currentBlockDelta.length()) {
              renderBlocks.push({
                type: 'block',
                delta: currentBlockDelta,
                attributes: {}
              });
            }
            currentBlockDelta = new Delta();
            renderBlocks.push({
              type: 'blockEmbed',
              key,
              value: insert[key],
              attributes: op.attributes ?? {}
            });
          }
        }
      });
      if (currentBlockDelta.length()) {
        renderBlocks.push({
          type: 'block',
          delta: currentBlockDelta,
          attributes: {}
        });
      }
      return renderBlocks;
    }
    createBlock(attributes, refBlot) {
      let blotName;
      const formats = {};
      Object.entries(attributes).forEach(_ref3 => {
        let [key, value] = _ref3;
        const isBlockBlot = this.query(key, Scope.BLOCK & Scope.BLOT) != null;
        if (isBlockBlot) {
          blotName = key;
        } else {
          formats[key] = value;
        }
      });
      const block = this.create(blotName || this.statics.defaultChild.blotName, blotName ? attributes[blotName] : undefined);
      this.insertBefore(block, refBlot || undefined);
      const length = block.length();
      Object.entries(formats).forEach(_ref4 => {
        let [key, value] = _ref4;
        block.formatAt(0, length, key, value);
      });
      return block;
    }
  }
  function insertInlineContents(parent, index, inlineContents) {
    inlineContents.reduce((index, op) => {
      const length = DeltaExports.Op.length(op);
      let attributes = op.attributes || {};
      if (op.insert != null) {
        if (typeof op.insert === 'string') {
          const text = op.insert;
          parent.insertAt(index, text);
          const [leaf] = parent.descendant(LeafBlot$1, index);
          const formats = bubbleFormats(leaf);
          attributes = DeltaExports.AttributeMap.diff(formats, attributes) || {};
        } else if (typeof op.insert === 'object') {
          const key = Object.keys(op.insert)[0]; // There should only be one key
          if (key == null) return index;
          parent.insertAt(index, key, op.insert[key]);
          const isInlineEmbed = parent.scroll.query(key, Scope.INLINE) != null;
          if (isInlineEmbed) {
            const [leaf] = parent.descendant(LeafBlot$1, index);
            const formats = bubbleFormats(leaf);
            attributes = DeltaExports.AttributeMap.diff(formats, attributes) || {};
          }
        }
      }
      Object.keys(attributes).forEach(key => {
        parent.formatAt(index, length, key, attributes[key]);
      });
      return index + length;
    }, index);
  }

  const config$2 = {
    scope: Scope.BLOCK,
    whitelist: ['right', 'center', 'justify']
  };
  const AlignAttribute = new Attributor('align', 'align', config$2);
  const AlignClass = new ClassAttributor$1('align', 'ql-align', config$2);
  const AlignStyle = new StyleAttributor$1('align', 'text-align', config$2);

  class ColorAttributor extends StyleAttributor$1 {
    value(domNode) {
      let value = super.value(domNode);
      if (!value.startsWith('rgb(')) return value;
      value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
      const hex = value.split(',').map(component => `00${parseInt(component, 10).toString(16)}`.slice(-2)).join('');
      return `#${hex}`;
    }
  }
  const ColorClass = new ClassAttributor$1('color', 'ql-color', {
    scope: Scope.INLINE
  });
  const ColorStyle = new ColorAttributor('color', 'color', {
    scope: Scope.INLINE
  });

  const BackgroundClass = new ClassAttributor$1('background', 'ql-bg', {
    scope: Scope.INLINE
  });
  const BackgroundStyle = new ColorAttributor('background', 'background-color', {
    scope: Scope.INLINE
  });

  class CodeBlockContainer extends Container {
    static create(value) {
      const domNode = super.create(value);
      domNode.setAttribute('spellcheck', 'false');
      return domNode;
    }
    code(index, length) {
      return this.children
      // @ts-expect-error
      .map(child => child.length() <= 1 ? '' : child.domNode.innerText).join('\n').slice(index, index + length);
    }
    html(index, length) {
      // `\n`s are needed in order to support empty lines at the beginning and the end.
      // https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions
      return `<pre>\n${escapeText(this.code(index, length))}\n</pre>`;
    }
  }
  class CodeBlock extends Block {
    static TAB = '  ';
    static register() {
      Quill$1.register(CodeBlockContainer);
    }
  }
  class Code extends Inline {}
  Code.blotName = 'code';
  Code.tagName = 'CODE';
  CodeBlock.blotName = 'code-block';
  CodeBlock.className = 'ql-code-block';
  CodeBlock.tagName = 'DIV';
  CodeBlockContainer.blotName = 'code-block-container';
  CodeBlockContainer.className = 'ql-code-block-container';
  CodeBlockContainer.tagName = 'DIV';
  CodeBlockContainer.allowedChildren = [CodeBlock];
  CodeBlock.allowedChildren = [Text$1, Break, Cursor];
  CodeBlock.requiredContainer = CodeBlockContainer;

  const config$1 = {
    scope: Scope.BLOCK,
    whitelist: ['rtl']
  };
  const DirectionAttribute = new Attributor('direction', 'dir', config$1);
  const DirectionClass = new ClassAttributor$1('direction', 'ql-direction', config$1);
  const DirectionStyle = new StyleAttributor$1('direction', 'direction', config$1);

  const config = {
    scope: Scope.INLINE,
    whitelist: ['serif', 'monospace']
  };
  const FontClass = new ClassAttributor$1('font', 'ql-font', config);
  class FontStyleAttributor extends StyleAttributor$1 {
    value(node) {
      return super.value(node).replace(/["']/g, '');
    }
  }
  const FontStyle = new FontStyleAttributor('font', 'font-family', config);

  const SizeClass = new ClassAttributor$1('size', 'ql-size', {
    scope: Scope.INLINE,
    whitelist: ['small', 'large', 'huge']
  });
  const SizeStyle = new StyleAttributor$1('size', 'font-size', {
    scope: Scope.INLINE,
    whitelist: ['10px', '18px', '32px']
  });

  const debug$2 = namespace('quill:keyboard');
  const SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';
  class Keyboard extends Module {
    static match(evt, binding) {
      if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(key => {
        return !!binding[key] !== evt[key] && binding[key] !== null;
      })) {
        return false;
      }
      return binding.key === evt.key || binding.key === evt.which;
    }
    constructor(quill, options) {
      super(quill, options);
      this.bindings = {};
      // @ts-expect-error Fix me later
      Object.keys(this.options.bindings).forEach(name => {
        // @ts-expect-error Fix me later
        if (this.options.bindings[name]) {
          // @ts-expect-error Fix me later
          this.addBinding(this.options.bindings[name]);
        }
      });
      this.addBinding({
        key: 'Enter',
        shiftKey: null
      }, this.handleEnter);
      this.addBinding({
        key: 'Enter',
        metaKey: null,
        ctrlKey: null,
        altKey: null
      }, () => {});
      if (/Firefox/i.test(navigator.userAgent)) {
        // Need to handle delete and backspace for Firefox in the general case #1171
        this.addBinding({
          key: 'Backspace'
        }, {
          collapsed: true
        }, this.handleBackspace);
        this.addBinding({
          key: 'Delete'
        }, {
          collapsed: true
        }, this.handleDelete);
      } else {
        this.addBinding({
          key: 'Backspace'
        }, {
          collapsed: true,
          prefix: /^.?$/
        }, this.handleBackspace);
        this.addBinding({
          key: 'Delete'
        }, {
          collapsed: true,
          suffix: /^.?$/
        }, this.handleDelete);
      }
      this.addBinding({
        key: 'Backspace'
      }, {
        collapsed: false
      }, this.handleDeleteRange);
      this.addBinding({
        key: 'Delete'
      }, {
        collapsed: false
      }, this.handleDeleteRange);
      this.addBinding({
        key: 'Backspace',
        altKey: null,
        ctrlKey: null,
        metaKey: null,
        shiftKey: null
      }, {
        collapsed: true,
        offset: 0
      }, this.handleBackspace);
      this.listen();
    }
    addBinding(keyBinding) {
      let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      let handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      const binding = normalize$2(keyBinding);
      if (binding == null) {
        debug$2.warn('Attempted to add invalid keyboard binding', binding);
        return;
      }
      if (typeof context === 'function') {
        context = {
          handler: context
        };
      }
      if (typeof handler === 'function') {
        handler = {
          handler
        };
      }
      const keys = Array.isArray(binding.key) ? binding.key : [binding.key];
      keys.forEach(key => {
        const singleBinding = {
          ...binding,
          key,
          ...context,
          ...handler
        };
        this.bindings[singleBinding.key] = this.bindings[singleBinding.key] || [];
        this.bindings[singleBinding.key].push(singleBinding);
      });
    }
    listen() {
      this.quill.root.addEventListener('keydown', evt => {
        if (evt.defaultPrevented || evt.isComposing) return;

        // evt.isComposing is false when pressing Enter/Backspace when composing in Safari
        // https://bugs.webkit.org/show_bug.cgi?id=165004
        const isComposing = evt.keyCode === 229 && (evt.key === 'Enter' || evt.key === 'Backspace');
        if (isComposing) return;
        const bindings = (this.bindings[evt.key] || []).concat(this.bindings[evt.which] || []);
        const matches = bindings.filter(binding => Keyboard.match(evt, binding));
        if (matches.length === 0) return;
        // @ts-expect-error
        const blot = Quill$1.find(evt.target, true);
        if (blot && blot.scroll !== this.quill.scroll) return;
        const range = this.quill.getSelection();
        if (range == null || !this.quill.hasFocus()) return;
        const [line, offset] = this.quill.getLine(range.index);
        const [leafStart, offsetStart] = this.quill.getLeaf(range.index);
        const [leafEnd, offsetEnd] = range.length === 0 ? [leafStart, offsetStart] : this.quill.getLeaf(range.index + range.length);
        const prefixText = leafStart instanceof TextBlot$1 ? leafStart.value().slice(0, offsetStart) : '';
        const suffixText = leafEnd instanceof TextBlot$1 ? leafEnd.value().slice(offsetEnd) : '';
        const curContext = {
          collapsed: range.length === 0,
          // @ts-expect-error Fix me later
          empty: range.length === 0 && line.length() <= 1,
          format: this.quill.getFormat(range),
          line,
          offset,
          prefix: prefixText,
          suffix: suffixText,
          event: evt
        };
        const prevented = matches.some(binding => {
          if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) {
            return false;
          }
          if (binding.empty != null && binding.empty !== curContext.empty) {
            return false;
          }
          if (binding.offset != null && binding.offset !== curContext.offset) {
            return false;
          }
          if (Array.isArray(binding.format)) {
            // any format is present
            if (binding.format.every(name => curContext.format[name] == null)) {
              return false;
            }
          } else if (typeof binding.format === 'object') {
            // all formats must match
            if (!Object.keys(binding.format).every(name => {
              // @ts-expect-error Fix me later
              if (binding.format[name] === true) return curContext.format[name] != null;
              // @ts-expect-error Fix me later
              if (binding.format[name] === false) return curContext.format[name] == null;
              // @ts-expect-error Fix me later
              return isEqual$2(binding.format[name], curContext.format[name]);
            })) {
              return false;
            }
          }
          if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) {
            return false;
          }
          if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) {
            return false;
          }
          // @ts-expect-error Fix me later
          return binding.handler.call(this, range, curContext, binding) !== true;
        });
        if (prevented) {
          evt.preventDefault();
        }
      });
    }
    handleBackspace(range, context) {
      // Check for astral symbols
      const length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
      if (range.index === 0 || this.quill.getLength() <= 1) return;
      let formats = {};
      const [line] = this.quill.getLine(range.index);
      let delta = new Delta().retain(range.index - length).delete(length);
      if (context.offset === 0) {
        // Always deleting newline here, length always 1
        const [prev] = this.quill.getLine(range.index - 1);
        if (prev) {
          const isPrevLineEmpty = prev.statics.blotName === 'block' && prev.length() <= 1;
          if (!isPrevLineEmpty) {
            // @ts-expect-error Fix me later
            const curFormats = line.formats();
            const prevFormats = this.quill.getFormat(range.index - 1, 1);
            formats = DeltaExports.AttributeMap.diff(curFormats, prevFormats) || {};
            if (Object.keys(formats).length > 0) {
              // line.length() - 1 targets \n in line, another -1 for newline being deleted
              const formatDelta = new Delta()
              // @ts-expect-error Fix me later
              .retain(range.index + line.length() - 2).retain(1, formats);
              delta = delta.compose(formatDelta);
            }
          }
        }
      }
      this.quill.updateContents(delta, Quill$1.sources.USER);
      this.quill.focus();
    }
    handleDelete(range, context) {
      // Check for astral symbols
      const length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
      if (range.index >= this.quill.getLength() - length) return;
      let formats = {};
      const [line] = this.quill.getLine(range.index);
      let delta = new Delta().retain(range.index).delete(length);
      // @ts-expect-error Fix me later
      if (context.offset >= line.length() - 1) {
        const [next] = this.quill.getLine(range.index + 1);
        if (next) {
          // @ts-expect-error Fix me later
          const curFormats = line.formats();
          const nextFormats = this.quill.getFormat(range.index, 1);
          formats = DeltaExports.AttributeMap.diff(curFormats, nextFormats) || {};
          if (Object.keys(formats).length > 0) {
            delta = delta.retain(next.length() - 1).retain(1, formats);
          }
        }
      }
      this.quill.updateContents(delta, Quill$1.sources.USER);
      this.quill.focus();
    }
    handleDeleteRange(range) {
      deleteRange({
        range,
        quill: this.quill
      });
      this.quill.focus();
    }
    handleEnter(range, context) {
      const lineFormats = Object.keys(context.format).reduce((formats, format) => {
        if (this.quill.scroll.query(format, Scope.BLOCK) && !Array.isArray(context.format[format])) {
          formats[format] = context.format[format];
        }
        return formats;
      }, {});
      const delta = new Delta().retain(range.index).delete(range.length).insert('\n', lineFormats);
      this.quill.updateContents(delta, Quill$1.sources.USER);
      this.quill.setSelection(range.index + 1, Quill$1.sources.SILENT);
      this.quill.focus();
    }
  }
  const defaultOptions = {
    bindings: {
      bold: makeFormatHandler('bold'),
      italic: makeFormatHandler('italic'),
      underline: makeFormatHandler('underline'),
      indent: {
        // highlight tab or tab at beginning of list, indent or blockquote
        key: 'Tab',
        format: ['blockquote', 'indent', 'list'],
        handler(range, context) {
          if (context.collapsed && context.offset !== 0) return true;
          this.quill.format('indent', '+1', Quill$1.sources.USER);
          return false;
        }
      },
      outdent: {
        key: 'Tab',
        shiftKey: true,
        format: ['blockquote', 'indent', 'list'],
        // highlight tab or tab at beginning of list, indent or blockquote
        handler(range, context) {
          if (context.collapsed && context.offset !== 0) return true;
          this.quill.format('indent', '-1', Quill$1.sources.USER);
          return false;
        }
      },
      'outdent backspace': {
        key: 'Backspace',
        collapsed: true,
        shiftKey: null,
        metaKey: null,
        ctrlKey: null,
        altKey: null,
        format: ['indent', 'list'],
        offset: 0,
        handler(range, context) {
          if (context.format.indent != null) {
            this.quill.format('indent', '-1', Quill$1.sources.USER);
          } else if (context.format.list != null) {
            this.quill.format('list', false, Quill$1.sources.USER);
          }
        }
      },
      'indent code-block': makeCodeBlockHandler(true),
      'outdent code-block': makeCodeBlockHandler(false),
      'remove tab': {
        key: 'Tab',
        shiftKey: true,
        collapsed: true,
        prefix: /\t$/,
        handler(range) {
          this.quill.deleteText(range.index - 1, 1, Quill$1.sources.USER);
        }
      },
      tab: {
        key: 'Tab',
        handler(range, context) {
          if (context.format.table) return true;
          this.quill.history.cutoff();
          const delta = new Delta().retain(range.index).delete(range.length).insert('\t');
          this.quill.updateContents(delta, Quill$1.sources.USER);
          this.quill.history.cutoff();
          this.quill.setSelection(range.index + 1, Quill$1.sources.SILENT);
          return false;
        }
      },
      'blockquote empty enter': {
        key: 'Enter',
        collapsed: true,
        format: ['blockquote'],
        empty: true,
        handler() {
          this.quill.format('blockquote', false, Quill$1.sources.USER);
        }
      },
      'list empty enter': {
        key: 'Enter',
        collapsed: true,
        format: ['list'],
        empty: true,
        handler(range, context) {
          const formats = {
            list: false
          };
          if (context.format.indent) {
            formats.indent = false;
          }
          this.quill.formatLine(range.index, range.length, formats, Quill$1.sources.USER);
        }
      },
      'checklist enter': {
        key: 'Enter',
        collapsed: true,
        format: {
          list: 'checked'
        },
        handler(range) {
          const [line, offset] = this.quill.getLine(range.index);
          const formats = {
            // @ts-expect-error Fix me later
            ...line.formats(),
            list: 'checked'
          };
          const delta = new Delta().retain(range.index).insert('\n', formats)
          // @ts-expect-error Fix me later
          .retain(line.length() - offset - 1).retain(1, {
            list: 'unchecked'
          });
          this.quill.updateContents(delta, Quill$1.sources.USER);
          this.quill.setSelection(range.index + 1, Quill$1.sources.SILENT);
          this.quill.scrollSelectionIntoView();
        }
      },
      'header enter': {
        key: 'Enter',
        collapsed: true,
        format: ['header'],
        suffix: /^$/,
        handler(range, context) {
          const [line, offset] = this.quill.getLine(range.index);
          const delta = new Delta().retain(range.index).insert('\n', context.format)
          // @ts-expect-error Fix me later
          .retain(line.length() - offset - 1).retain(1, {
            header: null
          });
          this.quill.updateContents(delta, Quill$1.sources.USER);
          this.quill.setSelection(range.index + 1, Quill$1.sources.SILENT);
          this.quill.scrollSelectionIntoView();
        }
      },
      'table backspace': {
        key: 'Backspace',
        format: ['table'],
        collapsed: true,
        offset: 0,
        handler() {}
      },
      'table delete': {
        key: 'Delete',
        format: ['table'],
        collapsed: true,
        suffix: /^$/,
        handler() {}
      },
      'table enter': {
        key: 'Enter',
        shiftKey: null,
        format: ['table'],
        handler(range) {
          const module = this.quill.getModule('table');
          if (module) {
            // @ts-expect-error
            const [table, row, cell, offset] = module.getTable(range);
            const shift = tableSide(table, row, cell, offset);
            if (shift == null) return;
            let index = table.offset();
            if (shift < 0) {
              const delta = new Delta().retain(index).insert('\n');
              this.quill.updateContents(delta, Quill$1.sources.USER);
              this.quill.setSelection(range.index + 1, range.length, Quill$1.sources.SILENT);
            } else if (shift > 0) {
              index += table.length();
              const delta = new Delta().retain(index).insert('\n');
              this.quill.updateContents(delta, Quill$1.sources.USER);
              this.quill.setSelection(index, Quill$1.sources.USER);
            }
          }
        }
      },
      'table tab': {
        key: 'Tab',
        shiftKey: null,
        format: ['table'],
        handler(range, context) {
          const {
            event,
            line: cell
          } = context;
          const offset = cell.offset(this.quill.scroll);
          if (event.shiftKey) {
            this.quill.setSelection(offset - 1, Quill$1.sources.USER);
          } else {
            this.quill.setSelection(offset + cell.length(), Quill$1.sources.USER);
          }
        }
      },
      'list autofill': {
        key: ' ',
        shiftKey: null,
        collapsed: true,
        format: {
          'code-block': false,
          blockquote: false,
          table: false
        },
        prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
        handler(range, context) {
          if (this.quill.scroll.query('list') == null) return true;
          const {
            length
          } = context.prefix;
          const [line, offset] = this.quill.getLine(range.index);
          if (offset > length) return true;
          let value;
          switch (context.prefix.trim()) {
            case '[]':
            case '[ ]':
              value = 'unchecked';
              break;
            case '[x]':
              value = 'checked';
              break;
            case '-':
            case '*':
              value = 'bullet';
              break;
            default:
              value = 'ordered';
          }
          this.quill.insertText(range.index, ' ', Quill$1.sources.USER);
          this.quill.history.cutoff();
          const delta = new Delta().retain(range.index - offset).delete(length + 1)
          // @ts-expect-error Fix me later
          .retain(line.length() - 2 - offset).retain(1, {
            list: value
          });
          this.quill.updateContents(delta, Quill$1.sources.USER);
          this.quill.history.cutoff();
          this.quill.setSelection(range.index - length, Quill$1.sources.SILENT);
          return false;
        }
      },
      'code exit': {
        key: 'Enter',
        collapsed: true,
        format: ['code-block'],
        prefix: /^$/,
        suffix: /^\s*$/,
        handler(range) {
          const [line, offset] = this.quill.getLine(range.index);
          let numLines = 2;
          let cur = line;
          while (cur != null && cur.length() <= 1 && cur.formats()['code-block']) {
            // @ts-expect-error
            cur = cur.prev;
            numLines -= 1;
            // Requisite prev lines are empty
            if (numLines <= 0) {
              const delta = new Delta()
              // @ts-expect-error Fix me later
              .retain(range.index + line.length() - offset - 2).retain(1, {
                'code-block': null
              }).delete(1);
              this.quill.updateContents(delta, Quill$1.sources.USER);
              this.quill.setSelection(range.index - 1, Quill$1.sources.SILENT);
              return false;
            }
          }
          return true;
        }
      },
      'embed left': makeEmbedArrowHandler('ArrowLeft', false),
      'embed left shift': makeEmbedArrowHandler('ArrowLeft', true),
      'embed right': makeEmbedArrowHandler('ArrowRight', false),
      'embed right shift': makeEmbedArrowHandler('ArrowRight', true),
      'table down': makeTableArrowHandler(false),
      'table up': makeTableArrowHandler(true)
    }
  };
  Keyboard.DEFAULTS = defaultOptions;
  function makeCodeBlockHandler(indent) {
    return {
      key: 'Tab',
      shiftKey: !indent,
      format: {
        'code-block': true
      },
      handler(range, _ref) {
        let {
          event
        } = _ref;
        const CodeBlock = this.quill.scroll.query('code-block');
        // @ts-expect-error
        const {
          TAB
        } = CodeBlock;
        if (range.length === 0 && !event.shiftKey) {
          this.quill.insertText(range.index, TAB, Quill$1.sources.USER);
          this.quill.setSelection(range.index + TAB.length, Quill$1.sources.SILENT);
          return;
        }
        const lines = range.length === 0 ? this.quill.getLines(range.index, 1) : this.quill.getLines(range);
        let {
          index,
          length
        } = range;
        lines.forEach((line, i) => {
          if (indent) {
            line.insertAt(0, TAB);
            if (i === 0) {
              index += TAB.length;
            } else {
              length += TAB.length;
            }
            // @ts-expect-error Fix me later
          } else if (line.domNode.textContent.startsWith(TAB)) {
            line.deleteAt(0, TAB.length);
            if (i === 0) {
              index -= TAB.length;
            } else {
              length -= TAB.length;
            }
          }
        });
        this.quill.update(Quill$1.sources.USER);
        this.quill.setSelection(index, length, Quill$1.sources.SILENT);
      }
    };
  }
  function makeEmbedArrowHandler(key, shiftKey) {
    const where = key === 'ArrowLeft' ? 'prefix' : 'suffix';
    return {
      key,
      shiftKey,
      altKey: null,
      [where]: /^$/,
      handler(range) {
        let {
          index
        } = range;
        if (key === 'ArrowRight') {
          index += range.length + 1;
        }
        const [leaf] = this.quill.getLeaf(index);
        if (!(leaf instanceof EmbedBlot$1)) return true;
        if (key === 'ArrowLeft') {
          if (shiftKey) {
            this.quill.setSelection(range.index - 1, range.length + 1, Quill$1.sources.USER);
          } else {
            this.quill.setSelection(range.index - 1, Quill$1.sources.USER);
          }
        } else if (shiftKey) {
          this.quill.setSelection(range.index, range.length + 1, Quill$1.sources.USER);
        } else {
          this.quill.setSelection(range.index + range.length + 1, Quill$1.sources.USER);
        }
        return false;
      }
    };
  }
  function makeFormatHandler(format) {
    return {
      key: format[0],
      shortKey: true,
      handler(range, context) {
        this.quill.format(format, !context.format[format], Quill$1.sources.USER);
      }
    };
  }
  function makeTableArrowHandler(up) {
    return {
      key: up ? 'ArrowUp' : 'ArrowDown',
      collapsed: true,
      format: ['table'],
      handler(range, context) {
        // TODO move to table module
        const key = up ? 'prev' : 'next';
        const cell = context.line;
        const targetRow = cell.parent[key];
        if (targetRow != null) {
          if (targetRow.statics.blotName === 'table-row') {
            // @ts-expect-error
            let targetCell = targetRow.children.head;
            let cur = cell;
            while (cur.prev != null) {
              // @ts-expect-error
              cur = cur.prev;
              targetCell = targetCell.next;
            }
            const index = targetCell.offset(this.quill.scroll) + Math.min(context.offset, targetCell.length() - 1);
            this.quill.setSelection(index, 0, Quill$1.sources.USER);
          }
        } else {
          // @ts-expect-error
          const targetLine = cell.table()[key];
          if (targetLine != null) {
            if (up) {
              this.quill.setSelection(targetLine.offset(this.quill.scroll) + targetLine.length() - 1, 0, Quill$1.sources.USER);
            } else {
              this.quill.setSelection(targetLine.offset(this.quill.scroll), 0, Quill$1.sources.USER);
            }
          }
        }
        return false;
      }
    };
  }
  function normalize$2(binding) {
    if (typeof binding === 'string' || typeof binding === 'number') {
      binding = {
        key: binding
      };
    } else if (typeof binding === 'object') {
      binding = cloneDeep$1(binding);
    } else {
      return null;
    }
    if (binding.shortKey) {
      binding[SHORTKEY] = binding.shortKey;
      delete binding.shortKey;
    }
    return binding;
  }

  // TODO: Move into quill.ts or editor.ts
  function deleteRange(_ref2) {
    let {
      quill,
      range
    } = _ref2;
    const lines = quill.getLines(range);
    let formats = {};
    if (lines.length > 1) {
      const firstFormats = lines[0].formats();
      const lastFormats = lines[lines.length - 1].formats();
      formats = DeltaExports.AttributeMap.diff(lastFormats, firstFormats) || {};
    }
    quill.deleteText(range, Quill$1.sources.USER);
    if (Object.keys(formats).length > 0) {
      quill.formatLine(range.index, 1, formats, Quill$1.sources.USER);
    }
    quill.setSelection(range.index, Quill$1.sources.SILENT);
  }
  function tableSide(_table, row, cell, offset) {
    if (row.prev == null && row.next == null) {
      if (cell.prev == null && cell.next == null) {
        return offset === 0 ? -1 : 1;
      }
      return cell.prev == null ? -1 : 1;
    }
    if (row.prev == null) {
      return -1;
    }
    if (row.next == null) {
      return 1;
    }
    return null;
  }

  const normalWeightRegexp = /font-weight:\s*normal/;
  const blockTagNames = ['P', 'OL', 'UL'];
  const isBlockElement = element => {
    return element && blockTagNames.includes(element.tagName);
  };
  const normalizeEmptyLines = doc => {
    Array.from(doc.querySelectorAll('br')).filter(br => isBlockElement(br.previousElementSibling) && isBlockElement(br.nextElementSibling)).forEach(br => {
      br.parentNode?.removeChild(br);
    });
  };
  const normalizeFontWeight = doc => {
    Array.from(doc.querySelectorAll('b[style*="font-weight"]')).filter(node => node.getAttribute('style')?.match(normalWeightRegexp)).forEach(node => {
      const fragment = doc.createDocumentFragment();
      fragment.append(...node.childNodes);
      node.parentNode?.replaceChild(fragment, node);
    });
  };
  function normalize$1(doc) {
    if (doc.querySelector('[id^="docs-internal-guid-"]')) {
      normalizeFontWeight(doc);
      normalizeEmptyLines(doc);
    }
  }

  const ignoreRegexp = /\bmso-list:[^;]*ignore/i;
  const idRegexp = /\bmso-list:[^;]*\bl(\d+)/i;
  const indentRegexp = /\bmso-list:[^;]*\blevel(\d+)/i;
  const parseListItem = (element, html) => {
    const style = element.getAttribute('style');
    const idMatch = style?.match(idRegexp);
    if (!idMatch) {
      return null;
    }
    const id = Number(idMatch[1]);
    const indentMatch = style?.match(indentRegexp);
    const indent = indentMatch ? Number(indentMatch[1]) : 1;
    const typeRegexp = new RegExp(`@list l${id}:level${indent}\\s*\\{[^\\}]*mso-level-number-format:\\s*([\\w-]+)`, 'i');
    const typeMatch = html.match(typeRegexp);
    const type = typeMatch && typeMatch[1] === 'bullet' ? 'bullet' : 'ordered';
    return {
      id,
      indent,
      type,
      element
    };
  };

  // list items are represented as `p` tags with styles like `mso-list: l0 level1` where:
  // 1. "0" in "l0" means the list item id;
  // 2. "1" in "level1" means the indent level, starting from 1.
  const normalizeListItem = doc => {
    const msoList = Array.from(doc.querySelectorAll('[style*=mso-list]'));
    const ignored = [];
    const others = [];
    msoList.forEach(node => {
      const shouldIgnore = (node.getAttribute('style') || '').match(ignoreRegexp);
      if (shouldIgnore) {
        ignored.push(node);
      } else {
        others.push(node);
      }
    });

    // Each list item contains a marker wrapped with "mso-list: Ignore".
    ignored.forEach(node => node.parentNode?.removeChild(node));

    // The list stype is not defined inline with the tag, instead, it's in the
    // style tag so we need to pass the html as a string.
    const html = doc.documentElement.innerHTML;
    const listItems = others.map(element => parseListItem(element, html)).filter(parsed => parsed);
    while (listItems.length) {
      const childListItems = [];
      let current = listItems.shift();
      // Group continuous items into the same group (aka "ul")
      while (current) {
        childListItems.push(current);
        current = listItems.length && listItems[0]?.element === current.element.nextElementSibling &&
        // Different id means the next item doesn't belong to this group.
        listItems[0].id === current.id ? listItems.shift() : null;
      }
      const ul = document.createElement('ul');
      childListItems.forEach(listItem => {
        const li = document.createElement('li');
        li.setAttribute('data-list', listItem.type);
        if (listItem.indent > 1) {
          li.setAttribute('class', `ql-indent-${listItem.indent - 1}`);
        }
        li.innerHTML = listItem.element.innerHTML;
        ul.appendChild(li);
      });
      const element = childListItems[0]?.element;
      const {
        parentNode
      } = element ?? {};
      if (element) {
        parentNode?.replaceChild(ul, element);
      }
      childListItems.slice(1).forEach(_ref => {
        let {
          element: e
        } = _ref;
        parentNode?.removeChild(e);
      });
    }
  };
  function normalize(doc) {
    if (doc.documentElement.getAttribute('xmlns:w') === 'urn:schemas-microsoft-com:office:word') {
      normalizeListItem(doc);
    }
  }

  const NORMALIZERS = [normalize, normalize$1];
  const normalizeExternalHTML = doc => {
    if (doc.documentElement) {
      NORMALIZERS.forEach(normalize => {
        normalize(doc);
      });
    }
  };

  const debug$1 = namespace('quill:clipboard');
  const CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['ol, ul', matchList], ['pre', matchCodeBlock], ['tr', matchTable], ['b', createMatchAlias('bold')], ['i', createMatchAlias('italic')], ['strike', createMatchAlias('strike')], ['style', matchIgnore]];
  const ATTRIBUTE_ATTRIBUTORS = [AlignAttribute, DirectionAttribute].reduce((memo, attr) => {
    memo[attr.keyName] = attr;
    return memo;
  }, {});
  const STYLE_ATTRIBUTORS = [AlignStyle, BackgroundStyle, ColorStyle, DirectionStyle, FontStyle, SizeStyle].reduce((memo, attr) => {
    memo[attr.keyName] = attr;
    return memo;
  }, {});
  class Clipboard extends Module {
    static DEFAULTS = {
      matchers: []
    };
    constructor(quill, options) {
      super(quill, options);
      this.quill.root.addEventListener('copy', e => this.onCaptureCopy(e, false));
      this.quill.root.addEventListener('cut', e => this.onCaptureCopy(e, true));
      this.quill.root.addEventListener('paste', this.onCapturePaste.bind(this));
      this.matchers = [];
      CLIPBOARD_CONFIG.concat(this.options.matchers ?? []).forEach(_ref => {
        let [selector, matcher] = _ref;
        this.addMatcher(selector, matcher);
      });
    }
    addMatcher(selector, matcher) {
      this.matchers.push([selector, matcher]);
    }
    convert(_ref2) {
      let {
        html,
        text
      } = _ref2;
      let formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (formats[CodeBlock.blotName]) {
        return new Delta().insert(text || '', {
          [CodeBlock.blotName]: formats[CodeBlock.blotName]
        });
      }
      if (!html) {
        return new Delta().insert(text || '', formats);
      }
      const delta = this.convertHTML(html);
      // Remove trailing newline
      if (deltaEndsWith(delta, '\n') && (delta.ops[delta.ops.length - 1].attributes == null || formats.table)) {
        return delta.compose(new Delta().retain(delta.length() - 1).delete(1));
      }
      return delta;
    }
    normalizeHTML(doc) {
      normalizeExternalHTML(doc);
    }
    convertHTML(html) {
      const doc = new DOMParser().parseFromString(html, 'text/html');
      this.normalizeHTML(doc);
      const container = doc.body;
      const nodeMatches = new WeakMap();
      const [elementMatchers, textMatchers] = this.prepareMatching(container, nodeMatches);
      return traverse(this.quill.scroll, container, elementMatchers, textMatchers, nodeMatches);
    }
    dangerouslyPasteHTML(index, html) {
      let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Quill$1.sources.API;
      if (typeof index === 'string') {
        const delta = this.convert({
          html: index,
          text: ''
        });
        // @ts-expect-error
        this.quill.setContents(delta, html);
        this.quill.setSelection(0, Quill$1.sources.SILENT);
      } else {
        const paste = this.convert({
          html,
          text: ''
        });
        this.quill.updateContents(new Delta().retain(index).concat(paste), source);
        this.quill.setSelection(index + paste.length(), Quill$1.sources.SILENT);
      }
    }
    onCaptureCopy(e) {
      let isCut = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (e.defaultPrevented) return;
      e.preventDefault();
      const [range] = this.quill.selection.getRange();
      if (range == null) return;
      const {
        html,
        text
      } = this.onCopy(range, isCut);
      e.clipboardData?.setData('text/plain', text);
      e.clipboardData?.setData('text/html', html);
      if (isCut) {
        deleteRange({
          range,
          quill: this.quill
        });
      }
    }

    /*
     * https://www.iana.org/assignments/media-types/text/uri-list
     */
    normalizeURIList(urlList) {
      return urlList.split(/\r?\n/)
      // Ignore all comments
      .filter(url => url[0] !== '#').join('\n');
    }
    onCapturePaste(e) {
      if (e.defaultPrevented || !this.quill.isEnabled()) return;
      e.preventDefault();
      const range = this.quill.getSelection(true);
      if (range == null) return;
      const html = e.clipboardData?.getData('text/html');
      let text = e.clipboardData?.getData('text/plain');
      if (!html && !text) {
        const urlList = e.clipboardData?.getData('text/uri-list');
        if (urlList) {
          text = this.normalizeURIList(urlList);
        }
      }
      const files = Array.from(e.clipboardData?.files || []);
      if (!html && files.length > 0) {
        this.quill.uploader.upload(range, files);
        return;
      }
      if (html && files.length > 0) {
        const doc = new DOMParser().parseFromString(html, 'text/html');
        if (doc.body.childElementCount === 1 && doc.body.firstElementChild?.tagName === 'IMG') {
          this.quill.uploader.upload(range, files);
          return;
        }
      }
      this.onPaste(range, {
        html,
        text
      });
    }
    onCopy(range) {
      const text = this.quill.getText(range);
      const html = this.quill.getSemanticHTML(range);
      return {
        html,
        text
      };
    }
    onPaste(range, _ref3) {
      let {
        text,
        html
      } = _ref3;
      const formats = this.quill.getFormat(range.index);
      const pastedDelta = this.convert({
        text,
        html
      }, formats);
      debug$1.log('onPaste', pastedDelta, {
        text,
        html
      });
      const delta = new Delta().retain(range.index).delete(range.length).concat(pastedDelta);
      this.quill.updateContents(delta, Quill$1.sources.USER);
      // range.length contributes to delta.length()
      this.quill.setSelection(delta.length() - range.length, Quill$1.sources.SILENT);
      this.quill.scrollSelectionIntoView();
    }
    prepareMatching(container, nodeMatches) {
      const elementMatchers = [];
      const textMatchers = [];
      this.matchers.forEach(pair => {
        const [selector, matcher] = pair;
        switch (selector) {
          case Node.TEXT_NODE:
            textMatchers.push(matcher);
            break;
          case Node.ELEMENT_NODE:
            elementMatchers.push(matcher);
            break;
          default:
            Array.from(container.querySelectorAll(selector)).forEach(node => {
              if (nodeMatches.has(node)) {
                const matches = nodeMatches.get(node);
                matches?.push(matcher);
              } else {
                nodeMatches.set(node, [matcher]);
              }
            });
            break;
        }
      });
      return [elementMatchers, textMatchers];
    }
  }
  function applyFormat(delta, format, value, scroll) {
    if (!scroll.query(format)) {
      return delta;
    }
    return delta.reduce((newDelta, op) => {
      if (!op.insert) return newDelta;
      if (op.attributes && op.attributes[format]) {
        return newDelta.push(op);
      }
      const formats = value ? {
        [format]: value
      } : {};
      return newDelta.insert(op.insert, {
        ...formats,
        ...op.attributes
      });
    }, new Delta());
  }
  function deltaEndsWith(delta, text) {
    let endText = '';
    for (let i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i // eslint-disable-line no-plusplus
    ) {
      const op = delta.ops[i];
      if (typeof op.insert !== 'string') break;
      endText = op.insert + endText;
    }
    return endText.slice(-1 * text.length) === text;
  }
  function isLine(node, scroll) {
    if (!(node instanceof Element)) return false;
    const match = scroll.query(node);
    // @ts-expect-error
    if (match && match.prototype instanceof EmbedBlot$1) return false;
    return ['address', 'article', 'blockquote', 'canvas', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'iframe', 'li', 'main', 'nav', 'ol', 'output', 'p', 'pre', 'section', 'table', 'td', 'tr', 'ul', 'video'].includes(node.tagName.toLowerCase());
  }
  function isBetweenInlineElements(node, scroll) {
    return node.previousElementSibling && node.nextElementSibling && !isLine(node.previousElementSibling, scroll) && !isLine(node.nextElementSibling, scroll);
  }
  const preNodes = new WeakMap();
  function isPre(node) {
    if (node == null) return false;
    if (!preNodes.has(node)) {
      // @ts-expect-error
      if (node.tagName === 'PRE') {
        preNodes.set(node, true);
      } else {
        preNodes.set(node, isPre(node.parentNode));
      }
    }
    return preNodes.get(node);
  }
  function traverse(scroll, node, elementMatchers, textMatchers, nodeMatches) {
    // Post-order
    if (node.nodeType === node.TEXT_NODE) {
      return textMatchers.reduce((delta, matcher) => {
        return matcher(node, delta, scroll);
      }, new Delta());
    }
    if (node.nodeType === node.ELEMENT_NODE) {
      return Array.from(node.childNodes || []).reduce((delta, childNode) => {
        let childrenDelta = traverse(scroll, childNode, elementMatchers, textMatchers, nodeMatches);
        if (childNode.nodeType === node.ELEMENT_NODE) {
          childrenDelta = elementMatchers.reduce((reducedDelta, matcher) => {
            return matcher(childNode, reducedDelta, scroll);
          }, childrenDelta);
          childrenDelta = (nodeMatches.get(childNode) || []).reduce((reducedDelta, matcher) => {
            return matcher(childNode, reducedDelta, scroll);
          }, childrenDelta);
        }
        return delta.concat(childrenDelta);
      }, new Delta());
    }
    return new Delta();
  }
  function createMatchAlias(format) {
    return (_node, delta, scroll) => {
      return applyFormat(delta, format, true, scroll);
    };
  }
  function matchAttributor(node, delta, scroll) {
    const attributes = Attributor.keys(node);
    const classes = ClassAttributor$1.keys(node);
    const styles = StyleAttributor$1.keys(node);
    const formats = {};
    attributes.concat(classes).concat(styles).forEach(name => {
      let attr = scroll.query(name, Scope.ATTRIBUTE);
      if (attr != null) {
        formats[attr.attrName] = attr.value(node);
        if (formats[attr.attrName]) return;
      }
      attr = ATTRIBUTE_ATTRIBUTORS[name];
      if (attr != null && (attr.attrName === name || attr.keyName === name)) {
        formats[attr.attrName] = attr.value(node) || undefined;
      }
      attr = STYLE_ATTRIBUTORS[name];
      if (attr != null && (attr.attrName === name || attr.keyName === name)) {
        attr = STYLE_ATTRIBUTORS[name];
        formats[attr.attrName] = attr.value(node) || undefined;
      }
    });
    return Object.entries(formats).reduce((newDelta, _ref4) => {
      let [name, value] = _ref4;
      return applyFormat(newDelta, name, value, scroll);
    }, delta);
  }
  function matchBlot(node, delta, scroll) {
    const match = scroll.query(node);
    if (match == null) return delta;
    // @ts-expect-error
    if (match.prototype instanceof EmbedBlot$1) {
      const embed = {};
      // @ts-expect-error
      const value = match.value(node);
      if (value != null) {
        // @ts-expect-error
        embed[match.blotName] = value;
        // @ts-expect-error
        return new Delta().insert(embed, match.formats(node, scroll));
      }
    } else {
      // @ts-expect-error
      if (match.prototype instanceof BlockBlot$1 && !deltaEndsWith(delta, '\n')) {
        delta.insert('\n');
      }
      if ('blotName' in match && 'formats' in match && typeof match.formats === 'function') {
        return applyFormat(delta, match.blotName, match.formats(node, scroll), scroll);
      }
    }
    return delta;
  }
  function matchBreak(node, delta) {
    if (!deltaEndsWith(delta, '\n')) {
      delta.insert('\n');
    }
    return delta;
  }
  function matchCodeBlock(node, delta, scroll) {
    const match = scroll.query('code-block');
    const language = match && 'formats' in match && typeof match.formats === 'function' ? match.formats(node, scroll) : true;
    return applyFormat(delta, 'code-block', language, scroll);
  }
  function matchIgnore() {
    return new Delta();
  }
  function matchIndent(node, delta, scroll) {
    const match = scroll.query(node);
    if (match == null ||
    // @ts-expect-error
    match.blotName !== 'list' || !deltaEndsWith(delta, '\n')) {
      return delta;
    }
    let indent = -1;
    let parent = node.parentNode;
    while (parent != null) {
      // @ts-expect-error
      if (['OL', 'UL'].includes(parent.tagName)) {
        indent += 1;
      }
      parent = parent.parentNode;
    }
    if (indent <= 0) return delta;
    return delta.reduce((composed, op) => {
      if (!op.insert) return composed;
      if (op.attributes && typeof op.attributes.indent === 'number') {
        return composed.push(op);
      }
      return composed.insert(op.insert, {
        indent,
        ...(op.attributes || {})
      });
    }, new Delta());
  }
  function matchList(node, delta, scroll) {
    const element = node;
    let list = element.tagName === 'OL' ? 'ordered' : 'bullet';
    const checkedAttr = element.getAttribute('data-checked');
    if (checkedAttr) {
      list = checkedAttr === 'true' ? 'checked' : 'unchecked';
    }
    return applyFormat(delta, 'list', list, scroll);
  }
  function matchNewline(node, delta, scroll) {
    if (!deltaEndsWith(delta, '\n')) {
      if (isLine(node, scroll) && (node.childNodes.length > 0 || node instanceof HTMLParagraphElement)) {
        return delta.insert('\n');
      }
      if (delta.length() > 0 && node.nextSibling) {
        let nextSibling = node.nextSibling;
        while (nextSibling != null) {
          if (isLine(nextSibling, scroll)) {
            return delta.insert('\n');
          }
          const match = scroll.query(nextSibling);
          // @ts-expect-error
          if (match && match.prototype instanceof BlockEmbed) {
            return delta.insert('\n');
          }
          nextSibling = nextSibling.firstChild;
        }
      }
    }
    return delta;
  }
  function matchStyles(node, delta, scroll) {
    const formats = {};
    const style = node.style || {};
    if (style.fontStyle === 'italic') {
      formats.italic = true;
    }
    if (style.textDecoration === 'underline') {
      formats.underline = true;
    }
    if (style.textDecoration === 'line-through') {
      formats.strike = true;
    }
    if (style.fontWeight?.startsWith('bold') ||
    // @ts-expect-error Fix me later
    parseInt(style.fontWeight, 10) >= 700) {
      formats.bold = true;
    }
    delta = Object.entries(formats).reduce((newDelta, _ref5) => {
      let [name, value] = _ref5;
      return applyFormat(newDelta, name, value, scroll);
    }, delta);
    // @ts-expect-error
    if (parseFloat(style.textIndent || 0) > 0) {
      // Could be 0.5in
      return new Delta().insert('\t').concat(delta);
    }
    return delta;
  }
  function matchTable(node, delta, scroll) {
    const table = node.parentElement?.tagName === 'TABLE' ? node.parentElement : node.parentElement?.parentElement;
    if (table != null) {
      const rows = Array.from(table.querySelectorAll('tr'));
      const row = rows.indexOf(node) + 1;
      return applyFormat(delta, 'table', row, scroll);
    }
    return delta;
  }
  function matchText(node, delta, scroll) {
    // @ts-expect-error
    let text = node.data;
    // Word represents empty line with <o:p>&nbsp;</o:p>
    if (node.parentElement?.tagName === 'O:P') {
      return delta.insert(text.trim());
    }
    if (!isPre(node)) {
      if (text.trim().length === 0 && text.includes('\n') && !isBetweenInlineElements(node, scroll)) {
        return delta;
      }
      // convert all non-nbsp whitespace into regular space
      text = text.replace(/[^\S\u00a0]/g, ' ');
      // collapse consecutive spaces into one
      text = text.replace(/ {2,}/g, ' ');
      if (node.previousSibling == null && node.parentElement != null && isLine(node.parentElement, scroll) || node.previousSibling instanceof Element && isLine(node.previousSibling, scroll)) {
        // block structure means we don't need leading space
        text = text.replace(/^ /, '');
      }
      if (node.nextSibling == null && node.parentElement != null && isLine(node.parentElement, scroll) || node.nextSibling instanceof Element && isLine(node.nextSibling, scroll)) {
        // block structure means we don't need trailing space
        text = text.replace(/ $/, '');
      }
      // done removing whitespace and can normalize all to regular space
      text = text.replaceAll('\u00a0', ' ');
    }
    return delta.insert(text);
  }

  class History extends Module {
    static DEFAULTS = {
      delay: 1000,
      maxStack: 100,
      userOnly: false
    };
    lastRecorded = 0;
    ignoreChange = false;
    stack = {
      undo: [],
      redo: []
    };
    currentRange = null;
    constructor(quill, options) {
      super(quill, options);
      this.quill.on(Quill$1.events.EDITOR_CHANGE, (eventName, value, oldValue, source) => {
        if (eventName === Quill$1.events.SELECTION_CHANGE) {
          if (value && source !== Quill$1.sources.SILENT) {
            this.currentRange = value;
          }
        } else if (eventName === Quill$1.events.TEXT_CHANGE) {
          if (!this.ignoreChange) {
            if (!this.options.userOnly || source === Quill$1.sources.USER) {
              this.record(value, oldValue);
            } else {
              this.transform(value);
            }
          }
          this.currentRange = transformRange(this.currentRange, value);
        }
      });
      this.quill.keyboard.addBinding({
        key: 'z',
        shortKey: true
      }, this.undo.bind(this));
      this.quill.keyboard.addBinding({
        key: ['z', 'Z'],
        shortKey: true,
        shiftKey: true
      }, this.redo.bind(this));
      if (/Win/i.test(navigator.platform)) {
        this.quill.keyboard.addBinding({
          key: 'y',
          shortKey: true
        }, this.redo.bind(this));
      }
      this.quill.root.addEventListener('beforeinput', event => {
        if (event.inputType === 'historyUndo') {
          this.undo();
          event.preventDefault();
        } else if (event.inputType === 'historyRedo') {
          this.redo();
          event.preventDefault();
        }
      });
    }
    change(source, dest) {
      if (this.stack[source].length === 0) return;
      const item = this.stack[source].pop();
      if (!item) return;
      const base = this.quill.getContents();
      const inverseDelta = item.delta.invert(base);
      this.stack[dest].push({
        delta: inverseDelta,
        range: transformRange(item.range, inverseDelta)
      });
      this.lastRecorded = 0;
      this.ignoreChange = true;
      this.quill.updateContents(item.delta, Quill$1.sources.USER);
      this.ignoreChange = false;
      this.restoreSelection(item);
    }
    clear() {
      this.stack = {
        undo: [],
        redo: []
      };
    }
    cutoff() {
      this.lastRecorded = 0;
    }
    record(changeDelta, oldDelta) {
      if (changeDelta.ops.length === 0) return;
      this.stack.redo = [];
      let undoDelta = changeDelta.invert(oldDelta);
      let undoRange = this.currentRange;
      const timestamp = Date.now();
      if (
      // @ts-expect-error Fix me later
      this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
        const item = this.stack.undo.pop();
        if (item) {
          undoDelta = undoDelta.compose(item.delta);
          undoRange = item.range;
        }
      } else {
        this.lastRecorded = timestamp;
      }
      if (undoDelta.length() === 0) return;
      this.stack.undo.push({
        delta: undoDelta,
        range: undoRange
      });
      // @ts-expect-error Fix me later
      if (this.stack.undo.length > this.options.maxStack) {
        this.stack.undo.shift();
      }
    }
    redo() {
      this.change('redo', 'undo');
    }
    transform(delta) {
      transformStack(this.stack.undo, delta);
      transformStack(this.stack.redo, delta);
    }
    undo() {
      this.change('undo', 'redo');
    }
    restoreSelection(stackItem) {
      if (stackItem.range) {
        this.quill.setSelection(stackItem.range, Quill$1.sources.USER);
      } else {
        const index = getLastChangeIndex(this.quill.scroll, stackItem.delta);
        this.quill.setSelection(index, Quill$1.sources.USER);
      }
    }
  }
  function transformStack(stack, delta) {
    let remoteDelta = delta;
    for (let i = stack.length - 1; i >= 0; i -= 1) {
      const oldItem = stack[i];
      stack[i] = {
        delta: remoteDelta.transform(oldItem.delta, true),
        range: oldItem.range && transformRange(oldItem.range, remoteDelta)
      };
      remoteDelta = oldItem.delta.transform(remoteDelta);
      if (stack[i].delta.length() === 0) {
        stack.splice(i, 1);
      }
    }
  }
  function endsWithNewlineChange(scroll, delta) {
    const lastOp = delta.ops[delta.ops.length - 1];
    if (lastOp == null) return false;
    if (lastOp.insert != null) {
      return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
    }
    if (lastOp.attributes != null) {
      return Object.keys(lastOp.attributes).some(attr => {
        return scroll.query(attr, Scope.BLOCK) != null;
      });
    }
    return false;
  }
  function getLastChangeIndex(scroll, delta) {
    const deleteLength = delta.reduce((length, op) => {
      return length + (op.delete || 0);
    }, 0);
    let changeIndex = delta.length() - deleteLength;
    if (endsWithNewlineChange(scroll, delta)) {
      changeIndex -= 1;
    }
    return changeIndex;
  }
  function transformRange(range, delta) {
    if (!range) return range;
    const start = delta.transformPosition(range.index);
    const end = delta.transformPosition(range.index + range.length);
    return {
      index: start,
      length: end - start
    };
  }

  class Uploader extends Module {
    constructor(quill, options) {
      super(quill, options);
      quill.root.addEventListener('drop', e => {
        e.preventDefault();
        let native = null;
        if (document.caretRangeFromPoint) {
          native = document.caretRangeFromPoint(e.clientX, e.clientY);
          // @ts-expect-error
        } else if (document.caretPositionFromPoint) {
          // @ts-expect-error
          const position = document.caretPositionFromPoint(e.clientX, e.clientY);
          native = document.createRange();
          native.setStart(position.offsetNode, position.offset);
          native.setEnd(position.offsetNode, position.offset);
        }
        const normalized = native && quill.selection.normalizeNative(native);
        if (normalized) {
          const range = quill.selection.normalizedToRange(normalized);
          if (e.dataTransfer?.files) {
            this.upload(range, e.dataTransfer.files);
          }
        }
      });
    }
    upload(range, files) {
      const uploads = [];
      Array.from(files).forEach(file => {
        if (file && this.options.mimetypes?.includes(file.type)) {
          uploads.push(file);
        }
      });
      if (uploads.length > 0) {
        // @ts-expect-error Fix me later
        this.options.handler.call(this, range, uploads);
      }
    }
  }
  Uploader.DEFAULTS = {
    mimetypes: ['image/png', 'image/jpeg'],
    handler(range, files) {
      if (!this.quill.scroll.query('image')) {
        return;
      }
      const promises = files.map(file => {
        return new Promise(resolve => {
          const reader = new FileReader();
          reader.onload = () => {
            resolve(reader.result);
          };
          reader.readAsDataURL(file);
        });
      });
      Promise.all(promises).then(images => {
        const update = images.reduce((delta, image) => {
          return delta.insert({
            image
          });
        }, new Delta().retain(range.index).delete(range.length));
        this.quill.updateContents(update, Emitter.sources.USER);
        this.quill.setSelection(range.index + images.length, Emitter.sources.SILENT);
      });
    }
  };

  const INSERT_TYPES = ['insertText', 'insertReplacementText'];
  class Input extends Module {
    constructor(quill, options) {
      super(quill, options);
      quill.root.addEventListener('beforeinput', event => {
        this.handleBeforeInput(event);
      });

      // Gboard with English input on Android triggers `compositionstart` sometimes even
      // users are not going to type anything.
      if (!/Android/i.test(navigator.userAgent)) {
        quill.on(Quill$1.events.COMPOSITION_BEFORE_START, () => {
          this.handleCompositionStart();
        });
      }
    }
    deleteRange(range) {
      deleteRange({
        range,
        quill: this.quill
      });
    }
    replaceText(range) {
      let text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      if (range.length === 0) return false;
      if (text) {
        // Follow the native behavior that inherits the formats of the first character
        const formats = this.quill.getFormat(range.index, 1);
        this.deleteRange(range);
        this.quill.updateContents(new Delta().retain(range.index).insert(text, formats), Quill$1.sources.USER);
      } else {
        this.deleteRange(range);
      }
      this.quill.setSelection(range.index + text.length, 0, Quill$1.sources.SILENT);
      return true;
    }
    handleBeforeInput(event) {
      if (this.quill.composition.isComposing || event.defaultPrevented || !INSERT_TYPES.includes(event.inputType)) {
        return;
      }
      const staticRange = event.getTargetRanges ? event.getTargetRanges()[0] : null;
      if (!staticRange || staticRange.collapsed === true) {
        return;
      }
      const text = getPlainTextFromInputEvent(event);
      if (text == null) {
        return;
      }
      const normalized = this.quill.selection.normalizeNative(staticRange);
      const range = normalized ? this.quill.selection.normalizedToRange(normalized) : null;
      if (range && this.replaceText(range, text)) {
        event.preventDefault();
      }
    }
    handleCompositionStart() {
      const range = this.quill.getSelection();
      if (range) {
        this.replaceText(range);
      }
    }
  }
  function getPlainTextFromInputEvent(event) {
    // When `inputType` is "insertText":
    // - `event.data` should be string (Safari uses `event.dataTransfer`).
    // - `event.dataTransfer` should be null.
    // When `inputType` is "insertReplacementText":
    // - `event.data` should be null.
    // - `event.dataTransfer` should contain "text/plain" data.

    if (typeof event.data === 'string') {
      return event.data;
    }
    if (event.dataTransfer?.types.includes('text/plain')) {
      return event.dataTransfer.getData('text/plain');
    }
    return null;
  }

  const isMac = /Mac/i.test(navigator.platform);

  // Export for testing
  const TTL_FOR_VALID_SELECTION_CHANGE = 100;

  // A loose check to determine if the shortcut can move the caret before a UI node:
  // <ANY_PARENT>[CARET]<div class="ql-ui"></div>[CONTENT]</ANY_PARENT>
  const canMoveCaretBeforeUINode = event => {
    if (event.key === 'ArrowLeft' || event.key === 'ArrowRight' ||
    // RTL scripts or moving from the end of the previous line
    event.key === 'ArrowUp' || event.key === 'ArrowDown' || event.key === 'Home') {
      return true;
    }
    if (isMac && event.key === 'a' && event.ctrlKey === true) {
      return true;
    }
    return false;
  };
  class UINode extends Module {
    isListening = false;
    selectionChangeDeadline = 0;
    constructor(quill, options) {
      super(quill, options);
      this.handleArrowKeys();
      this.handleNavigationShortcuts();
    }
    handleArrowKeys() {
      this.quill.keyboard.addBinding({
        key: ['ArrowLeft', 'ArrowRight'],
        offset: 0,
        shiftKey: null,
        handler(range, _ref) {
          let {
            line,
            event
          } = _ref;
          if (!(line instanceof ParentBlot$1) || !line.uiNode) {
            return true;
          }
          const isRTL = getComputedStyle(line.domNode)['direction'] === 'rtl';
          if (isRTL && event.key !== 'ArrowRight' || !isRTL && event.key !== 'ArrowLeft') {
            return true;
          }
          this.quill.setSelection(range.index - 1, range.length + (event.shiftKey ? 1 : 0), Quill$1.sources.USER);
          return false;
        }
      });
    }
    handleNavigationShortcuts() {
      this.quill.root.addEventListener('keydown', event => {
        if (!event.defaultPrevented && canMoveCaretBeforeUINode(event)) {
          this.ensureListeningToSelectionChange();
        }
      });
    }

    /**
     * We only listen to the `selectionchange` event when
     * there is an intention of moving the caret to the beginning using shortcuts.
     * This is primarily implemented to prevent infinite loops, as we are changing
     * the selection within the handler of a `selectionchange` event.
     */
    ensureListeningToSelectionChange() {
      this.selectionChangeDeadline = Date.now() + TTL_FOR_VALID_SELECTION_CHANGE;
      if (this.isListening) return;
      this.isListening = true;
      const listener = () => {
        this.isListening = false;
        if (Date.now() <= this.selectionChangeDeadline) {
          this.handleSelectionChange();
        }
      };
      document.addEventListener('selectionchange', listener, {
        once: true
      });
    }
    handleSelectionChange() {
      const selection = document.getSelection();
      if (!selection) return;
      const range = selection.getRangeAt(0);
      if (range.collapsed !== true || range.startOffset !== 0) return;
      const line = this.quill.scroll.find(range.startContainer);
      if (!(line instanceof ParentBlot$1) || !line.uiNode) return;
      const newRange = document.createRange();
      newRange.setStartAfter(line.uiNode);
      newRange.setEndAfter(line.uiNode);
      selection.removeAllRanges();
      selection.addRange(newRange);
    }
  }

  Quill$1.register({
    'blots/block': Block,
    'blots/block/embed': BlockEmbed,
    'blots/break': Break,
    'blots/container': Container,
    'blots/cursor': Cursor,
    'blots/embed': Embed,
    'blots/inline': Inline,
    'blots/scroll': Scroll,
    'blots/text': Text$1,
    'modules/clipboard': Clipboard,
    'modules/history': History,
    'modules/keyboard': Keyboard,
    'modules/uploader': Uploader,
    'modules/input': Input,
    'modules/uiNode': UINode
  });

  class IndentAttributor extends ClassAttributor$1 {
    add(node, value) {
      let normalizedValue = 0;
      if (value === '+1' || value === '-1') {
        const indent = this.value(node) || 0;
        normalizedValue = value === '+1' ? indent + 1 : indent - 1;
      } else if (typeof value === 'number') {
        normalizedValue = value;
      }
      if (normalizedValue === 0) {
        this.remove(node);
        return true;
      }
      return super.add(node, normalizedValue.toString());
    }
    canAdd(node, value) {
      return super.canAdd(node, value) || super.canAdd(node, parseInt(value, 10));
    }
    value(node) {
      return parseInt(super.value(node), 10) || undefined; // Don't return NaN
    }
  }
  const IndentClass = new IndentAttributor('indent', 'ql-indent', {
    scope: Scope.BLOCK,
    // @ts-expect-error
    whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
  });

  class Blockquote extends Block {
    static blotName = 'blockquote';
    static tagName = 'blockquote';
  }

  class Header extends Block {
    static blotName = 'header';
    static tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];
    static formats(domNode) {
      return this.tagName.indexOf(domNode.tagName) + 1;
    }
  }

  class ListContainer extends Container {}
  ListContainer.blotName = 'list-container';
  ListContainer.tagName = 'OL';
  class ListItem extends Block {
    static create(value) {
      const node = super.create();
      node.setAttribute('data-list', value);
      return node;
    }
    static formats(domNode) {
      return domNode.getAttribute('data-list') || undefined;
    }
    static register() {
      Quill$1.register(ListContainer);
    }
    constructor(scroll, domNode) {
      super(scroll, domNode);
      const ui = domNode.ownerDocument.createElement('span');
      const listEventHandler = e => {
        if (!scroll.isEnabled()) return;
        const format = this.statics.formats(domNode, scroll);
        if (format === 'checked') {
          this.format('list', 'unchecked');
          e.preventDefault();
        } else if (format === 'unchecked') {
          this.format('list', 'checked');
          e.preventDefault();
        }
      };
      ui.addEventListener('mousedown', listEventHandler);
      ui.addEventListener('touchstart', listEventHandler);
      this.attachUI(ui);
    }
    format(name, value) {
      if (name === this.statics.blotName && value) {
        this.domNode.setAttribute('data-list', value);
      } else {
        super.format(name, value);
      }
    }
  }
  ListItem.blotName = 'list';
  ListItem.tagName = 'LI';
  ListContainer.allowedChildren = [ListItem];
  ListItem.requiredContainer = ListContainer;

  class Bold extends Inline {
    static blotName = 'bold';
    static tagName = ['STRONG', 'B'];
    static create() {
      return super.create();
    }
    static formats() {
      return true;
    }
    optimize(context) {
      super.optimize(context);
      if (this.domNode.tagName !== this.statics.tagName[0]) {
        this.replaceWith(this.statics.blotName);
      }
    }
  }

  class Italic extends Bold {
    static blotName = 'italic';
    static tagName = ['EM', 'I'];
  }

  class Link extends Inline {
    static blotName = 'link';
    static tagName = 'A';
    static SANITIZED_URL = 'about:blank';
    static PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel', 'sms'];
    static create(value) {
      const node = super.create(value);
      node.setAttribute('href', this.sanitize(value));
      node.setAttribute('rel', 'noopener noreferrer');
      node.setAttribute('target', '_blank');
      return node;
    }
    static formats(domNode) {
      return domNode.getAttribute('href');
    }
    static sanitize(url) {
      return sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
    }
    format(name, value) {
      if (name !== this.statics.blotName || !value) {
        super.format(name, value);
      } else {
        // @ts-expect-error
        this.domNode.setAttribute('href', this.constructor.sanitize(value));
      }
    }
  }
  function sanitize(url, protocols) {
    const anchor = document.createElement('a');
    anchor.href = url;
    const protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
    return protocols.indexOf(protocol) > -1;
  }

  class Script extends Inline {
    static blotName = 'script';
    static tagName = ['SUB', 'SUP'];
    static create(value) {
      if (value === 'super') {
        return document.createElement('sup');
      }
      if (value === 'sub') {
        return document.createElement('sub');
      }
      return super.create(value);
    }
    static formats(domNode) {
      if (domNode.tagName === 'SUB') return 'sub';
      if (domNode.tagName === 'SUP') return 'super';
      return undefined;
    }
  }

  class Strike extends Bold {
    static blotName = 'strike';
    static tagName = ['S', 'STRIKE'];
  }

  class Underline extends Inline {
    static blotName = 'underline';
    static tagName = 'U';
  }

  class Formula extends Embed {
    static blotName = 'formula';
    static className = 'ql-formula';
    static tagName = 'SPAN';
    static create(value) {
      // @ts-expect-error
      if (window.katex == null) {
        throw new Error('Formula module requires KaTeX.');
      }
      const node = super.create(value);
      if (typeof value === 'string') {
        // @ts-expect-error
        window.katex.render(value, node, {
          throwOnError: false,
          errorColor: '#f00'
        });
        node.setAttribute('data-value', value);
      }
      return node;
    }
    static value(domNode) {
      return domNode.getAttribute('data-value');
    }
    html() {
      const {
        formula
      } = this.value();
      return `<span>${formula}</span>`;
    }
  }

  const ATTRIBUTES$1 = ['alt', 'height', 'width'];
  class Image extends EmbedBlot$1 {
    static blotName = 'image';
    static tagName = 'IMG';
    static create(value) {
      const node = super.create(value);
      if (typeof value === 'string') {
        node.setAttribute('src', this.sanitize(value));
      }
      return node;
    }
    static formats(domNode) {
      return ATTRIBUTES$1.reduce((formats, attribute) => {
        if (domNode.hasAttribute(attribute)) {
          formats[attribute] = domNode.getAttribute(attribute);
        }
        return formats;
      }, {});
    }
    static match(url) {
      return /\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url);
    }
    static sanitize(url) {
      return sanitize(url, ['http', 'https', 'data']) ? url : '//:0';
    }
    static value(domNode) {
      return domNode.getAttribute('src');
    }
    format(name, value) {
      if (ATTRIBUTES$1.indexOf(name) > -1) {
        if (value) {
          this.domNode.setAttribute(name, value);
        } else {
          this.domNode.removeAttribute(name);
        }
      } else {
        super.format(name, value);
      }
    }
  }

  const ATTRIBUTES = ['height', 'width'];
  class Video extends BlockEmbed {
    static blotName = 'video';
    static className = 'ql-video';
    static tagName = 'IFRAME';
    static create(value) {
      const node = super.create(value);
      node.setAttribute('frameborder', '0');
      node.setAttribute('allowfullscreen', 'true');
      node.setAttribute('src', this.sanitize(value));
      return node;
    }
    static formats(domNode) {
      return ATTRIBUTES.reduce((formats, attribute) => {
        if (domNode.hasAttribute(attribute)) {
          formats[attribute] = domNode.getAttribute(attribute);
        }
        return formats;
      }, {});
    }
    static sanitize(url) {
      return Link.sanitize(url);
    }
    static value(domNode) {
      return domNode.getAttribute('src');
    }
    format(name, value) {
      if (ATTRIBUTES.indexOf(name) > -1) {
        if (value) {
          this.domNode.setAttribute(name, value);
        } else {
          this.domNode.removeAttribute(name);
        }
      } else {
        super.format(name, value);
      }
    }
    html() {
      const {
        video
      } = this.value();
      return `<a href="${video}">${video}</a>`;
    }
  }

  const TokenAttributor = new ClassAttributor$1('code-token', 'hljs', {
    scope: Scope.INLINE
  });
  class CodeToken extends Inline {
    static formats(node, scroll) {
      while (node != null && node !== scroll.domNode) {
        if (node.classList && node.classList.contains(CodeBlock.className)) {
          // @ts-expect-error
          return super.formats(node, scroll);
        }
        // @ts-expect-error
        node = node.parentNode;
      }
      return undefined;
    }
    constructor(scroll, domNode, value) {
      // @ts-expect-error
      super(scroll, domNode, value);
      TokenAttributor.add(this.domNode, value);
    }
    format(format, value) {
      if (format !== CodeToken.blotName) {
        super.format(format, value);
      } else if (value) {
        TokenAttributor.add(this.domNode, value);
      } else {
        TokenAttributor.remove(this.domNode);
        this.domNode.classList.remove(this.statics.className);
      }
    }
    optimize() {
      // @ts-expect-error
      super.optimize(...arguments);
      if (!TokenAttributor.value(this.domNode)) {
        this.unwrap();
      }
    }
  }
  CodeToken.blotName = 'code-token';
  CodeToken.className = 'ql-token';
  class SyntaxCodeBlock extends CodeBlock {
    static create(value) {
      const domNode = super.create(value);
      if (typeof value === 'string') {
        domNode.setAttribute('data-language', value);
      }
      return domNode;
    }
    static formats(domNode) {
      // @ts-expect-error
      return domNode.getAttribute('data-language') || 'plain';
    }
    static register() {} // Syntax module will register

    format(name, value) {
      if (name === this.statics.blotName && value) {
        // @ts-expect-error
        this.domNode.setAttribute('data-language', value);
      } else {
        super.format(name, value);
      }
    }
    replaceWith(name, value) {
      this.formatAt(0, this.length(), CodeToken.blotName, false);
      return super.replaceWith(name, value);
    }
  }
  class SyntaxCodeBlockContainer extends CodeBlockContainer {
    attach() {
      super.attach();
      this.forceNext = false;
      // @ts-expect-error
      this.scroll.emitMount(this);
    }
    format(name, value) {
      if (name === SyntaxCodeBlock.blotName) {
        this.forceNext = true;
        this.children.forEach(child => {
          // @ts-expect-error
          child.format(name, value);
        });
      }
    }
    formatAt(index, length, name, value) {
      if (name === SyntaxCodeBlock.blotName) {
        this.forceNext = true;
      }
      super.formatAt(index, length, name, value);
    }
    highlight(highlight) {
      let forced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (this.children.head == null) return;
      const nodes = Array.from(this.domNode.childNodes).filter(node => node !== this.uiNode);
      const text = `${nodes.map(node => node.textContent).join('\n')}\n`;
      const language = SyntaxCodeBlock.formats(this.children.head.domNode);
      if (forced || this.forceNext || this.cachedText !== text) {
        if (text.trim().length > 0 || this.cachedText == null) {
          const oldDelta = this.children.reduce((delta, child) => {
            // @ts-expect-error
            return delta.concat(blockDelta(child, false));
          }, new Delta());
          const delta = highlight(text, language);
          oldDelta.diff(delta).reduce((index, _ref) => {
            let {
              retain,
              attributes
            } = _ref;
            // Should be all retains
            if (!retain) return index;
            if (attributes) {
              Object.keys(attributes).forEach(format => {
                if ([SyntaxCodeBlock.blotName, CodeToken.blotName].includes(format)) {
                  // @ts-expect-error
                  this.formatAt(index, retain, format, attributes[format]);
                }
              });
            }
            // @ts-expect-error
            return index + retain;
          }, 0);
        }
        this.cachedText = text;
        this.forceNext = false;
      }
    }
    html(index, length) {
      const [codeBlock] = this.children.find(index);
      const language = codeBlock ? SyntaxCodeBlock.formats(codeBlock.domNode) : 'plain';
      return `<pre data-language="${language}">\n${escapeText(this.code(index, length))}\n</pre>`;
    }
    optimize(context) {
      super.optimize(context);
      if (this.parent != null && this.children.head != null && this.uiNode != null) {
        const language = SyntaxCodeBlock.formats(this.children.head.domNode);
        // @ts-expect-error
        if (language !== this.uiNode.value) {
          // @ts-expect-error
          this.uiNode.value = language;
        }
      }
    }
  }
  SyntaxCodeBlockContainer.allowedChildren = [SyntaxCodeBlock];
  SyntaxCodeBlock.requiredContainer = SyntaxCodeBlockContainer;
  SyntaxCodeBlock.allowedChildren = [CodeToken, Cursor, Text$1, Break];
  const highlight = (lib, language, text) => {
    if (typeof lib.versionString === 'string') {
      const majorVersion = lib.versionString.split('.')[0];
      if (parseInt(majorVersion, 10) >= 11) {
        return lib.highlight(text, {
          language
        }).value;
      }
    }
    return lib.highlight(language, text).value;
  };
  class Syntax extends Module {
    static register() {
      Quill$1.register(CodeToken, true);
      Quill$1.register(SyntaxCodeBlock, true);
      Quill$1.register(SyntaxCodeBlockContainer, true);
    }
    constructor(quill, options) {
      super(quill, options);
      if (this.options.hljs == null) {
        throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
      }
      // @ts-expect-error Fix me later
      this.languages = this.options.languages.reduce((memo, _ref2) => {
        let {
          key
        } = _ref2;
        memo[key] = true;
        return memo;
      }, {});
      this.highlightBlot = this.highlightBlot.bind(this);
      this.initListener();
      this.initTimer();
    }
    initListener() {
      this.quill.on(Quill$1.events.SCROLL_BLOT_MOUNT, blot => {
        if (!(blot instanceof SyntaxCodeBlockContainer)) return;
        const select = this.quill.root.ownerDocument.createElement('select');
        // @ts-expect-error Fix me later
        this.options.languages.forEach(_ref3 => {
          let {
            key,
            label
          } = _ref3;
          const option = select.ownerDocument.createElement('option');
          option.textContent = label;
          option.setAttribute('value', key);
          select.appendChild(option);
        });
        select.addEventListener('change', () => {
          blot.format(SyntaxCodeBlock.blotName, select.value);
          this.quill.root.focus(); // Prevent scrolling
          this.highlight(blot, true);
        });
        if (blot.uiNode == null) {
          blot.attachUI(select);
          if (blot.children.head) {
            select.value = SyntaxCodeBlock.formats(blot.children.head.domNode);
          }
        }
      });
    }
    initTimer() {
      let timer = null;
      this.quill.on(Quill$1.events.SCROLL_OPTIMIZE, () => {
        if (timer) {
          clearTimeout(timer);
        }
        timer = setTimeout(() => {
          this.highlight();
          timer = null;
        }, this.options.interval);
      });
    }
    highlight() {
      let blot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (this.quill.selection.composing) return;
      this.quill.update(Quill$1.sources.USER);
      const range = this.quill.getSelection();
      const blots = blot == null ? this.quill.scroll.descendants(SyntaxCodeBlockContainer) : [blot];
      blots.forEach(container => {
        container.highlight(this.highlightBlot, force);
      });
      this.quill.update(Quill$1.sources.SILENT);
      if (range != null) {
        this.quill.setSelection(range, Quill$1.sources.SILENT);
      }
    }
    highlightBlot(text) {
      let language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'plain';
      language = this.languages[language] ? language : 'plain';
      if (language === 'plain') {
        return escapeText(text).split('\n').reduce((delta, line, i) => {
          if (i !== 0) {
            delta.insert('\n', {
              [CodeBlock.blotName]: language
            });
          }
          return delta.insert(line);
        }, new Delta());
      }
      const container = this.quill.root.ownerDocument.createElement('div');
      container.classList.add(CodeBlock.className);
      container.innerHTML = highlight(this.options.hljs, language, text);
      return traverse(this.quill.scroll, container, [(node, delta) => {
        // @ts-expect-error
        const value = TokenAttributor.value(node);
        if (value) {
          return delta.compose(new Delta().retain(delta.length(), {
            [CodeToken.blotName]: value
          }));
        }
        return delta;
      }], [(node, delta) => {
        // @ts-expect-error
        return node.data.split('\n').reduce((memo, nodeText, i) => {
          if (i !== 0) memo.insert('\n', {
            [CodeBlock.blotName]: language
          });
          return memo.insert(nodeText);
        }, delta);
      }], new WeakMap());
    }
  }
  Syntax.DEFAULTS = {
    hljs: (() => {
      return window.hljs;
    })(),
    interval: 1000,
    languages: [{
      key: 'plain',
      label: 'Plain'
    }, {
      key: 'bash',
      label: 'Bash'
    }, {
      key: 'cpp',
      label: 'C++'
    }, {
      key: 'cs',
      label: 'C#'
    }, {
      key: 'css',
      label: 'CSS'
    }, {
      key: 'diff',
      label: 'Diff'
    }, {
      key: 'xml',
      label: 'HTML/XML'
    }, {
      key: 'java',
      label: 'Java'
    }, {
      key: 'javascript',
      label: 'JavaScript'
    }, {
      key: 'markdown',
      label: 'Markdown'
    }, {
      key: 'php',
      label: 'PHP'
    }, {
      key: 'python',
      label: 'Python'
    }, {
      key: 'ruby',
      label: 'Ruby'
    }, {
      key: 'sql',
      label: 'SQL'
    }]
  };

  class TableCell extends Block {
    static blotName = 'table';
    static tagName = 'TD';
    static create(value) {
      const node = super.create();
      if (value) {
        node.setAttribute('data-row', value);
      } else {
        node.setAttribute('data-row', tableId());
      }
      return node;
    }
    static formats(domNode) {
      if (domNode.hasAttribute('data-row')) {
        return domNode.getAttribute('data-row');
      }
      return undefined;
    }
    cellOffset() {
      if (this.parent) {
        return this.parent.children.indexOf(this);
      }
      return -1;
    }
    format(name, value) {
      if (name === TableCell.blotName && value) {
        this.domNode.setAttribute('data-row', value);
      } else {
        super.format(name, value);
      }
    }
    row() {
      return this.parent;
    }
    rowOffset() {
      if (this.row()) {
        return this.row().rowOffset();
      }
      return -1;
    }
    table() {
      return this.row() && this.row().table();
    }
  }
  class TableRow extends Container {
    static blotName = 'table-row';
    static tagName = 'TR';
    checkMerge() {
      // @ts-expect-error
      if (super.checkMerge() && this.next.children.head != null) {
        // @ts-expect-error
        const thisHead = this.children.head.formats();
        // @ts-expect-error
        const thisTail = this.children.tail.formats();
        // @ts-expect-error
        const nextHead = this.next.children.head.formats();
        // @ts-expect-error
        const nextTail = this.next.children.tail.formats();
        return thisHead.table === thisTail.table && thisHead.table === nextHead.table && thisHead.table === nextTail.table;
      }
      return false;
    }
    optimize(context) {
      super.optimize(context);
      this.children.forEach(child => {
        if (child.next == null) return;
        const childFormats = child.formats();
        const nextFormats = child.next.formats();
        if (childFormats.table !== nextFormats.table) {
          const next = this.splitAfter(child);
          if (next) {
            // @ts-expect-error TODO: parameters of optimize() should be a optional
            next.optimize();
          }
          // We might be able to merge with prev now
          if (this.prev) {
            // @ts-expect-error TODO: parameters of optimize() should be a optional
            this.prev.optimize();
          }
        }
      });
    }
    rowOffset() {
      if (this.parent) {
        return this.parent.children.indexOf(this);
      }
      return -1;
    }
    table() {
      return this.parent && this.parent.parent;
    }
  }
  class TableBody extends Container {
    static blotName = 'table-body';
    static tagName = 'TBODY';
  }
  class TableContainer extends Container {
    static blotName = 'table-container';
    static tagName = 'TABLE';
    balanceCells() {
      const rows = this.descendants(TableRow);
      const maxColumns = rows.reduce((max, row) => {
        return Math.max(row.children.length, max);
      }, 0);
      rows.forEach(row => {
        new Array(maxColumns - row.children.length).fill(0).forEach(() => {
          let value;
          if (row.children.head != null) {
            value = TableCell.formats(row.children.head.domNode);
          }
          const blot = this.scroll.create(TableCell.blotName, value);
          row.appendChild(blot);
          // @ts-expect-error TODO: parameters of optimize() should be a optional
          blot.optimize(); // Add break blot
        });
      });
    }
    cells(column) {
      return this.rows().map(row => row.children.at(column));
    }
    deleteColumn(index) {
      // @ts-expect-error
      const [body] = this.descendant(TableBody);
      if (body == null || body.children.head == null) return;
      body.children.forEach(row => {
        const cell = row.children.at(index);
        if (cell != null) {
          cell.remove();
        }
      });
    }
    insertColumn(index) {
      // @ts-expect-error
      const [body] = this.descendant(TableBody);
      if (body == null || body.children.head == null) return;
      body.children.forEach(row => {
        const ref = row.children.at(index);
        // @ts-expect-error
        const value = TableCell.formats(row.children.head.domNode);
        const cell = this.scroll.create(TableCell.blotName, value);
        row.insertBefore(cell, ref);
      });
    }
    insertRow(index) {
      // @ts-expect-error
      const [body] = this.descendant(TableBody);
      if (body == null || body.children.head == null) return;
      const id = tableId();
      const row = this.scroll.create(TableRow.blotName);
      body.children.head.children.forEach(() => {
        const cell = this.scroll.create(TableCell.blotName, id);
        row.appendChild(cell);
      });
      const ref = body.children.at(index);
      body.insertBefore(row, ref);
    }
    rows() {
      const body = this.children.head;
      if (body == null) return [];
      return body.children.map(row => row);
    }
  }
  TableContainer.allowedChildren = [TableBody];
  TableBody.requiredContainer = TableContainer;
  TableBody.allowedChildren = [TableRow];
  TableRow.requiredContainer = TableBody;
  TableRow.allowedChildren = [TableCell];
  TableCell.requiredContainer = TableRow;
  function tableId() {
    const id = Math.random().toString(36).slice(2, 6);
    return `row-${id}`;
  }

  class Table extends Module {
    static register() {
      Quill$1.register(TableCell);
      Quill$1.register(TableRow);
      Quill$1.register(TableBody);
      Quill$1.register(TableContainer);
    }
    constructor() {
      super(...arguments);
      this.listenBalanceCells();
    }
    balanceTables() {
      this.quill.scroll.descendants(TableContainer).forEach(table => {
        table.balanceCells();
      });
    }
    deleteColumn() {
      const [table,, cell] = this.getTable();
      if (cell == null) return;
      // @ts-expect-error
      table.deleteColumn(cell.cellOffset());
      this.quill.update(Quill$1.sources.USER);
    }
    deleteRow() {
      const [, row] = this.getTable();
      if (row == null) return;
      row.remove();
      this.quill.update(Quill$1.sources.USER);
    }
    deleteTable() {
      const [table] = this.getTable();
      if (table == null) return;
      // @ts-expect-error
      const offset = table.offset();
      // @ts-expect-error
      table.remove();
      this.quill.update(Quill$1.sources.USER);
      this.quill.setSelection(offset, Quill$1.sources.SILENT);
    }
    getTable() {
      let range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.quill.getSelection();
      if (range == null) return [null, null, null, -1];
      const [cell, offset] = this.quill.getLine(range.index);
      if (cell == null || cell.statics.blotName !== TableCell.blotName) {
        return [null, null, null, -1];
      }
      const row = cell.parent;
      const table = row.parent.parent;
      // @ts-expect-error
      return [table, row, cell, offset];
    }
    insertColumn(offset) {
      const range = this.quill.getSelection();
      if (!range) return;
      const [table, row, cell] = this.getTable(range);
      if (cell == null) return;
      const column = cell.cellOffset();
      table.insertColumn(column + offset);
      this.quill.update(Quill$1.sources.USER);
      let shift = row.rowOffset();
      if (offset === 0) {
        shift += 1;
      }
      this.quill.setSelection(range.index + shift, range.length, Quill$1.sources.SILENT);
    }
    insertColumnLeft() {
      this.insertColumn(0);
    }
    insertColumnRight() {
      this.insertColumn(1);
    }
    insertRow(offset) {
      const range = this.quill.getSelection();
      if (!range) return;
      const [table, row, cell] = this.getTable(range);
      if (cell == null) return;
      const index = row.rowOffset();
      table.insertRow(index + offset);
      this.quill.update(Quill$1.sources.USER);
      if (offset > 0) {
        this.quill.setSelection(range, Quill$1.sources.SILENT);
      } else {
        this.quill.setSelection(range.index + row.children.length, range.length, Quill$1.sources.SILENT);
      }
    }
    insertRowAbove() {
      this.insertRow(0);
    }
    insertRowBelow() {
      this.insertRow(1);
    }
    insertTable(rows, columns) {
      const range = this.quill.getSelection();
      if (range == null) return;
      const delta = new Array(rows).fill(0).reduce(memo => {
        const text = new Array(columns).fill('\n').join('');
        return memo.insert(text, {
          table: tableId()
        });
      }, new Delta().retain(range.index));
      this.quill.updateContents(delta, Quill$1.sources.USER);
      this.quill.setSelection(range.index, Quill$1.sources.SILENT);
      this.balanceTables();
    }
    listenBalanceCells() {
      this.quill.on(Quill$1.events.SCROLL_OPTIMIZE, mutations => {
        mutations.some(mutation => {
          if (['TD', 'TR', 'TBODY', 'TABLE'].includes(mutation.target.tagName)) {
            this.quill.once(Quill$1.events.TEXT_CHANGE, (delta, old, source) => {
              if (source !== Quill$1.sources.USER) return;
              this.balanceTables();
            });
            return true;
          }
          return false;
        });
      });
    }
  }

  const debug = namespace('quill:toolbar');
  class Toolbar extends Module {
    constructor(quill, options) {
      super(quill, options);
      if (Array.isArray(this.options.container)) {
        const container = document.createElement('div');
        container.setAttribute('role', 'toolbar');
        addControls(container, this.options.container);
        quill.container?.parentNode?.insertBefore(container, quill.container);
        this.container = container;
      } else if (typeof this.options.container === 'string') {
        this.container = document.querySelector(this.options.container);
      } else {
        this.container = this.options.container;
      }
      if (!(this.container instanceof HTMLElement)) {
        debug.error('Container required for toolbar', this.options);
        return;
      }
      this.container.classList.add('ql-toolbar');
      this.controls = [];
      this.handlers = {};
      if (this.options.handlers) {
        Object.keys(this.options.handlers).forEach(format => {
          const handler = this.options.handlers?.[format];
          if (handler) {
            this.addHandler(format, handler);
          }
        });
      }
      Array.from(this.container.querySelectorAll('button, select')).forEach(input => {
        // @ts-expect-error
        this.attach(input);
      });
      this.quill.on(Quill$1.events.EDITOR_CHANGE, () => {
        const [range] = this.quill.selection.getRange(); // quill.getSelection triggers update
        this.update(range);
      });
    }
    addHandler(format, handler) {
      this.handlers[format] = handler;
    }
    attach(input) {
      let format = Array.from(input.classList).find(className => {
        return className.indexOf('ql-') === 0;
      });
      if (!format) return;
      format = format.slice('ql-'.length);
      if (input.tagName === 'BUTTON') {
        input.setAttribute('type', 'button');
      }
      if (this.handlers[format] == null && this.quill.scroll.query(format) == null) {
        debug.warn('ignoring attaching to nonexistent format', format, input);
        return;
      }
      const eventName = input.tagName === 'SELECT' ? 'change' : 'click';
      input.addEventListener(eventName, e => {
        let value;
        if (input.tagName === 'SELECT') {
          // @ts-expect-error
          if (input.selectedIndex < 0) return;
          // @ts-expect-error
          const selected = input.options[input.selectedIndex];
          if (selected.hasAttribute('selected')) {
            value = false;
          } else {
            value = selected.value || false;
          }
        } else {
          if (input.classList.contains('ql-active')) {
            value = false;
          } else {
            // @ts-expect-error
            value = input.value || !input.hasAttribute('value');
          }
          e.preventDefault();
        }
        this.quill.focus();
        const [range] = this.quill.selection.getRange();
        if (this.handlers[format] != null) {
          this.handlers[format].call(this, value);
        } else if (
        // @ts-expect-error
        this.quill.scroll.query(format).prototype instanceof EmbedBlot$1) {
          value = prompt(`Enter ${format}`); // eslint-disable-line no-alert
          if (!value) return;
          this.quill.updateContents(new Delta()
          // @ts-expect-error Fix me later
          .retain(range.index)
          // @ts-expect-error Fix me later
          .delete(range.length).insert({
            [format]: value
          }), Quill$1.sources.USER);
        } else {
          this.quill.format(format, value, Quill$1.sources.USER);
        }
        this.update(range);
      });
      this.controls.push([format, input]);
    }
    update(range) {
      const formats = range == null ? {} : this.quill.getFormat(range);
      this.controls.forEach(pair => {
        const [format, input] = pair;
        if (input.tagName === 'SELECT') {
          let option = null;
          if (range == null) {
            option = null;
          } else if (formats[format] == null) {
            option = input.querySelector('option[selected]');
          } else if (!Array.isArray(formats[format])) {
            let value = formats[format];
            if (typeof value === 'string') {
              value = value.replace(/"/g, '\\"');
            }
            option = input.querySelector(`option[value="${value}"]`);
          }
          if (option == null) {
            // @ts-expect-error TODO fix me later
            input.value = ''; // TODO make configurable?
            // @ts-expect-error TODO fix me later
            input.selectedIndex = -1;
          } else {
            option.selected = true;
          }
        } else if (range == null) {
          input.classList.remove('ql-active');
          input.setAttribute('aria-pressed', 'false');
        } else if (input.hasAttribute('value')) {
          // both being null should match (default values)
          // '1' should match with 1 (headers)
          const value = formats[format];
          const isActive = value === input.getAttribute('value') || value != null && value.toString() === input.getAttribute('value') || value == null && !input.getAttribute('value');
          input.classList.toggle('ql-active', isActive);
          input.setAttribute('aria-pressed', isActive.toString());
        } else {
          const isActive = formats[format] != null;
          input.classList.toggle('ql-active', isActive);
          input.setAttribute('aria-pressed', isActive.toString());
        }
      });
    }
  }
  Toolbar.DEFAULTS = {};
  function addButton(container, format, value) {
    const input = document.createElement('button');
    input.setAttribute('type', 'button');
    input.classList.add(`ql-${format}`);
    input.setAttribute('aria-pressed', 'false');
    if (value != null) {
      input.value = value;
      input.setAttribute('aria-label', `${format}: ${value}`);
    } else {
      input.setAttribute('aria-label', format);
    }
    container.appendChild(input);
  }
  function addControls(container, groups) {
    if (!Array.isArray(groups[0])) {
      // @ts-expect-error
      groups = [groups];
    }
    groups.forEach(controls => {
      const group = document.createElement('span');
      group.classList.add('ql-formats');
      controls.forEach(control => {
        if (typeof control === 'string') {
          addButton(group, control);
        } else {
          const format = Object.keys(control)[0];
          const value = control[format];
          if (Array.isArray(value)) {
            addSelect(group, format, value);
          } else {
            addButton(group, format, value);
          }
        }
      });
      container.appendChild(group);
    });
  }
  function addSelect(container, format, values) {
    const input = document.createElement('select');
    input.classList.add(`ql-${format}`);
    values.forEach(value => {
      const option = document.createElement('option');
      if (value !== false) {
        option.setAttribute('value', String(value));
      } else {
        option.setAttribute('selected', 'selected');
      }
      input.appendChild(option);
    });
    container.appendChild(input);
  }
  Toolbar.DEFAULTS = {
    container: null,
    handlers: {
      clean() {
        const range = this.quill.getSelection();
        if (range == null) return;
        if (range.length === 0) {
          const formats = this.quill.getFormat();
          Object.keys(formats).forEach(name => {
            // Clean functionality in existing apps only clean inline formats
            if (this.quill.scroll.query(name, Scope.INLINE) != null) {
              this.quill.format(name, false, Quill$1.sources.USER);
            }
          });
        } else {
          this.quill.removeFormat(range.index, range.length, Quill$1.sources.USER);
        }
      },
      direction(value) {
        const {
          align
        } = this.quill.getFormat();
        if (value === 'rtl' && align == null) {
          this.quill.format('align', 'right', Quill$1.sources.USER);
        } else if (!value && align === 'right') {
          this.quill.format('align', false, Quill$1.sources.USER);
        }
        this.quill.format('direction', value, Quill$1.sources.USER);
      },
      indent(value) {
        const range = this.quill.getSelection();
        // @ts-expect-error
        const formats = this.quill.getFormat(range);
        // @ts-expect-error
        const indent = parseInt(formats.indent || 0, 10);
        if (value === '+1' || value === '-1') {
          let modifier = value === '+1' ? 1 : -1;
          if (formats.direction === 'rtl') modifier *= -1;
          this.quill.format('indent', indent + modifier, Quill$1.sources.USER);
        }
      },
      link(value) {
        if (value === true) {
          value = prompt('Enter link URL:'); // eslint-disable-line no-alert
        }
        this.quill.format('link', value, Quill$1.sources.USER);
      },
      list(value) {
        const range = this.quill.getSelection();
        // @ts-expect-error
        const formats = this.quill.getFormat(range);
        if (value === 'check') {
          if (formats.list === 'checked' || formats.list === 'unchecked') {
            this.quill.format('list', false, Quill$1.sources.USER);
          } else {
            this.quill.format('list', 'unchecked', Quill$1.sources.USER);
          }
        } else {
          this.quill.format('list', value, Quill$1.sources.USER);
        }
      }
    }
  };

  const alignLeftIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"13\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"9\" y1=\"4\" y2=\"4\"/></svg>";
  const alignCenterIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"14\" x2=\"4\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"12\" x2=\"6\" y1=\"4\" y2=\"4\"/></svg>";
  const alignRightIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"15\" x2=\"5\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"15\" x2=\"9\" y1=\"4\" y2=\"4\"/></svg>";
  const alignJustifyIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"4\" y2=\"4\"/></svg>";
  const backgroundIcon = "<svg viewbox=\"0 0 18 18\"><g class=\"ql-fill ql-color-label\"><polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"/><rect height=\"1\" width=\"1\" x=\"4\" y=\"4\"/><polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"/><rect height=\"1\" width=\"1\" x=\"2\" y=\"6\"/><rect height=\"1\" width=\"1\" x=\"3\" y=\"5\"/><rect height=\"1\" width=\"1\" x=\"4\" y=\"7\"/><polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"/><rect height=\"1\" width=\"1\" x=\"2\" y=\"12\"/><rect height=\"1\" width=\"1\" x=\"2\" y=\"9\"/><rect height=\"1\" width=\"1\" x=\"2\" y=\"15\"/><polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"/><rect height=\"1\" width=\"1\" x=\"3\" y=\"8\"/><path d=\"M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z\"/><path d=\"M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z\"/><path d=\"M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z\"/><rect height=\"1\" width=\"1\" x=\"12\" y=\"2\"/><rect height=\"1\" width=\"1\" x=\"11\" y=\"3\"/><path d=\"M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z\"/><rect height=\"1\" width=\"1\" x=\"2\" y=\"3\"/><rect height=\"1\" width=\"1\" x=\"6\" y=\"2\"/><rect height=\"1\" width=\"1\" x=\"3\" y=\"2\"/><rect height=\"1\" width=\"1\" x=\"5\" y=\"3\"/><rect height=\"1\" width=\"1\" x=\"9\" y=\"2\"/><rect height=\"1\" width=\"1\" x=\"15\" y=\"14\"/><polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"/><rect height=\"1\" width=\"1\" x=\"13\" y=\"7\"/><rect height=\"1\" width=\"1\" x=\"15\" y=\"5\"/><rect height=\"1\" width=\"1\" x=\"14\" y=\"6\"/><rect height=\"1\" width=\"1\" x=\"15\" y=\"8\"/><rect height=\"1\" width=\"1\" x=\"14\" y=\"9\"/><path d=\"M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z\"/><rect height=\"1\" width=\"1\" x=\"14\" y=\"3\"/><polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"/><rect height=\"1\" width=\"1\" x=\"15\" y=\"2\"/><rect height=\"1\" width=\"1\" x=\"12\" y=\"5\"/><rect height=\"1\" width=\"1\" x=\"13\" y=\"4\"/><polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"/><rect height=\"1\" width=\"1\" x=\"9\" y=\"14\"/><rect height=\"1\" width=\"1\" x=\"8\" y=\"15\"/><path d=\"M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z\"/><rect height=\"1\" width=\"1\" x=\"5\" y=\"15\"/><path d=\"M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z\"/><rect height=\"1\" width=\"1\" x=\"11\" y=\"15\"/><path d=\"M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z\"/><rect height=\"1\" width=\"1\" x=\"14\" y=\"15\"/><rect height=\"1\" width=\"1\" x=\"15\" y=\"11\"/></g><polyline class=\"ql-stroke\" points=\"5.5 13 9 5 12.5 13\"/><line class=\"ql-stroke\" x1=\"11.63\" x2=\"6.38\" y1=\"11\" y2=\"11\"/></svg>";
  const blockquoteIcon = "<svg viewbox=\"0 0 18 18\"><rect class=\"ql-fill ql-stroke\" height=\"3\" width=\"3\" x=\"4\" y=\"5\"/><rect class=\"ql-fill ql-stroke\" height=\"3\" width=\"3\" x=\"11\" y=\"5\"/><path class=\"ql-even ql-fill ql-stroke\" d=\"M7,8c0,4.031-3,5-3,5\"/><path class=\"ql-even ql-fill ql-stroke\" d=\"M14,8c0,4.031-3,5-3,5\"/></svg>";
  const boldIcon = "<svg viewbox=\"0 0 18 18\"><path class=\"ql-stroke\" d=\"M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z\"/><path class=\"ql-stroke\" d=\"M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z\"/></svg>";
  const cleanIcon = "<svg class=\"\" viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"5\" x2=\"13\" y1=\"3\" y2=\"3\"/><line class=\"ql-stroke\" x1=\"6\" x2=\"9.35\" y1=\"12\" y2=\"3\"/><line class=\"ql-stroke\" x1=\"11\" x2=\"15\" y1=\"11\" y2=\"15\"/><line class=\"ql-stroke\" x1=\"15\" x2=\"11\" y1=\"11\" y2=\"15\"/><rect class=\"ql-fill\" height=\"1\" rx=\"0.5\" ry=\"0.5\" width=\"7\" x=\"2\" y=\"14\"/></svg>";
  const codeIcon = "<svg viewbox=\"0 0 18 18\"><polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"/><polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"/><line class=\"ql-stroke\" x1=\"10\" x2=\"8\" y1=\"5\" y2=\"13\"/></svg>";
  const colorIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-color-label ql-stroke ql-transparent\" x1=\"3\" x2=\"15\" y1=\"15\" y2=\"15\"/><polyline class=\"ql-stroke\" points=\"5.5 11 9 3 12.5 11\"/><line class=\"ql-stroke\" x1=\"11.63\" x2=\"6.38\" y1=\"9\" y2=\"9\"/></svg>";
  const directionLeftToRightIcon = "<svg viewbox=\"0 0 18 18\"><polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"/><line class=\"ql-stroke ql-fill\" x1=\"15\" x2=\"11\" y1=\"4\" y2=\"4\"/><path class=\"ql-fill\" d=\"M11,3a3,3,0,0,0,0,6h1V3H11Z\"/><rect class=\"ql-fill\" height=\"11\" width=\"1\" x=\"11\" y=\"4\"/><rect class=\"ql-fill\" height=\"11\" width=\"1\" x=\"13\" y=\"4\"/></svg>";
  const directionRightToLeftIcon = "<svg viewbox=\"0 0 18 18\"><polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"/><line class=\"ql-stroke ql-fill\" x1=\"9\" x2=\"5\" y1=\"4\" y2=\"4\"/><path class=\"ql-fill\" d=\"M5,3A3,3,0,0,0,5,9H6V3H5Z\"/><rect class=\"ql-fill\" height=\"11\" width=\"1\" x=\"5\" y=\"4\"/><rect class=\"ql-fill\" height=\"11\" width=\"1\" x=\"7\" y=\"4\"/></svg>";
  const formulaIcon = "<svg viewbox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z\"/><rect class=\"ql-fill\" height=\"1.6\" rx=\"0.8\" ry=\"0.8\" width=\"5\" x=\"5.15\" y=\"6.2\"/><path class=\"ql-fill\" d=\"M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z\"/></svg>";
  const headerIcon = "<svg viewBox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z\"/></svg>";
  const header2Icon = "<svg viewBox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z\"/></svg>";
  const header3Icon = "<svg viewBox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M16.65186,12.30664a2.6742,2.6742,0,0,1-2.915,2.68457,3.96592,3.96592,0,0,1-2.25537-.6709.56007.56007,0,0,1-.13232-.83594L11.64648,13c.209-.34082.48389-.36328.82471-.1543a2.32654,2.32654,0,0,0,1.12256.33008c.71484,0,1.12207-.35156,1.12207-.78125,0-.61523-.61621-.86816-1.46338-.86816H13.2085a.65159.65159,0,0,1-.68213-.41895l-.05518-.10937a.67114.67114,0,0,1,.14307-.78125l.71533-.86914a8.55289,8.55289,0,0,1,.68213-.7373V8.58887a3.93913,3.93913,0,0,1-.748.05469H11.9873a.54085.54085,0,0,1-.605-.60547V7.59863a.54085.54085,0,0,1,.605-.60547h3.75146a.53773.53773,0,0,1,.60547.59375v.17676a1.03723,1.03723,0,0,1-.27539.748L14.74854,10.0293A2.31132,2.31132,0,0,1,16.65186,12.30664ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z\"/></svg>";
  const header4Icon = "<svg viewBox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm7.05371,7.96582v.38477c0,.39648-.165.60547-.46191.60547h-.47314v1.29785a.54085.54085,0,0,1-.605.60547h-.69336a.54085.54085,0,0,1-.605-.60547V12.95605H11.333a.5412.5412,0,0,1-.60547-.60547v-.15332a1.199,1.199,0,0,1,.22021-.748l2.56348-4.05957a.7819.7819,0,0,1,.72607-.39648h1.27637a.54085.54085,0,0,1,.605.60547v3.7627h.33008A.54055.54055,0,0,1,17.05371,11.96582ZM14.28125,8.7207h-.022a4.18969,4.18969,0,0,1-.38525.81348l-1.188,1.80469v.02246h1.5293V9.60059A7.04058,7.04058,0,0,1,14.28125,8.7207Z\"/></svg>";
  const header5Icon = "<svg viewBox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M16.74023,12.18555a2.75131,2.75131,0,0,1-2.91553,2.80566,3.908,3.908,0,0,1-2.25537-.68164.54809.54809,0,0,1-.13184-.8252L11.73438,13c.209-.34082.48389-.36328.8252-.1543a2.23757,2.23757,0,0,0,1.1001.33008,1.01827,1.01827,0,0,0,1.1001-.96777c0-.61621-.53906-.97949-1.25439-.97949a2.15554,2.15554,0,0,0-.64893.09961,1.15209,1.15209,0,0,1-.814.01074l-.12109-.04395a.64116.64116,0,0,1-.45117-.71484l.231-3.00391a.56666.56666,0,0,1,.62744-.583H15.541a.54085.54085,0,0,1,.605.60547v.43945a.54085.54085,0,0,1-.605.60547H13.41748l-.04395.72559a1.29306,1.29306,0,0,1-.04395.30859h.022a2.39776,2.39776,0,0,1,.57227-.07715A2.53266,2.53266,0,0,1,16.74023,12.18555ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z\"/></svg>";
  const header6Icon = "<svg viewBox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M14.51758,9.64453a1.85627,1.85627,0,0,0-1.24316.38477H13.252a1.73532,1.73532,0,0,1,1.72754-1.4082,2.66491,2.66491,0,0,1,.5498.06641c.35254.05469.57227.01074.70508-.40723l.16406-.5166a.53393.53393,0,0,0-.373-.75977,4.83723,4.83723,0,0,0-1.17773-.14258c-2.43164,0-3.7627,2.17773-3.7627,4.43359,0,2.47559,1.60645,3.69629,3.19043,3.69629A2.70585,2.70585,0,0,0,16.96,12.19727,2.43861,2.43861,0,0,0,14.51758,9.64453Zm-.23047,3.58691c-.67187,0-1.22168-.81445-1.22168-1.45215,0-.47363.30762-.583.72559-.583.96875,0,1.27734.59375,1.27734,1.12207A.82182.82182,0,0,1,14.28711,13.23145ZM10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Z\"/></svg>";
  const italicIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"7\" x2=\"13\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"5\" x2=\"11\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"8\" x2=\"10\" y1=\"14\" y2=\"4\"/></svg>";
  const imageIcon = "<svg viewbox=\"0 0 18 18\"><rect class=\"ql-stroke\" height=\"10\" width=\"12\" x=\"3\" y=\"4\"/><circle class=\"ql-fill\" cx=\"6\" cy=\"7\" r=\"1\"/><polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"/></svg>";
  const indentIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"9\" x2=\"15\" y1=\"9\" y2=\"9\"/><polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"/></svg>";
  const outdentIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"9\" x2=\"15\" y1=\"9\" y2=\"9\"/><polyline class=\"ql-stroke\" points=\"5 7 5 11 3 9 5 7\"/></svg>";
  const linkIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"7\" x2=\"11\" y1=\"7\" y2=\"11\"/><path class=\"ql-even ql-stroke\" d=\"M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z\"/><path class=\"ql-even ql-stroke\" d=\"M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z\"/></svg>";
  const listBulletIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"6\" x2=\"15\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"6\" x2=\"15\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"6\" x2=\"15\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"3\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"3\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"3\" x2=\"3\" y1=\"14\" y2=\"14\"/></svg>";
  const listCheckIcon = "<svg class=\"\" viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"9\" x2=\"15\" y1=\"4\" y2=\"4\"/><polyline class=\"ql-stroke\" points=\"3 4 4 5 6 3\"/><line class=\"ql-stroke\" x1=\"9\" x2=\"15\" y1=\"14\" y2=\"14\"/><polyline class=\"ql-stroke\" points=\"3 14 4 15 6 13\"/><line class=\"ql-stroke\" x1=\"9\" x2=\"15\" y1=\"9\" y2=\"9\"/><polyline class=\"ql-stroke\" points=\"3 9 4 10 6 8\"/></svg>";
  const listOrderedIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke\" x1=\"7\" x2=\"15\" y1=\"4\" y2=\"4\"/><line class=\"ql-stroke\" x1=\"7\" x2=\"15\" y1=\"9\" y2=\"9\"/><line class=\"ql-stroke\" x1=\"7\" x2=\"15\" y1=\"14\" y2=\"14\"/><line class=\"ql-stroke ql-thin\" x1=\"2.5\" x2=\"4.5\" y1=\"5.5\" y2=\"5.5\"/><path class=\"ql-fill\" d=\"M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z\"/><path class=\"ql-stroke ql-thin\" d=\"M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156\"/><path class=\"ql-stroke ql-thin\" d=\"M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109\"/></svg>";
  const subscriptIcon = "<svg viewbox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z\"/><path class=\"ql-fill\" d=\"M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z\"/></svg>";
  const superscriptIcon = "<svg viewbox=\"0 0 18 18\"><path class=\"ql-fill\" d=\"M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z\"/><path class=\"ql-fill\" d=\"M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z\"/></svg>";
  const strikeIcon = "<svg viewbox=\"0 0 18 18\"><line class=\"ql-stroke ql-thin\" x1=\"15.5\" x2=\"2.5\" y1=\"8.5\" y2=\"9.5\"/><path class=\"ql-fill\" d=\"M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z\"/><path class=\"ql-fill\" d=\"M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z\"/></svg>";
  const tableIcon = "<svg viewbox=\"0 0 18 18\"><rect class=\"ql-stroke\" height=\"12\" width=\"12\" x=\"3\" y=\"3\"/><rect class=\"ql-fill\" height=\"2\" width=\"3\" x=\"5\" y=\"5\"/><rect class=\"ql-fill\" height=\"2\" width=\"4\" x=\"9\" y=\"5\"/><g class=\"ql-fill ql-transparent\"><rect height=\"2\" width=\"3\" x=\"5\" y=\"8\"/><rect height=\"2\" width=\"4\" x=\"9\" y=\"8\"/><rect height=\"2\" width=\"3\" x=\"5\" y=\"11\"/><rect height=\"2\" width=\"4\" x=\"9\" y=\"11\"/></g></svg>";
  const underlineIcon = "<svg viewbox=\"0 0 18 18\"><path class=\"ql-stroke\" d=\"M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3\"/><rect class=\"ql-fill\" height=\"1\" rx=\"0.5\" ry=\"0.5\" width=\"12\" x=\"3\" y=\"15\"/></svg>";
  const videoIcon = "<svg viewbox=\"0 0 18 18\"><rect class=\"ql-stroke\" height=\"12\" width=\"12\" x=\"3\" y=\"3\"/><rect class=\"ql-fill\" height=\"12\" width=\"1\" x=\"5\" y=\"3\"/><rect class=\"ql-fill\" height=\"12\" width=\"1\" x=\"12\" y=\"3\"/><rect class=\"ql-fill\" height=\"2\" width=\"8\" x=\"5\" y=\"8\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"3\" y=\"5\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"3\" y=\"7\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"3\" y=\"10\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"3\" y=\"12\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"12\" y=\"5\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"12\" y=\"7\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"12\" y=\"10\"/><rect class=\"ql-fill\" height=\"1\" width=\"3\" x=\"12\" y=\"12\"/></svg>";
  var Icons = {
    align: {
      '': alignLeftIcon,
      center: alignCenterIcon,
      right: alignRightIcon,
      justify: alignJustifyIcon
    },
    background: backgroundIcon,
    blockquote: blockquoteIcon,
    bold: boldIcon,
    clean: cleanIcon,
    code: codeIcon,
    'code-block': codeIcon,
    color: colorIcon,
    direction: {
      '': directionLeftToRightIcon,
      rtl: directionRightToLeftIcon
    },
    formula: formulaIcon,
    header: {
      '1': headerIcon,
      '2': header2Icon,
      '3': header3Icon,
      '4': header4Icon,
      '5': header5Icon,
      '6': header6Icon
    },
    italic: italicIcon,
    image: imageIcon,
    indent: {
      '+1': indentIcon,
      '-1': outdentIcon
    },
    link: linkIcon,
    list: {
      bullet: listBulletIcon,
      check: listCheckIcon,
      ordered: listOrderedIcon
    },
    script: {
      sub: subscriptIcon,
      super: superscriptIcon
    },
    strike: strikeIcon,
    table: tableIcon,
    underline: underlineIcon,
    video: videoIcon
  };

  const DropdownIcon = "<svg viewbox=\"0 0 18 18\"><polygon class=\"ql-stroke\" points=\"7 11 9 13 11 11 7 11\"/><polygon class=\"ql-stroke\" points=\"7 7 9 5 11 7 7 7\"/></svg>";
  let optionsCounter = 0;
  function toggleAriaAttribute(element, attribute) {
    element.setAttribute(attribute, `${!(element.getAttribute(attribute) === 'true')}`);
  }
  class Picker {
    constructor(select) {
      this.select = select;
      this.container = document.createElement('span');
      this.buildPicker();
      this.select.style.display = 'none';
      // @ts-expect-error Fix me later
      this.select.parentNode.insertBefore(this.container, this.select);
      this.label.addEventListener('mousedown', () => {
        this.togglePicker();
      });
      this.label.addEventListener('keydown', event => {
        switch (event.key) {
          case 'Enter':
            this.togglePicker();
            break;
          case 'Escape':
            this.escape();
            event.preventDefault();
            break;
        }
      });
      this.select.addEventListener('change', this.update.bind(this));
    }
    togglePicker() {
      this.container.classList.toggle('ql-expanded');
      // Toggle aria-expanded and aria-hidden to make the picker accessible
      toggleAriaAttribute(this.label, 'aria-expanded');
      // @ts-expect-error
      toggleAriaAttribute(this.options, 'aria-hidden');
    }
    buildItem(option) {
      const item = document.createElement('span');
      // @ts-expect-error
      item.tabIndex = '0';
      item.setAttribute('role', 'button');
      item.classList.add('ql-picker-item');
      const value = option.getAttribute('value');
      if (value) {
        item.setAttribute('data-value', value);
      }
      if (option.textContent) {
        item.setAttribute('data-label', option.textContent);
      }
      item.addEventListener('click', () => {
        this.selectItem(item, true);
      });
      item.addEventListener('keydown', event => {
        switch (event.key) {
          case 'Enter':
            this.selectItem(item, true);
            event.preventDefault();
            break;
          case 'Escape':
            this.escape();
            event.preventDefault();
            break;
        }
      });
      return item;
    }
    buildLabel() {
      const label = document.createElement('span');
      label.classList.add('ql-picker-label');
      label.innerHTML = DropdownIcon;
      // @ts-expect-error
      label.tabIndex = '0';
      label.setAttribute('role', 'button');
      label.setAttribute('aria-expanded', 'false');
      this.container.appendChild(label);
      return label;
    }
    buildOptions() {
      const options = document.createElement('span');
      options.classList.add('ql-picker-options');

      // Don't want screen readers to read this until options are visible
      options.setAttribute('aria-hidden', 'true');
      // @ts-expect-error
      options.tabIndex = '-1';

      // Need a unique id for aria-controls
      options.id = `ql-picker-options-${optionsCounter}`;
      optionsCounter += 1;
      this.label.setAttribute('aria-controls', options.id);

      // @ts-expect-error
      this.options = options;
      Array.from(this.select.options).forEach(option => {
        const item = this.buildItem(option);
        options.appendChild(item);
        if (option.selected === true) {
          this.selectItem(item);
        }
      });
      this.container.appendChild(options);
    }
    buildPicker() {
      Array.from(this.select.attributes).forEach(item => {
        this.container.setAttribute(item.name, item.value);
      });
      this.container.classList.add('ql-picker');
      this.label = this.buildLabel();
      this.buildOptions();
    }
    escape() {
      // Close menu and return focus to trigger label
      this.close();
      // Need setTimeout for accessibility to ensure that the browser executes
      // focus on the next process thread and after any DOM content changes
      setTimeout(() => this.label.focus(), 1);
    }
    close() {
      this.container.classList.remove('ql-expanded');
      this.label.setAttribute('aria-expanded', 'false');
      // @ts-expect-error
      this.options.setAttribute('aria-hidden', 'true');
    }
    selectItem(item) {
      let trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      const selected = this.container.querySelector('.ql-selected');
      if (item === selected) return;
      if (selected != null) {
        selected.classList.remove('ql-selected');
      }
      if (item == null) return;
      item.classList.add('ql-selected');
      // @ts-expect-error Fix me later
      this.select.selectedIndex = Array.from(item.parentNode.children).indexOf(item);
      if (item.hasAttribute('data-value')) {
        // @ts-expect-error Fix me later
        this.label.setAttribute('data-value', item.getAttribute('data-value'));
      } else {
        this.label.removeAttribute('data-value');
      }
      if (item.hasAttribute('data-label')) {
        // @ts-expect-error Fix me later
        this.label.setAttribute('data-label', item.getAttribute('data-label'));
      } else {
        this.label.removeAttribute('data-label');
      }
      if (trigger) {
        this.select.dispatchEvent(new Event('change'));
        this.close();
      }
    }
    update() {
      let option;
      if (this.select.selectedIndex > -1) {
        const item =
        // @ts-expect-error Fix me later
        this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
        option = this.select.options[this.select.selectedIndex];
        // @ts-expect-error
        this.selectItem(item);
      } else {
        this.selectItem(null);
      }
      const isActive = option != null && option !== this.select.querySelector('option[selected]');
      this.label.classList.toggle('ql-active', isActive);
    }
  }

  class ColorPicker extends Picker {
    constructor(select, label) {
      super(select);
      this.label.innerHTML = label;
      this.container.classList.add('ql-color-picker');
      Array.from(this.container.querySelectorAll('.ql-picker-item')).slice(0, 7).forEach(item => {
        item.classList.add('ql-primary');
      });
    }
    buildItem(option) {
      const item = super.buildItem(option);
      item.style.backgroundColor = option.getAttribute('value') || '';
      return item;
    }
    selectItem(item, trigger) {
      super.selectItem(item, trigger);
      const colorLabel = this.label.querySelector('.ql-color-label');
      const value = item ? item.getAttribute('data-value') || '' : '';
      if (colorLabel) {
        if (colorLabel.tagName === 'line') {
          colorLabel.style.stroke = value;
        } else {
          colorLabel.style.fill = value;
        }
      }
    }
  }

  class IconPicker extends Picker {
    constructor(select, icons) {
      super(select);
      this.container.classList.add('ql-icon-picker');
      Array.from(this.container.querySelectorAll('.ql-picker-item')).forEach(item => {
        item.innerHTML = icons[item.getAttribute('data-value') || ''];
      });
      this.defaultItem = this.container.querySelector('.ql-selected');
      this.selectItem(this.defaultItem);
    }
    selectItem(target, trigger) {
      super.selectItem(target, trigger);
      const item = target || this.defaultItem;
      if (item != null) {
        if (this.label.innerHTML === item.innerHTML) return;
        this.label.innerHTML = item.innerHTML;
      }
    }
  }

  const isScrollable = el => {
    const {
      overflowY
    } = getComputedStyle(el, null);
    return overflowY !== 'visible' && overflowY !== 'clip';
  };
  class Tooltip {
    constructor(quill, boundsContainer) {
      this.quill = quill;
      this.boundsContainer = boundsContainer || document.body;
      this.root = quill.addContainer('ql-tooltip');
      // @ts-expect-error
      this.root.innerHTML = this.constructor.TEMPLATE;
      if (isScrollable(this.quill.root)) {
        this.quill.root.addEventListener('scroll', () => {
          this.root.style.marginTop = `${ -1 * this.quill.root.scrollTop}px`;
        });
      }
      this.hide();
    }
    hide() {
      this.root.classList.add('ql-hidden');
    }
    position(reference) {
      const left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
      // root.scrollTop should be 0 if scrollContainer !== root
      const top = reference.bottom + this.quill.root.scrollTop;
      this.root.style.left = `${left}px`;
      this.root.style.top = `${top}px`;
      this.root.classList.remove('ql-flip');
      const containerBounds = this.boundsContainer.getBoundingClientRect();
      const rootBounds = this.root.getBoundingClientRect();
      let shift = 0;
      if (rootBounds.right > containerBounds.right) {
        shift = containerBounds.right - rootBounds.right;
        this.root.style.left = `${left + shift}px`;
      }
      if (rootBounds.left < containerBounds.left) {
        shift = containerBounds.left - rootBounds.left;
        this.root.style.left = `${left + shift}px`;
      }
      if (rootBounds.bottom > containerBounds.bottom) {
        const height = rootBounds.bottom - rootBounds.top;
        const verticalShift = reference.bottom - reference.top + height;
        this.root.style.top = `${top - verticalShift}px`;
        this.root.classList.add('ql-flip');
      }
      return shift;
    }
    show() {
      this.root.classList.remove('ql-editing');
      this.root.classList.remove('ql-hidden');
    }
  }

  const ALIGNS = [false, 'center', 'right', 'justify'];
  const COLORS = ['#000000', '#e60000', '#ff9900', '#ffff00', '#008a00', '#0066cc', '#9933ff', '#ffffff', '#facccc', '#ffebcc', '#ffffcc', '#cce8cc', '#cce0f5', '#ebd6ff', '#bbbbbb', '#f06666', '#ffc266', '#ffff66', '#66b966', '#66a3e0', '#c285ff', '#888888', '#a10000', '#b26b00', '#b2b200', '#006100', '#0047b2', '#6b24b2', '#444444', '#5c0000', '#663d00', '#666600', '#003700', '#002966', '#3d1466'];
  const FONTS = [false, 'serif', 'monospace'];
  const HEADERS = ['1', '2', '3', false];
  const SIZES = ['small', false, 'large', 'huge'];
  class BaseTheme extends Theme {
    constructor(quill, options) {
      super(quill, options);
      const listener = e => {
        if (!document.body.contains(quill.root)) {
          document.body.removeEventListener('click', listener);
          return;
        }
        if (this.tooltip != null &&
        // @ts-expect-error
        !this.tooltip.root.contains(e.target) &&
        // @ts-expect-error
        document.activeElement !== this.tooltip.textbox && !this.quill.hasFocus()) {
          this.tooltip.hide();
        }
        if (this.pickers != null) {
          this.pickers.forEach(picker => {
            // @ts-expect-error
            if (!picker.container.contains(e.target)) {
              picker.close();
            }
          });
        }
      };
      quill.emitter.listenDOM('click', document.body, listener);
    }
    addModule(name) {
      const module = super.addModule(name);
      if (name === 'toolbar') {
        // @ts-expect-error
        this.extendToolbar(module);
      }
      return module;
    }
    buildButtons(buttons, icons) {
      Array.from(buttons).forEach(button => {
        const className = button.getAttribute('class') || '';
        className.split(/\s+/).forEach(name => {
          if (!name.startsWith('ql-')) return;
          name = name.slice('ql-'.length);
          if (icons[name] == null) return;
          if (name === 'direction') {
            // @ts-expect-error
            button.innerHTML = icons[name][''] + icons[name].rtl;
          } else if (typeof icons[name] === 'string') {
            // @ts-expect-error
            button.innerHTML = icons[name];
          } else {
            // @ts-expect-error
            const value = button.value || '';
            // @ts-expect-error
            if (value != null && icons[name][value]) {
              // @ts-expect-error
              button.innerHTML = icons[name][value];
            }
          }
        });
      });
    }
    buildPickers(selects, icons) {
      this.pickers = Array.from(selects).map(select => {
        if (select.classList.contains('ql-align')) {
          if (select.querySelector('option') == null) {
            fillSelect(select, ALIGNS);
          }
          if (typeof icons.align === 'object') {
            return new IconPicker(select, icons.align);
          }
        }
        if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
          const format = select.classList.contains('ql-background') ? 'background' : 'color';
          if (select.querySelector('option') == null) {
            fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
          }
          return new ColorPicker(select, icons[format]);
        }
        if (select.querySelector('option') == null) {
          if (select.classList.contains('ql-font')) {
            fillSelect(select, FONTS);
          } else if (select.classList.contains('ql-header')) {
            fillSelect(select, HEADERS);
          } else if (select.classList.contains('ql-size')) {
            fillSelect(select, SIZES);
          }
        }
        return new Picker(select);
      });
      const update = () => {
        this.pickers.forEach(picker => {
          picker.update();
        });
      };
      this.quill.on(Emitter.events.EDITOR_CHANGE, update);
    }
  }
  BaseTheme.DEFAULTS = merge({}, Theme.DEFAULTS, {
    modules: {
      toolbar: {
        handlers: {
          formula() {
            this.quill.theme.tooltip.edit('formula');
          },
          image() {
            let fileInput = this.container.querySelector('input.ql-image[type=file]');
            if (fileInput == null) {
              fileInput = document.createElement('input');
              fileInput.setAttribute('type', 'file');
              fileInput.setAttribute('accept', this.quill.uploader.options.mimetypes.join(', '));
              fileInput.classList.add('ql-image');
              fileInput.addEventListener('change', () => {
                const range = this.quill.getSelection(true);
                this.quill.uploader.upload(range, fileInput.files);
                fileInput.value = '';
              });
              this.container.appendChild(fileInput);
            }
            fileInput.click();
          },
          video() {
            this.quill.theme.tooltip.edit('video');
          }
        }
      }
    }
  });
  class BaseTooltip extends Tooltip {
    constructor(quill, boundsContainer) {
      super(quill, boundsContainer);
      this.textbox = this.root.querySelector('input[type="text"]');
      this.listen();
    }
    listen() {
      // @ts-expect-error Fix me later
      this.textbox.addEventListener('keydown', event => {
        if (event.key === 'Enter') {
          this.save();
          event.preventDefault();
        } else if (event.key === 'Escape') {
          this.cancel();
          event.preventDefault();
        }
      });
    }
    cancel() {
      this.hide();
      this.restoreFocus();
    }
    edit() {
      let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
      let preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      this.root.classList.remove('ql-hidden');
      this.root.classList.add('ql-editing');
      if (this.textbox == null) return;
      if (preview != null) {
        this.textbox.value = preview;
      } else if (mode !== this.root.getAttribute('data-mode')) {
        this.textbox.value = '';
      }
      const bounds = this.quill.getBounds(this.quill.selection.savedRange);
      if (bounds != null) {
        this.position(bounds);
      }
      this.textbox.select();
      this.textbox.setAttribute('placeholder', this.textbox.getAttribute(`data-${mode}`) || '');
      this.root.setAttribute('data-mode', mode);
    }
    restoreFocus() {
      this.quill.focus({
        preventScroll: true
      });
    }
    save() {
      // @ts-expect-error Fix me later
      let {
        value
      } = this.textbox;
      switch (this.root.getAttribute('data-mode')) {
        case 'link':
          {
            const {
              scrollTop
            } = this.quill.root;
            if (this.linkRange) {
              this.quill.formatText(this.linkRange, 'link', value, Emitter.sources.USER);
              delete this.linkRange;
            } else {
              this.restoreFocus();
              this.quill.format('link', value, Emitter.sources.USER);
            }
            this.quill.root.scrollTop = scrollTop;
            break;
          }
        case 'video':
          {
            value = extractVideoUrl(value);
          }
        // eslint-disable-next-line no-fallthrough
        case 'formula':
          {
            if (!value) break;
            const range = this.quill.getSelection(true);
            if (range != null) {
              const index = range.index + range.length;
              this.quill.insertEmbed(index,
              // @ts-expect-error Fix me later
              this.root.getAttribute('data-mode'), value, Emitter.sources.USER);
              if (this.root.getAttribute('data-mode') === 'formula') {
                this.quill.insertText(index + 1, ' ', Emitter.sources.USER);
              }
              this.quill.setSelection(index + 2, Emitter.sources.USER);
            }
            break;
          }
      }
      // @ts-expect-error Fix me later
      this.textbox.value = '';
      this.hide();
    }
  }
  function extractVideoUrl(url) {
    let match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
    if (match) {
      return `${match[1] || 'https'}://www.youtube.com/embed/${match[2]}?showinfo=0`;
    }
    // eslint-disable-next-line no-cond-assign
    if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
      return `${match[1] || 'https'}://player.vimeo.com/video/${match[2]}/`;
    }
    return url;
  }
  function fillSelect(select, values) {
    let defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    values.forEach(value => {
      const option = document.createElement('option');
      if (value === defaultValue) {
        option.setAttribute('selected', 'selected');
      } else {
        option.setAttribute('value', String(value));
      }
      select.appendChild(option);
    });
  }

  const TOOLBAR_CONFIG$1 = [['bold', 'italic', 'link'], [{
    header: 1
  }, {
    header: 2
  }, 'blockquote']];
  class BubbleTooltip extends BaseTooltip {
    static TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');
    constructor(quill, bounds) {
      super(quill, bounds);
      this.quill.on(Emitter.events.EDITOR_CHANGE, (type, range, oldRange, source) => {
        if (type !== Emitter.events.SELECTION_CHANGE) return;
        if (range != null && range.length > 0 && source === Emitter.sources.USER) {
          this.show();
          // Lock our width so we will expand beyond our offsetParent boundaries
          this.root.style.left = '0px';
          this.root.style.width = '';
          this.root.style.width = `${this.root.offsetWidth}px`;
          const lines = this.quill.getLines(range.index, range.length);
          if (lines.length === 1) {
            const bounds = this.quill.getBounds(range);
            if (bounds != null) {
              this.position(bounds);
            }
          } else {
            const lastLine = lines[lines.length - 1];
            const index = this.quill.getIndex(lastLine);
            const length = Math.min(lastLine.length() - 1, range.index + range.length - index);
            const indexBounds = this.quill.getBounds(new Range(index, length));
            if (indexBounds != null) {
              this.position(indexBounds);
            }
          }
        } else if (document.activeElement !== this.textbox && this.quill.hasFocus()) {
          this.hide();
        }
      });
    }
    listen() {
      super.listen();
      // @ts-expect-error Fix me later
      this.root.querySelector('.ql-close').addEventListener('click', () => {
        this.root.classList.remove('ql-editing');
      });
      this.quill.on(Emitter.events.SCROLL_OPTIMIZE, () => {
        // Let selection be restored by toolbar handlers before repositioning
        setTimeout(() => {
          if (this.root.classList.contains('ql-hidden')) return;
          const range = this.quill.getSelection();
          if (range != null) {
            const bounds = this.quill.getBounds(range);
            if (bounds != null) {
              this.position(bounds);
            }
          }
        }, 1);
      });
    }
    cancel() {
      this.show();
    }
    position(reference) {
      const shift = super.position(reference);
      const arrow = this.root.querySelector('.ql-tooltip-arrow');
      // @ts-expect-error
      arrow.style.marginLeft = '';
      if (shift !== 0) {
        // @ts-expect-error
        arrow.style.marginLeft = `${ -1 * shift - arrow.offsetWidth / 2}px`;
      }
      return shift;
    }
  }
  class BubbleTheme extends BaseTheme {
    constructor(quill, options) {
      if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
        options.modules.toolbar.container = TOOLBAR_CONFIG$1;
      }
      super(quill, options);
      this.quill.container.classList.add('ql-bubble');
    }
    extendToolbar(toolbar) {
      // @ts-expect-error
      this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
      if (toolbar.container != null) {
        this.tooltip.root.appendChild(toolbar.container);
        this.buildButtons(toolbar.container.querySelectorAll('button'), Icons);
        this.buildPickers(toolbar.container.querySelectorAll('select'), Icons);
      }
    }
  }
  BubbleTheme.DEFAULTS = merge({}, BaseTheme.DEFAULTS, {
    modules: {
      toolbar: {
        handlers: {
          link(value) {
            if (!value) {
              this.quill.format('link', false, Quill$1.sources.USER);
            } else {
              // @ts-expect-error
              this.quill.theme.tooltip.edit();
            }
          }
        }
      }
    }
  });

  const TOOLBAR_CONFIG = [[{
    header: ['1', '2', '3', false]
  }], ['bold', 'italic', 'underline', 'link'], [{
    list: 'ordered'
  }, {
    list: 'bullet'
  }], ['clean']];
  class SnowTooltip extends BaseTooltip {
    static TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');
    preview = this.root.querySelector('a.ql-preview');
    listen() {
      super.listen();
      // @ts-expect-error Fix me later
      this.root.querySelector('a.ql-action').addEventListener('click', event => {
        if (this.root.classList.contains('ql-editing')) {
          this.save();
        } else {
          // @ts-expect-error Fix me later
          this.edit('link', this.preview.textContent);
        }
        event.preventDefault();
      });
      // @ts-expect-error Fix me later
      this.root.querySelector('a.ql-remove').addEventListener('click', event => {
        if (this.linkRange != null) {
          const range = this.linkRange;
          this.restoreFocus();
          this.quill.formatText(range, 'link', false, Emitter.sources.USER);
          delete this.linkRange;
        }
        event.preventDefault();
        this.hide();
      });
      this.quill.on(Emitter.events.SELECTION_CHANGE, (range, oldRange, source) => {
        if (range == null) return;
        if (range.length === 0 && source === Emitter.sources.USER) {
          const [link, offset] = this.quill.scroll.descendant(Link, range.index);
          if (link != null) {
            this.linkRange = new Range(range.index - offset, link.length());
            const preview = Link.formats(link.domNode);
            // @ts-expect-error Fix me later
            this.preview.textContent = preview;
            // @ts-expect-error Fix me later
            this.preview.setAttribute('href', preview);
            this.show();
            const bounds = this.quill.getBounds(this.linkRange);
            if (bounds != null) {
              this.position(bounds);
            }
            return;
          }
        } else {
          delete this.linkRange;
        }
        this.hide();
      });
    }
    show() {
      super.show();
      this.root.removeAttribute('data-mode');
    }
  }
  class SnowTheme extends BaseTheme {
    constructor(quill, options) {
      if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
        options.modules.toolbar.container = TOOLBAR_CONFIG;
      }
      super(quill, options);
      this.quill.container.classList.add('ql-snow');
    }
    extendToolbar(toolbar) {
      if (toolbar.container != null) {
        toolbar.container.classList.add('ql-snow');
        this.buildButtons(toolbar.container.querySelectorAll('button'), Icons);
        this.buildPickers(toolbar.container.querySelectorAll('select'), Icons);
        // @ts-expect-error
        this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
        if (toolbar.container.querySelector('.ql-link')) {
          this.quill.keyboard.addBinding({
            key: 'k',
            shortKey: true
          }, (_range, context) => {
            toolbar.handlers.link.call(toolbar, !context.format.link);
          });
        }
      }
    }
  }
  SnowTheme.DEFAULTS = merge({}, BaseTheme.DEFAULTS, {
    modules: {
      toolbar: {
        handlers: {
          link(value) {
            if (value) {
              const range = this.quill.getSelection();
              if (range == null || range.length === 0) return;
              let preview = this.quill.getText(range);
              if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
                preview = `mailto:${preview}`;
              }
              // @ts-expect-error
              const {
                tooltip
              } = this.quill.theme;
              tooltip.edit('link', preview);
            } else {
              this.quill.format('link', false, Quill$1.sources.USER);
            }
          }
        }
      }
    }
  });

  Quill$1.register({
    'attributors/attribute/direction': DirectionAttribute,
    'attributors/class/align': AlignClass,
    'attributors/class/background': BackgroundClass,
    'attributors/class/color': ColorClass,
    'attributors/class/direction': DirectionClass,
    'attributors/class/font': FontClass,
    'attributors/class/size': SizeClass,
    'attributors/style/align': AlignStyle,
    'attributors/style/background': BackgroundStyle,
    'attributors/style/color': ColorStyle,
    'attributors/style/direction': DirectionStyle,
    'attributors/style/font': FontStyle,
    'attributors/style/size': SizeStyle
  }, true);
  Quill$1.register({
    'formats/align': AlignClass,
    'formats/direction': DirectionClass,
    'formats/indent': IndentClass,
    'formats/background': BackgroundStyle,
    'formats/color': ColorStyle,
    'formats/font': FontClass,
    'formats/size': SizeClass,
    'formats/blockquote': Blockquote,
    'formats/code-block': CodeBlock,
    'formats/header': Header,
    'formats/list': ListItem,
    'formats/bold': Bold,
    'formats/code': Code,
    'formats/italic': Italic,
    'formats/link': Link,
    'formats/script': Script,
    'formats/strike': Strike,
    'formats/underline': Underline,
    'formats/formula': Formula,
    'formats/image': Image,
    'formats/video': Video,
    'modules/syntax': Syntax,
    'modules/table': Table,
    'modules/toolbar': Toolbar,
    'themes/bubble': BubbleTheme,
    'themes/snow': SnowTheme,
    'ui/icons': Icons,
    'ui/picker': Picker,
    'ui/icon-picker': IconPicker,
    'ui/color-picker': ColorPicker,
    'ui/tooltip': Tooltip
  }, true);

  var quill = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AttributeMap: DeltaExports.AttributeMap,
    Delta: Delta,
    Module: Module,
    Op: DeltaExports.Op,
    OpIterator: DeltaExports.OpIterator,
    Parchment: Parchment,
    Range: Range,
    default: Quill$1
  });

  var require$$5 = /*@__PURE__*/getAugmentedNamespace(quill);

  Object.defineProperty(editor_cjs, '__esModule', { value: true });

  var React = React__default.default;
  var api = api_cjs;
  var componentbase = componentbase_cjs;
  var hooks = hooks_cjs;
  var utils = utils_cjs;

  function _interopNamespace$1(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var React__namespace = /*#__PURE__*/_interopNamespace$1(React);

  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function (n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends.apply(null, arguments);
  }

  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }

  function toPrimitive(t, r) {
    if ("object" != _typeof(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != _typeof(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }

  function toPropertyKey(t) {
    var i = toPrimitive(t, "string");
    return "symbol" == _typeof(i) ? i : i + "";
  }

  function _defineProperty(e, r, t) {
    return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }

  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }

  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }

  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  }

  var classes = {
    root: function root(_ref) {
      var props = _ref.props;
      return utils.classNames('', props.className);
    },
    toolbar: '',
    content: ''
  };
  var styles$1 = "\n/*!\n * Quill Editor v2.0.2\n * https://quilljs.com\n * Copyright (c) 2017-2024, Slab\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n.ql-container {\n  box-sizing: border-box;\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 13px;\n  height: 100%;\n  margin: 0;\n  position: relative;\n}\n.ql-container.ql-disabled .ql-tooltip {\n  visibility: hidden;\n}\n.ql-container:not(.ql-disabled) li[data-list=\"checked\"] > .ql-ui,\n.ql-container:not(.ql-disabled) li[data-list=\"unchecked\"] > .ql-ui {\n  cursor: pointer;\n}\n.ql-clipboard {\n  left: -100000px;\n  height: 1px;\n  overflow-y: hidden;\n  position: absolute;\n  top: 50%;\n}\n.ql-clipboard p {\n  margin: 0;\n  padding: 0;\n}\n.ql-editor {\n  box-sizing: border-box;\n  counter-reset: list-0 list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8\n    list-9;\n  line-height: 1.42;\n  height: 100%;\n  outline: none;\n  overflow-y: auto;\n  padding: 12px 15px;\n  tab-size: 4;\n  -moz-tab-size: 4;\n  text-align: left;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n.ql-editor > * {\n  cursor: text;\n}\n.ql-editor p,\n.ql-editor ol,\n.ql-editor pre,\n.ql-editor blockquote,\n.ql-editor h1,\n.ql-editor h2,\n.ql-editor h3,\n.ql-editor h4,\n.ql-editor h5,\n.ql-editor h6 {\n  margin: 0;\n  padding: 0;\n}\n@supports (counter-set: none) {\n  .ql-editor p,\n  .ql-editor h1,\n  .ql-editor h2,\n  .ql-editor h3,\n  .ql-editor h4,\n  .ql-editor h5,\n  .ql-editor h6 {\n    counter-set: list-0 list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8\n      list-9;\n  }\n}\n@supports not (counter-set: none) {\n  .ql-editor p,\n  .ql-editor h1,\n  .ql-editor h2,\n  .ql-editor h3,\n  .ql-editor h4,\n  .ql-editor h5,\n  .ql-editor h6 {\n    counter-reset: list-0 list-1 list-2 list-3 list-4 list-5 list-6 list-7\n      list-8 list-9;\n  }\n}\n.ql-editor table {\n  border-collapse: collapse;\n}\n.ql-editor td {\n  border: 1px solid #000;\n  padding: 2px 5px;\n}\n.ql-editor ol {\n  padding-left: 1.5em;\n}\n.ql-editor li {\n  list-style-type: none;\n  padding-left: 1.5em;\n  position: relative;\n}\n.ql-editor li > .ql-ui:before {\n  display: inline-block;\n  margin-left: -1.5em;\n  margin-right: 0.3em;\n  text-align: right;\n  white-space: nowrap;\n  width: 1.2em;\n}\n.ql-editor li[data-list=\"checked\"] > .ql-ui,\n.ql-editor li[data-list=\"unchecked\"] > .ql-ui {\n  color: #777;\n}\n.ql-editor li[data-list=\"bullet\"] > .ql-ui:before {\n  content: \"\\2022\";\n}\n.ql-editor li[data-list=\"checked\"] > .ql-ui:before {\n  content: \"\\2611\";\n}\n.ql-editor li[data-list=\"unchecked\"] > .ql-ui:before {\n  content: \"\\2610\";\n}\n@supports (counter-set: none) {\n  .ql-editor li[data-list] {\n    counter-set: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  }\n}\n@supports not (counter-set: none) {\n  .ql-editor li[data-list] {\n    counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8\n      list-9;\n  }\n}\n.ql-editor li[data-list=\"ordered\"] {\n  counter-increment: list-0;\n}\n.ql-editor li[data-list=\"ordered\"] > .ql-ui:before {\n  content: counter(list-0, decimal) \". \";\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-1 {\n  counter-increment: list-1;\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-1 > .ql-ui:before {\n  content: counter(list-1, lower-alpha) \". \";\n}\n@supports (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-1 {\n    counter-set: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  }\n}\n@supports not (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-1 {\n    counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  }\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-2 {\n  counter-increment: list-2;\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-2 > .ql-ui:before {\n  content: counter(list-2, lower-roman) \". \";\n}\n@supports (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-2 {\n    counter-set: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  }\n}\n@supports not (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-2 {\n    counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  }\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-3 {\n  counter-increment: list-3;\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-3 > .ql-ui:before {\n  content: counter(list-3, decimal) \". \";\n}\n@supports (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-3 {\n    counter-set: list-4 list-5 list-6 list-7 list-8 list-9;\n  }\n}\n@supports not (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-3 {\n    counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;\n  }\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-4 {\n  counter-increment: list-4;\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-4 > .ql-ui:before {\n  content: counter(list-4, lower-alpha) \". \";\n}\n@supports (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-4 {\n    counter-set: list-5 list-6 list-7 list-8 list-9;\n  }\n}\n@supports not (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-4 {\n    counter-reset: list-5 list-6 list-7 list-8 list-9;\n  }\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-5 {\n  counter-increment: list-5;\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-5 > .ql-ui:before {\n  content: counter(list-5, lower-roman) \". \";\n}\n@supports (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-5 {\n    counter-set: list-6 list-7 list-8 list-9;\n  }\n}\n@supports not (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-5 {\n    counter-reset: list-6 list-7 list-8 list-9;\n  }\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-6 {\n  counter-increment: list-6;\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-6 > .ql-ui:before {\n  content: counter(list-6, decimal) \". \";\n}\n@supports (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-6 {\n    counter-set: list-7 list-8 list-9;\n  }\n}\n@supports not (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-6 {\n    counter-reset: list-7 list-8 list-9;\n  }\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-7 {\n  counter-increment: list-7;\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-7 > .ql-ui:before {\n  content: counter(list-7, lower-alpha) \". \";\n}\n@supports (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-7 {\n    counter-set: list-8 list-9;\n  }\n}\n@supports not (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-7 {\n    counter-reset: list-8 list-9;\n  }\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-8 {\n  counter-increment: list-8;\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-8 > .ql-ui:before {\n  content: counter(list-8, lower-roman) \". \";\n}\n@supports (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-8 {\n    counter-set: list-9;\n  }\n}\n@supports not (counter-set: none) {\n  .ql-editor li[data-list].ql-indent-8 {\n    counter-reset: list-9;\n  }\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-9 {\n  counter-increment: list-9;\n}\n.ql-editor li[data-list=\"ordered\"].ql-indent-9 > .ql-ui:before {\n  content: counter(list-9, decimal) \". \";\n}\n.ql-editor .ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 3em;\n}\n.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 4.5em;\n}\n.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 3em;\n}\n.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 4.5em;\n}\n.ql-editor .ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 6em;\n}\n.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 7.5em;\n}\n.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 6em;\n}\n.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 7.5em;\n}\n.ql-editor .ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 9em;\n}\n.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 10.5em;\n}\n.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 9em;\n}\n.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 10.5em;\n}\n.ql-editor .ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 12em;\n}\n.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 13.5em;\n}\n.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 12em;\n}\n.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 13.5em;\n}\n.ql-editor .ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 15em;\n}\n.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 16.5em;\n}\n.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 15em;\n}\n.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 16.5em;\n}\n.ql-editor .ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 18em;\n}\n.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 19.5em;\n}\n.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 18em;\n}\n.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 19.5em;\n}\n.ql-editor .ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 21em;\n}\n.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 22.5em;\n}\n.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 21em;\n}\n.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 22.5em;\n}\n.ql-editor .ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 24em;\n}\n.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 25.5em;\n}\n.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 24em;\n}\n.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 25.5em;\n}\n.ql-editor .ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 27em;\n}\n.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 28.5em;\n}\n.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 27em;\n}\n.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 28.5em;\n}\n.ql-editor li.ql-direction-rtl {\n  padding-right: 1.5em;\n}\n.ql-editor li.ql-direction-rtl > .ql-ui:before {\n  margin-left: 0.3em;\n  margin-right: -1.5em;\n  text-align: left;\n}\n.ql-editor table {\n  table-layout: fixed;\n  width: 100%;\n}\n.ql-editor table td {\n  outline: none;\n}\n.ql-editor .ql-code-block-container {\n  font-family: monospace;\n}\n.ql-editor .ql-video {\n  display: block;\n  max-width: 100%;\n}\n.ql-editor .ql-video.ql-align-center {\n  margin: 0 auto;\n}\n.ql-editor .ql-video.ql-align-right {\n  margin: 0 0 0 auto;\n}\n.ql-editor .ql-bg-black {\n  background-color: #000;\n}\n.ql-editor .ql-bg-red {\n  background-color: #e60000;\n}\n.ql-editor .ql-bg-orange {\n  background-color: #f90;\n}\n.ql-editor .ql-bg-yellow {\n  background-color: #ff0;\n}\n.ql-editor .ql-bg-green {\n  background-color: #008a00;\n}\n.ql-editor .ql-bg-blue {\n  background-color: #06c;\n}\n.ql-editor .ql-bg-purple {\n  background-color: #93f;\n}\n.ql-editor .ql-color-white {\n  color: #fff;\n}\n.ql-editor .ql-color-red {\n  color: #e60000;\n}\n.ql-editor .ql-color-orange {\n  color: #f90;\n}\n.ql-editor .ql-color-yellow {\n  color: #ff0;\n}\n.ql-editor .ql-color-green {\n  color: #008a00;\n}\n.ql-editor .ql-color-blue {\n  color: #06c;\n}\n.ql-editor .ql-color-purple {\n  color: #93f;\n}\n.ql-editor .ql-font-serif {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-editor .ql-font-monospace {\n  font-family: Monaco, Courier New, monospace;\n}\n.ql-editor .ql-size-small {\n  font-size: 0.75em;\n}\n.ql-editor .ql-size-large {\n  font-size: 1.5em;\n}\n.ql-editor .ql-size-huge {\n  font-size: 2.5em;\n}\n.ql-editor .ql-direction-rtl {\n  direction: rtl;\n  text-align: inherit;\n}\n.ql-editor .ql-align-center {\n  text-align: center;\n}\n.ql-editor .ql-align-justify {\n  text-align: justify;\n}\n.ql-editor .ql-align-right {\n  text-align: right;\n}\n.ql-editor .ql-ui {\n  position: absolute;\n}\n.ql-editor.ql-blank::before {\n  color: rgba(0, 0, 0, 0.6);\n  content: attr(data-placeholder);\n  font-style: italic;\n  left: 15px;\n  pointer-events: none;\n  position: absolute;\n  right: 15px;\n}\n.ql-snow.ql-toolbar:after,\n.ql-snow .ql-toolbar:after {\n  clear: both;\n  content: \"\";\n  display: table;\n}\n.ql-snow.ql-toolbar button,\n.ql-snow .ql-toolbar button {\n  background: none;\n  border: none;\n  cursor: pointer;\n  display: inline-block;\n  float: left;\n  height: 24px;\n  padding: 3px 5px;\n  width: 28px;\n}\n.ql-snow.ql-toolbar button svg,\n.ql-snow .ql-toolbar button svg {\n  float: left;\n  height: 100%;\n}\n.ql-snow.ql-toolbar button:active:hover,\n.ql-snow .ql-toolbar button:active:hover {\n  outline: none;\n}\n.ql-snow.ql-toolbar input.ql-image[type=\"file\"],\n.ql-snow .ql-toolbar input.ql-image[type=\"file\"] {\n  display: none;\n}\n.ql-snow.ql-toolbar button:hover,\n.ql-snow .ql-toolbar button:hover,\n.ql-snow.ql-toolbar button:focus,\n.ql-snow .ql-toolbar button:focus,\n.ql-snow.ql-toolbar button.ql-active,\n.ql-snow .ql-toolbar button.ql-active,\n.ql-snow.ql-toolbar .ql-picker-label:hover,\n.ql-snow .ql-toolbar .ql-picker-label:hover,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active,\n.ql-snow.ql-toolbar .ql-picker-item:hover,\n.ql-snow .ql-toolbar .ql-picker-item:hover,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected {\n  color: #06c;\n}\n.ql-snow.ql-toolbar button:hover .ql-fill,\n.ql-snow .ql-toolbar button:hover .ql-fill,\n.ql-snow.ql-toolbar button:focus .ql-fill,\n.ql-snow .ql-toolbar button:focus .ql-fill,\n.ql-snow.ql-toolbar button.ql-active .ql-fill,\n.ql-snow .ql-toolbar button.ql-active .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,\n.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar button:focus .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button:focus .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill {\n  fill: #06c;\n}\n.ql-snow.ql-toolbar button:hover .ql-stroke,\n.ql-snow .ql-toolbar button:hover .ql-stroke,\n.ql-snow.ql-toolbar button:focus .ql-stroke,\n.ql-snow .ql-toolbar button:focus .ql-stroke,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,\n.ql-snow.ql-toolbar button:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar button:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar button:focus .ql-stroke-miter,\n.ql-snow .ql-toolbar button:focus .ql-stroke-miter,\n.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,\n.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,\n.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,\n.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter {\n  stroke: #06c;\n}\n@media (pointer: coarse) {\n  .ql-snow.ql-toolbar button:hover:not(.ql-active),\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) {\n    color: #444;\n  }\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill {\n    fill: #444;\n  }\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,\n  .ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,\n  .ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter {\n    stroke: #444;\n  }\n}\n.ql-snow {\n  box-sizing: border-box;\n}\n.ql-snow * {\n  box-sizing: border-box;\n}\n.ql-snow .ql-hidden {\n  display: none;\n}\n.ql-snow .ql-out-bottom,\n.ql-snow .ql-out-top {\n  visibility: hidden;\n}\n.ql-snow .ql-tooltip {\n  position: absolute;\n  transform: translateY(10px);\n}\n.ql-snow .ql-tooltip a {\n  cursor: pointer;\n  text-decoration: none;\n}\n.ql-snow .ql-tooltip.ql-flip {\n  transform: translateY(-10px);\n}\n.ql-snow .ql-formats {\n  display: inline-block;\n  vertical-align: middle;\n}\n.ql-snow .ql-formats:after {\n  clear: both;\n  content: \"\";\n  display: table;\n}\n.ql-snow .ql-stroke {\n  fill: none;\n  stroke: #444;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke-width: 2;\n}\n.ql-snow .ql-stroke-miter {\n  fill: none;\n  stroke: #444;\n  stroke-miterlimit: 10;\n  stroke-width: 2;\n}\n.ql-snow .ql-fill,\n.ql-snow .ql-stroke.ql-fill {\n  fill: #444;\n}\n.ql-snow .ql-empty {\n  fill: none;\n}\n.ql-snow .ql-even {\n  fill-rule: evenodd;\n}\n.ql-snow .ql-thin,\n.ql-snow .ql-stroke.ql-thin {\n  stroke-width: 1;\n}\n.ql-snow .ql-transparent {\n  opacity: 0.4;\n}\n.ql-snow .ql-direction svg:last-child {\n  display: none;\n}\n.ql-snow .ql-direction.ql-active svg:last-child {\n  display: inline;\n}\n.ql-snow .ql-direction.ql-active svg:first-child {\n  display: none;\n}\n.ql-snow .ql-editor h1 {\n  font-size: 2em;\n}\n.ql-snow .ql-editor h2 {\n  font-size: 1.5em;\n}\n.ql-snow .ql-editor h3 {\n  font-size: 1.17em;\n}\n.ql-snow .ql-editor h4 {\n  font-size: 1em;\n}\n.ql-snow .ql-editor h5 {\n  font-size: 0.83em;\n}\n.ql-snow .ql-editor h6 {\n  font-size: 0.67em;\n}\n.ql-snow .ql-editor a {\n  text-decoration: underline;\n}\n.ql-snow .ql-editor blockquote {\n  border-left: 4px solid #ccc;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  padding-left: 16px;\n}\n.ql-snow .ql-editor code,\n.ql-snow .ql-editor .ql-code-block-container {\n  background-color: #f0f0f0;\n  border-radius: 3px;\n}\n.ql-snow .ql-editor .ql-code-block-container {\n  margin-bottom: 5px;\n  margin-top: 5px;\n  padding: 5px 10px;\n}\n.ql-snow .ql-editor code {\n  font-size: 85%;\n  padding: 2px 4px;\n}\n.ql-snow .ql-editor .ql-code-block-container {\n  background-color: #23241f;\n  color: #f8f8f2;\n  overflow: visible;\n}\n.ql-snow .ql-editor img {\n  max-width: 100%;\n}\n.ql-snow .ql-picker {\n  color: #444;\n  display: inline-block;\n  float: left;\n  font-size: 14px;\n  font-weight: 500;\n  height: 24px;\n  position: relative;\n  vertical-align: middle;\n}\n.ql-snow .ql-picker-label {\n  cursor: pointer;\n  display: inline-block;\n  height: 100%;\n  padding-left: 8px;\n  padding-right: 2px;\n  position: relative;\n  width: 100%;\n}\n.ql-snow .ql-picker-label::before {\n  display: inline-block;\n  line-height: 22px;\n}\n.ql-snow .ql-picker-options {\n  background-color: #fff;\n  display: none;\n  min-width: 100%;\n  padding: 4px 8px;\n  position: absolute;\n  white-space: nowrap;\n}\n.ql-snow .ql-picker-options .ql-picker-item {\n  cursor: pointer;\n  display: block;\n  padding-bottom: 5px;\n  padding-top: 5px;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label {\n  color: #ccc;\n  z-index: 2;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill {\n  fill: #ccc;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke {\n  stroke: #ccc;\n}\n.ql-snow .ql-picker.ql-expanded .ql-picker-options {\n  display: block;\n  margin-top: -1px;\n  top: 100%;\n  z-index: 1;\n}\n.ql-snow .ql-color-picker,\n.ql-snow .ql-icon-picker {\n  width: 28px;\n}\n.ql-snow .ql-color-picker .ql-picker-label,\n.ql-snow .ql-icon-picker .ql-picker-label {\n  padding: 2px 4px;\n}\n.ql-snow .ql-color-picker .ql-picker-label svg,\n.ql-snow .ql-icon-picker .ql-picker-label svg {\n  right: 4px;\n}\n.ql-snow .ql-icon-picker .ql-picker-options {\n  padding: 4px 0;\n}\n.ql-snow .ql-icon-picker .ql-picker-item {\n  height: 24px;\n  width: 24px;\n  padding: 2px 4px;\n}\n.ql-snow .ql-color-picker .ql-picker-options {\n  padding: 3px 5px;\n  width: 152px;\n}\n.ql-snow .ql-color-picker .ql-picker-item {\n  border: 1px solid transparent;\n  float: left;\n  height: 16px;\n  margin: 2px;\n  padding: 0;\n  width: 16px;\n}\n.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg {\n  position: absolute;\n  margin-top: -9px;\n  right: 0;\n  top: 50%;\n  width: 18px;\n}\n.ql-snow\n  .ql-picker.ql-header\n  .ql-picker-label[data-label]:not([data-label=\"\"])::before,\n.ql-snow\n  .ql-picker.ql-font\n  .ql-picker-label[data-label]:not([data-label=\"\"])::before,\n.ql-snow\n  .ql-picker.ql-size\n  .ql-picker-label[data-label]:not([data-label=\"\"])::before,\n.ql-snow\n  .ql-picker.ql-header\n  .ql-picker-item[data-label]:not([data-label=\"\"])::before,\n.ql-snow\n  .ql-picker.ql-font\n  .ql-picker-item[data-label]:not([data-label=\"\"])::before,\n.ql-snow\n  .ql-picker.ql-size\n  .ql-picker-item[data-label]:not([data-label=\"\"])::before {\n  content: attr(data-label);\n}\n.ql-snow .ql-picker.ql-header {\n  width: 98px;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item::before {\n  content: \"Normal\";\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"1\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before {\n  content: \"Heading 1\";\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"2\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before {\n  content: \"Heading 2\";\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"3\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before {\n  content: \"Heading 3\";\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"4\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before {\n  content: \"Heading 4\";\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"5\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before {\n  content: \"Heading 5\";\n}\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"6\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before {\n  content: \"Heading 6\";\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before {\n  font-size: 2em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before {\n  font-size: 1.5em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before {\n  font-size: 1.17em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before {\n  font-size: 1em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before {\n  font-size: 0.83em;\n}\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before {\n  font-size: 0.67em;\n}\n.ql-snow .ql-picker.ql-font {\n  width: 108px;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item::before {\n  content: \"Sans Serif\";\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"serif\"]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"serif\"]::before {\n  content: \"Serif\";\n}\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"monospace\"]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"monospace\"]::before {\n  content: \"Monospace\";\n}\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"serif\"]::before {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"monospace\"]::before {\n  font-family: Monaco, Courier New, monospace;\n}\n.ql-snow .ql-picker.ql-size {\n  width: 98px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item::before {\n  content: \"Normal\";\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=\"small\"]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"small\"]::before {\n  content: \"Small\";\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=\"large\"]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"large\"]::before {\n  content: \"Large\";\n}\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=\"huge\"]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"huge\"]::before {\n  content: \"Huge\";\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"small\"]::before {\n  font-size: 10px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"large\"]::before {\n  font-size: 18px;\n}\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"huge\"]::before {\n  font-size: 32px;\n}\n.ql-snow .ql-color-picker.ql-background .ql-picker-item {\n  background-color: #fff;\n}\n.ql-snow .ql-color-picker.ql-color .ql-picker-item {\n  background-color: #000;\n}\n.ql-code-block-container {\n  position: relative;\n}\n.ql-code-block-container .ql-ui {\n  right: 5px;\n  top: 5px;\n}\n.ql-toolbar.ql-snow {\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n  font-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n  padding: 8px;\n}\n.ql-toolbar.ql-snow .ql-formats {\n  margin-right: 15px;\n}\n.ql-toolbar.ql-snow .ql-picker-label {\n  border: 1px solid transparent;\n}\n.ql-toolbar.ql-snow .ql-picker-options {\n  border: 1px solid transparent;\n  box-shadow: rgba(0, 0, 0, 0.2) 0 2px 8px;\n}\n.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label {\n  border-color: #ccc;\n}\n.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options {\n  border-color: #ccc;\n}\n.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,\n.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover {\n  border-color: #000;\n}\n.ql-toolbar.ql-snow + .ql-container.ql-snow {\n  border-top: 0;\n}\n.ql-snow .ql-tooltip {\n  background-color: #fff;\n  border: 1px solid #ccc;\n  box-shadow: 0 0 5px #ddd;\n  color: #444;\n  padding: 5px 12px;\n  white-space: nowrap;\n}\n.ql-snow .ql-tooltip::before {\n  content: \"Visit URL:\";\n  line-height: 26px;\n  margin-right: 8px;\n}\n.ql-snow .ql-tooltip input[type=\"text\"] {\n  display: none;\n  border: 1px solid #ccc;\n  font-size: 13px;\n  height: 26px;\n  margin: 0;\n  padding: 3px 5px;\n  width: 170px;\n}\n.ql-snow .ql-tooltip a.ql-preview {\n  display: inline-block;\n  max-width: 200px;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  vertical-align: top;\n}\n.ql-snow .ql-tooltip a.ql-action::after {\n  border-right: 1px solid #ccc;\n  content: \"Edit\";\n  margin-left: 16px;\n  padding-right: 8px;\n}\n.ql-snow .ql-tooltip a.ql-remove::before {\n  content: \"Remove\";\n  margin-left: 8px;\n}\n.ql-snow .ql-tooltip a {\n  line-height: 26px;\n}\n.ql-snow .ql-tooltip.ql-editing a.ql-preview,\n.ql-snow .ql-tooltip.ql-editing a.ql-remove {\n  display: none;\n}\n.ql-snow .ql-tooltip.ql-editing input[type=\"text\"] {\n  display: inline-block;\n}\n.ql-snow .ql-tooltip.ql-editing a.ql-action::after {\n  border-right: 0;\n  content: \"Save\";\n  padding-right: 0;\n}\n.ql-snow .ql-tooltip[data-mode=\"link\"]::before {\n  content: \"Enter link:\";\n}\n.ql-snow .ql-tooltip[data-mode=\"formula\"]::before {\n  content: \"Enter formula:\";\n}\n.ql-snow .ql-tooltip[data-mode=\"video\"]::before {\n  content: \"Enter video:\";\n}\n.ql-snow a {\n  color: #06c;\n}\n.ql-container.ql-snow {\n  border: 1px solid #ccc;\n}\n";
  var EditorBase = componentbase.ComponentBase.extend({
    defaultProps: {
      __TYPE: 'Editor',
      id: null,
      value: null,
      style: null,
      className: null,
      placeholder: null,
      readOnly: false,
      modules: null,
      formats: null,
      theme: 'snow',
      showHeader: true,
      headerTemplate: null,
      onTextChange: null,
      onSelectionChange: null,
      onLoad: null,
      maxLength: null,
      children: undefined
    },
    css: {
      classes: classes,
      styles: styles$1
    }
  });

  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var QuillJS = function () {
    try {
      return Quill;
    } catch (_unused) {
      return null;
    }
  }();
  var Editor = /*#__PURE__*/React__namespace.memo(/*#__PURE__*/React__namespace.forwardRef(function (inProps, ref) {
    var mergeProps = hooks.useMergeProps();
    var context = React__namespace.useContext(api.PrimeReactContext);
    var props = EditorBase.getProps(inProps, context);
    var _EditorBase$setMetaDa = EditorBase.setMetaData({
        props: props
      }),
      ptm = _EditorBase$setMetaDa.ptm,
      cx = _EditorBase$setMetaDa.cx,
      isUnstyled = _EditorBase$setMetaDa.isUnstyled;
    componentbase.useHandleStyle(EditorBase.css.styles, isUnstyled, {
      name: 'editor'
    });
    var elementRef = React__namespace.useRef(null);
    var contentRef = React__namespace.useRef(null);
    var toolbarRef = React__namespace.useRef(null);
    var quill = React__namespace.useRef(null);
    var isQuillLoaded = React__namespace.useRef(false);
    var _React$useState = React__namespace.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      quillCreated = _React$useState2[0],
      setQuillCreated = _React$useState2[1];
    hooks.useMountEffect(function () {
      if (!isQuillLoaded.current) {
        var configuration = {
          modules: _objectSpread({
            toolbar: props.showHeader ? toolbarRef.current : false
          }, props.modules),
          placeholder: props.placeholder,
          readOnly: props.readOnly,
          theme: props.theme,
          formats: props.formats
        };
        if (QuillJS) {
          // GitHub #3097 loaded by script only
          initQuill(new Quill(contentRef.current, configuration));
        } else {
          Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace$1(require$$5); }).then(function (module) {
            if (module && utils.DomHandler.isExist(contentRef.current)) {
              var quillInstance;
              if (module["default"]) {
                // webpack
                quillInstance = new module["default"](contentRef.current, configuration);
              } else {
                // parceljs
                quillInstance = new module(contentRef.current, configuration);
              }
              initQuill(quillInstance);
            }
          });
        }
        isQuillLoaded.current = true;
      }
    });
    var onTextChange = function onTextChange(delta, oldContents, source) {
      var firstChild = contentRef.current.children[0];
      var html = firstChild ? firstChild.innerHTML : null;
      var text = quill.current.getText();
      if (html === '<p><br></p>') {
        html = null;
      }

      // GitHub #2271 prevent infinite loop on clipboard paste of HTML
      if (source === 'api') {
        var htmlValue = contentRef.current.children[0];
        var editorValue = document.createElement('div');
        editorValue.innerHTML = props.value || '';

        // this is necessary because Quill rearranged style elements
        if (utils.DomHandler.isEqualElement(htmlValue, editorValue)) {
          return;
        }
      }
      if (props.maxLength) {
        var length = quill.current.getLength();
        if (length > props.maxLength) {
          quill.current.deleteText(props.maxLength, length);
        }
      }
      if (props.onTextChange) {
        props.onTextChange({
          htmlValue: html,
          textValue: text,
          delta: delta,
          source: source
        });
      }
    };
    var onSelectionChange = function onSelectionChange(range, oldRange, source) {
      if (props.onSelectionChange) {
        props.onSelectionChange({
          range: range,
          oldRange: oldRange,
          source: source
        });
      }
    };
    var initValue = React.useRef(props.value);
    initValue.current = props.value;
    var initQuill = function initQuill(quillInstance) {
      quill.current = quillInstance;
      if (initValue.current) {
        quillInstance.setContents(quillInstance.clipboard.convert({
          html: initValue.current,
          text: ''
        }));
      }
      setQuillCreated(true);
    };
    hooks.useUpdateEffect(function () {
      if (quillCreated) {
        quill.current.on('text-change', onTextChange);
        quill.current.on('selection-change', onSelectionChange);
        return function () {
          quill.current.off('text-change', onTextChange);
          quill.current.off('selection-change', onSelectionChange);
        };
      }
    });
    hooks.useUpdateEffect(function () {
      if (quillCreated) {
        if (quill.current && quill.current.getModule('toolbar')) {
          props.onLoad && props.onLoad(quill.current);
        }
      }
    }, [quillCreated]);
    hooks.useUpdateEffect(function () {
      if (quill.current && !quill.current.hasFocus()) {
        if (props.value) {
          quill.current.setContents(quill.current.clipboard.convert({
            html: props.value,
            text: ''
          }));
        } else {
          quill.current.setText('');
        }
      }
    }, [props.value]);
    React__namespace.useImperativeHandle(ref, function () {
      return {
        props: props,
        getQuill: function getQuill() {
          return quill.current;
        },
        getElement: function getElement() {
          return elementRef.current;
        },
        getContent: function getContent() {
          return contentRef.current;
        },
        getToolbar: function getToolbar() {
          return toolbarRef.current;
        }
      };
    });
    var createToolbarHeader = function createToolbarHeader() {
      var toolbarProps = mergeProps({
        ref: toolbarRef,
        className: cx('toolbar')
      }, ptm('toolbar'));
      if (props.showHeader === false) {
        return null;
      } else if (props.headerTemplate) {
        return /*#__PURE__*/React__namespace.createElement("div", toolbarProps, props.headerTemplate);
      }
      var getMergeProps = function getMergeProps(params, key) {
        return mergeProps(params && _objectSpread({}, params), ptm(key));
      };
      var formatsProps = mergeProps({
        className: 'ql-formats'
      }, ptm('formats'));
      return /*#__PURE__*/React__namespace.createElement("div", toolbarProps, /*#__PURE__*/React__namespace.createElement("span", formatsProps, /*#__PURE__*/React__namespace.createElement("select", getMergeProps({
        className: 'ql-header',
        defaultValue: '0'
      }, 'header'), /*#__PURE__*/React__namespace.createElement("option", getMergeProps({
        value: '1'
      }, 'option'), "Heading"), /*#__PURE__*/React__namespace.createElement("option", getMergeProps({
        value: '2'
      }, 'option'), "Subheading"), /*#__PURE__*/React__namespace.createElement("option", getMergeProps({
        value: '0'
      }, 'option'), "Normal")), /*#__PURE__*/React__namespace.createElement("select", getMergeProps({
        className: 'ql-font'
      }, 'font'), /*#__PURE__*/React__namespace.createElement("option", getMergeProps(undefined, 'option')), /*#__PURE__*/React__namespace.createElement("option", getMergeProps({
        value: 'serif'
      }, 'option')), /*#__PURE__*/React__namespace.createElement("option", getMergeProps({
        value: 'monospace'
      }, 'option')))), /*#__PURE__*/React__namespace.createElement("span", formatsProps, /*#__PURE__*/React__namespace.createElement("button", getMergeProps({
        type: 'button',
        className: 'ql-bold',
        'aria-label': 'Bold'
      }, 'bold')), /*#__PURE__*/React__namespace.createElement("button", getMergeProps({
        type: 'button',
        className: 'ql-italic',
        'aria-label': 'Italic'
      }, 'italic')), /*#__PURE__*/React__namespace.createElement("button", getMergeProps({
        type: 'button',
        className: 'ql-underline',
        'aria-label': 'Underline'
      }, 'underline'))), /*#__PURE__*/React__namespace.createElement("span", formatsProps, /*#__PURE__*/React__namespace.createElement("select", getMergeProps({
        className: 'ql-color'
      }, 'color')), /*#__PURE__*/React__namespace.createElement("select", getMergeProps({
        className: 'ql-background'
      }, 'background'))), /*#__PURE__*/React__namespace.createElement("span", formatsProps, /*#__PURE__*/React__namespace.createElement("button", getMergeProps({
        type: 'button',
        className: 'ql-list',
        value: 'ordered',
        'aria-label': 'Ordered List'
      }, 'list')), /*#__PURE__*/React__namespace.createElement("button", getMergeProps({
        type: 'button',
        className: 'ql-list',
        value: 'bullet',
        'aria-label': 'Unordered List'
      }, 'list')), /*#__PURE__*/React__namespace.createElement("select", getMergeProps({
        className: 'ql-align'
      }, 'select'), /*#__PURE__*/React__namespace.createElement("option", getMergeProps({
        defaultValue: true
      }, 'option')), /*#__PURE__*/React__namespace.createElement("option", getMergeProps({
        value: 'center'
      }, 'option')), /*#__PURE__*/React__namespace.createElement("option", getMergeProps({
        value: 'right'
      }, 'option')), /*#__PURE__*/React__namespace.createElement("option", getMergeProps({
        value: 'justify'
      }, 'option')))), /*#__PURE__*/React__namespace.createElement("span", formatsProps, /*#__PURE__*/React__namespace.createElement("button", getMergeProps({
        type: 'button',
        className: 'ql-link',
        'aria-label': 'Insert Link'
      }, 'link')), /*#__PURE__*/React__namespace.createElement("button", getMergeProps({
        type: 'button',
        className: 'ql-image',
        'aria-label': 'Insert Image'
      }, 'image')), /*#__PURE__*/React__namespace.createElement("button", getMergeProps({
        type: 'button',
        className: 'ql-code-block',
        'aria-label': 'Insert Code Block'
      }, 'codeBlock'))), /*#__PURE__*/React__namespace.createElement("span", formatsProps, /*#__PURE__*/React__namespace.createElement("button", getMergeProps({
        type: 'button',
        className: 'ql-clean',
        'aria-label': 'Remove Styles'
      }, 'clean'))));
    };
    var header = createToolbarHeader();
    var contentProps = mergeProps({
      ref: contentRef,
      className: cx('content'),
      style: props.style
    }, ptm('content'));
    var content = /*#__PURE__*/React__namespace.createElement("div", contentProps);
    var rootProps = mergeProps({
      className: utils.classNames(props.className, cx('root'))
    }, EditorBase.getOtherProps(props), ptm('root'));
    return /*#__PURE__*/React__namespace.createElement("div", _extends({
      id: props.id,
      ref: elementRef
    }, rootProps), header, content);
  }));
  Editor.displayName = 'Editor';

  var Editor_1 = editor_cjs.Editor = Editor;

  // PrimeReact CSS fayllarini dinamik ravishda qo'shish
  const addPrimeStyles$4 = () => {
    const themeUrl = "https://cdn.jsdelivr.net/npm/primereact@9.6.0/resources/themes/lara-light-blue/theme.css";
    const coreUrl = "https://cdn.jsdelivr.net/npm/primereact@9.6.0/resources/primereact.min.css";
    const iconsUrl = "https://cdn.jsdelivr.net/npm/primeicons@6.0.1/primeicons.css";
    const existingLinks = Array.from(document.head.querySelectorAll("link")).map(link => link.href);
    if (!existingLinks.includes(themeUrl)) {
      const themeLink = document.createElement("link");
      themeLink.rel = "stylesheet";
      themeLink.href = themeUrl;
      document.head.appendChild(themeLink);
    }
    if (!existingLinks.includes(coreUrl)) {
      const coreLink = document.createElement("link");
      coreLink.rel = "stylesheet";
      coreLink.href = coreUrl;
      document.head.appendChild(coreLink);
    }
    if (!existingLinks.includes(iconsUrl)) {
      const iconsLink = document.createElement("link");
      iconsLink.rel = "stylesheet";
      iconsLink.href = iconsUrl;
      document.head.appendChild(iconsLink);
    }
  };
  const BlogCreate = () => {
    const [title, setTitle] = React$3.useState("");
    const [subtitles, setSubtitles] = React$3.useState("");
    const [description, setDescription] = React$3.useState("");
    const [inputs, setInputs] = React$3.useState([{
      id: Date.now(),
      file: null
    }]);
    const [uploaded, setUploaded] = React$3.useState([]);

    // author fields
    const [authorName, setAuthorName] = React$3.useState("");
    const [authorDescription, setAuthorDescription] = React$3.useState("");
    const [authorImage, setAuthorImage] = React$3.useState(null);

    // PrimeReact stillarini komponent yuklanganda qo'shish
    React$3.useEffect(() => {
      addPrimeStyles$4();
    }, []);
    const handleFileChange = (index, file) => {
      const newInputs = [...inputs];
      newInputs[index].file = file;
      setInputs(newInputs);
    };
    const addInput = () => {
      if (inputs.length >= 10) {
        alert("Максимум можно загрузить 10 изображений!");
        return;
      }
      setInputs([...inputs, {
        id: Date.now(),
        file: null
      }]);
    };
    const handleUpload = async () => {
      const files = inputs.map(input => input.file).filter(Boolean);
      if (!files.length) {
        return alert("Выберите хотя бы одно изображение!");
      }
      try {
        const formData = new FormData();
        files.forEach(file => formData.append("files", file));
        formData.append("title", title);
        formData.append("subtitles", subtitles);
        formData.append("description", description);

        // author data
        formData.append("author_name", authorName);
        formData.append("author_description", authorDescription);
        if (authorImage) {
          formData.append("author_image", authorImage);
        }
        const res = await axios.post(`${window.location.origin}/api/blog/create`, formData, {
          headers: {
            "Content-Type": "multipart/form-data"
          }
        });
        setUploaded(res.data.data.images || []);
        alert("Все данные успешно сохранены!");
        window.location.href = "/admin/resources/blog";
      } catch (err) {
        console.error(err);
        alert("Ошибка: " + (err.response?.data?.message || err.message));
      }
    };

    // Editor uchun headerTemplate
    const headerTemplate = /*#__PURE__*/React__default.default.createElement("span", {
      className: "ql-formats"
    }, /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-font"
    }, /*#__PURE__*/React__default.default.createElement("option", {
      selected: true
    }), /*#__PURE__*/React__default.default.createElement("option", {
      value: "serif"
    }), /*#__PURE__*/React__default.default.createElement("option", {
      value: "monospace"
    })), /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-size"
    }, /*#__PURE__*/React__default.default.createElement("option", {
      value: "small"
    }), /*#__PURE__*/React__default.default.createElement("option", {
      selected: true
    }), /*#__PURE__*/React__default.default.createElement("option", {
      value: "large"
    }), /*#__PURE__*/React__default.default.createElement("option", {
      value: "huge"
    })), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-bold",
      "aria-label": "Bold"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-italic",
      "aria-label": "Italic"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-underline",
      "aria-label": "Underline"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-strike",
      "aria-label": "Strike"
    }), /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-header"
    }, /*#__PURE__*/React__default.default.createElement("option", {
      value: "1"
    }, "H1"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "2"
    }, "H2"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "3"
    }, "H3"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "4"
    }, "H4"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "5"
    }, "H5"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "6"
    }, "H6"), /*#__PURE__*/React__default.default.createElement("option", {
      selected: true
    }, "Normal")), /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-color"
    }), /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-background"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-list",
      value: "ordered",
      "aria-label": "Ordered List"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-list",
      value: "bullet",
      "aria-label": "Unordered List"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-indent",
      value: "-1",
      "aria-label": "Decrease Indent"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-indent",
      value: "+1",
      "aria-label": "Increase Indent"
    }), /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-align"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-blockquote",
      "aria-label": "Blockquote"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-code-block",
      "aria-label": "Code Block"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-link",
      "aria-label": "Link"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-image",
      "aria-label": "Image"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-video",
      "aria-label": "Video"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-clean",
      "aria-label": "Remove Formatting"
    }));
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      flex: true,
      flexDirection: "column",
      alignItems: "center",
      mt: "xl",
      width: "100%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      value: title,
      width: "100%",
      onChange: e => setTitle(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041F\u043E\u0434\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"), /*#__PURE__*/React__default.default.createElement("textarea", {
      value: subtitles,
      style: {
        width: "100%",
        padding: "1rem",
        border: "1px solid #d9d9d9",
        borderRadius: "4px",
        fontSize: "14px",
        fontFamily: "inherit",
        minHeight: "100px",
        backgroundColor: "black",
        color: "white"
      },
      onChange: e => setSubtitles(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043F\u043E\u0434\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%",
      style: {
        padding: "10px",
        borderRadius: "8px",
        color: "white"
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        border: "1px solid #ced4da",
        borderRadius: "6px",
        overflow: "hidden"
      }
    }, /*#__PURE__*/React__default.default.createElement(Editor_1, {
      value: description,
      onTextChange: e => setDescription(e.htmlValue),
      headerTemplate: headerTemplate,
      style: {
        height: "320px",
        color: "white"
      }
    }))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0418\u043C\u044F \u0410\u0432\u0442\u043E\u0440\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      value: authorName,
      width: "100%",
      onChange: e => setAuthorName(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043C\u044F \u0430\u0432\u0442\u043E\u0440\u0430"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0410\u0432\u0442\u043E\u0440\u0430"), /*#__PURE__*/React__default.default.createElement("textarea", {
      value: authorDescription,
      style: {
        width: "100%",
        padding: "1rem",
        border: "1px solid #d9d9d9",
        borderRadius: "4px",
        fontSize: "14px",
        fontFamily: "inherit",
        minHeight: "100px",
        backgroundColor: "black",
        color: "white"
      },
      onChange: e => setAuthorDescription(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0430\u0432\u0442\u043E\u0440\u0430"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        gap: "12px",
        width: "60%",
        margin: "0 auto"
      }
    }, /*#__PURE__*/React__default.default.createElement("input", {
      id: "author-image",
      type: "file",
      accept: "image/*",
      style: {
        display: "none"
      },
      onChange: e => setAuthorImage(e.target.files[0])
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      htmlFor: "author-image",
      style: {
        backgroundColor: "#007bff",
        color: "white",
        padding: "10px 18px",
        borderRadius: "8px",
        cursor: "pointer",
        fontSize: "15px",
        fontWeight: "600",
        boxShadow: "0 4px 6px rgba(0,0,0,0.1)",
        transition: "all 0.2s ease-in-out"
      },
      onMouseEnter: e => e.currentTarget.style.backgroundColor = "#0056b3",
      onMouseLeave: e => e.currentTarget.style.backgroundColor = "#007bff"
    }, "\uD83D\uDCF7 \u0424\u043E\u0442\u043E \u0410\u0432\u0442\u043E\u0440\u0430"), authorImage && /*#__PURE__*/React__default.default.createElement("img", {
      src: URL.createObjectURL(authorImage),
      alt: "author-preview",
      style: {
        width: "120px",
        height: "120px",
        objectFit: "cover",
        borderRadius: "50%",
        border: "3px solid #007bff",
        boxShadow: "0 4px 10px rgba(0,0,0,0.15)"
      }
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      mb: "lg",
      style: {
        fontSize: "20px",
        fontWeight: "bold"
      }
    }, "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F (\u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C 10)"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      style: {
        display: "flex",
        gap: "15px",
        flexWrap: "wrap",
        justifyContent: "center",
        width: "60%"
      }
    }, inputs.map((input, index) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: input.id,
      style: {
        backgroundColor: "rgba(165, 231, 214, 0.8)",
        padding: "10px",
        borderRadius: "8px",
        display: "flex",
        alignItems: "center",
        gap: "15px",
        minWidth: "250px"
      }
    }, /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        display: "inline-block",
        backgroundColor: "#007bff",
        color: "white",
        padding: "12px 20px",
        borderRadius: "6px",
        cursor: "pointer",
        whiteSpace: "nowrap",
        fontSize: "16px",
        fontWeight: "600"
      }
    }, "\uD83D\uDCC2 \u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0444\u0430\u0439\u043B", /*#__PURE__*/React__default.default.createElement("input", {
      type: "file",
      accept: "image/*",
      onChange: e => handleFileChange(index, e.target.files[0]),
      style: {
        display: "none"
      }
    })), input.file && /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        fontSize: "16px",
        fontWeight: "600",
        maxWidth: "200px",
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        display: "inline-block",
        verticalAlign: "middle"
      }
    }, "\u0424\u0430\u0439\u043B ", input.file.name, " \u0432\u044B\u0431\u0440\u0430\u043D"), input.file && input.file.type.startsWith("image/") && /*#__PURE__*/React__default.default.createElement("img", {
      src: URL.createObjectURL(input.file),
      alt: "preview",
      style: {
        width: "80px",
        height: "80px",
        objectFit: "cover",
        borderRadius: "6px",
        border: "1px solid #ccc"
      }
    })))), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      type: "button",
      mt: "lg",
      onClick: addInput,
      style: {
        backgroundColor: "rgba(20, 185, 211, 0.8)",
        color: "white"
      }
    }, "\u2795 \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      type: "button",
      mt: "lg",
      variant: "primary",
      onClick: e => {
        e.preventDefault();
        handleUpload();
      },
      style: {
        backgroundColor: "#0d6efd",
        padding: "12px 24px",
        fontSize: "16px",
        color: "white"
      }
    }, "\uD83D\uDE80 \u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"), uploaded.length > 0 && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "xl",
      width: "80%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      style: {
        fontSize: "18px",
        marginBottom: "10px"
      }
    }, "\u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043D\u044B\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F:"), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        display: "grid",
        gridTemplateColumns: "repeat(auto-fill, minmax(200px, 1fr))",
        gap: "15px"
      }
    }, uploaded.map((file, idx) => /*#__PURE__*/React__default.default.createElement("div", {
      key: idx,
      style: {
        border: "1px solid #eee",
        borderRadius: "8px",
        padding: "10px",
        textAlign: "center"
      }
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: file,
      alt: `uploaded-${idx}`,
      style: {
        width: "100%",
        height: "120px",
        objectFit: "cover",
        borderRadius: "6px"
      }
    }), /*#__PURE__*/React__default.default.createElement("a", {
      href: file,
      target: "_blank",
      rel: "noreferrer",
      style: {
        display: "block",
        marginTop: "8px",
        fontSize: "14px",
        color: "#0d6efd",
        textDecoration: "none"
      }
    }, "\u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C"))))));
  };

  const ShowComponent = ({
    record,
    property
  }) => {
    const params = record?.params || {};
    console.log("RECORD PARAMS =>", params);

    // Собираем image.0, image.1, ... в массив
    const imageList = Object.keys(params).filter(key => key.startsWith(`${property.name}.`)).map(key => params[key]);
    if (!imageList || imageList.length === 0) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        mt: "lg",
        textAlign: "center"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\uD83D\uDEAB \u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044E\u0442"));
    }
    const [selected, setSelected] = React$3.useState(null);
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      flexWrap: "wrap",
      justifyContent: "flex-start",
      gap: "25px"
    }, imageList.map((file, index) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: index,
      style: {
        width: "120px",
        height: "120px",
        border: "1px solid #ccc",
        borderRadius: "8px",
        overflow: "hidden",
        boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
        cursor: "pointer"
      },
      onClick: () => setSelected(file)
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: file,
      alt: `изображение-${index}`,
      style: {
        width: "100%",
        height: "100%",
        objectFit: "cover"
      }
    })))), selected && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      onClick: () => setSelected(null),
      style: {
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        background: "rgba(0,0,0,0.8)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 9999,
        cursor: "pointer"
      }
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: selected,
      alt: "\u0443\u0432\u0435\u043B\u0438\u0447\u0435\u043D\u043D\u044B\u0439 \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440",
      style: {
        maxWidth: "90%",
        maxHeight: "90%",
        borderRadius: "10px",
        boxShadow: "0 0 15px rgba(0,0,0,0.6)"
      }
    })));
  };

  const CatalogShow = ({
    record
  }) => {
    const params = record?.params || {};
    console.log("CATALOG RECORD images =>", params.images);
    let imageList = [];
    try {
      const images = params.images;
      if (!images || images === "{}") {
        imageList = [];
      }
      // 1) Agar allaqachon massiv bo‘lsa
      else if (Array.isArray(images)) {
        imageList = images;
      }
      // 2) Agar object bo‘lsa
      else if (typeof images === "object") {
        imageList = Object.values(images);
      }
      // 3) Agar string bo‘lsa
      else if (typeof images === "string") {
        let cleaned = images.trim();

        // PostgreSQL array: {url1,url2} yoki {"url1","url2"}
        if (cleaned.startsWith("{") && cleaned.endsWith("}")) {
          cleaned = cleaned.slice(1, -1); // qavslarni olib tashlaymiz
          imageList = cleaned.split(",").map(s => s.replace(/(^"|"$)/g, "").trim()) // qo'shtirnoqlarni olib tashlash
          .filter(Boolean);
        }
        // JSON array: ["url1", "url2"]
        else if (cleaned.startsWith("[") && cleaned.endsWith("]")) {
          imageList = JSON.parse(cleaned);
        }
        // JSON object: {"0": "url1", ...}
        else if (cleaned.startsWith("{") && cleaned.includes(":")) {
          const parsed = JSON.parse(cleaned);
          imageList = Object.values(parsed);
        }
        // Faqat bitta URL bo‘lsa
        else {
          imageList = [cleaned.replace(/"/g, "")];
        }
      }
    } catch (err) {
      console.error("❌ Ошибка обработки images:", err);
      imageList = [];
    }
    const [selected, setSelected] = React$3.useState(null);
    if (!imageList || imageList.length === 0) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        mt: "lg",
        textAlign: "center"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\uD83D\uDEAB \u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044E\u0442"));
    }
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      flexWrap: "wrap",
      justifyContent: "flex-start",
      gap: "20px"
    }, imageList.map((file, index) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: index,
      style: {
        width: "120px",
        height: "120px",
        border: "1px solid #ccc",
        borderRadius: "8px",
        overflow: "hidden",
        boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
        cursor: "pointer"
      },
      onClick: () => setSelected(file)
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: file,
      alt: `изображение-${index}`,
      style: {
        width: "100%",
        height: "100%",
        objectFit: "cover"
      }
    })))), selected && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      onClick: () => setSelected(null),
      style: {
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        background: "rgba(0,0,0,0.8)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 9999,
        cursor: "pointer"
      }
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: selected,
      alt: "\u0443\u0432\u0435\u043B\u0438\u0447\u0435\u043D\u043D\u044B\u0439 \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440",
      style: {
        maxWidth: "90%",
        maxHeight: "90%",
        borderRadius: "10px",
        boxShadow: "0 0 15px rgba(0,0,0,0.6)"
      }
    })));
  };

  const PropertyTable = ({
    record
  }) => {
    const params = record?.params || {};
    let propertyObj = {};
    try {
      if (params.property) {
        // 1) Если property строка JSON
        if (typeof params.property === "string") {
          propertyObj = JSON.parse(params.property);
        }
        // 2) Если property объект
        else if (typeof params.property === "object") {
          propertyObj = params.property;
        }
      } else {
        // 3) Собираем ключи вида property.*
        propertyObj = Object.keys(params).filter(key => key.startsWith("property.")).reduce((acc, key) => {
          const cleanKey = key.replace("property.", "");
          acc[cleanKey] = params[key];
          return acc;
        }, {});
      }
    } catch (err) {
      console.error("Ошибка парсинга property:", err);
      propertyObj = {};
    }
    const keys = Object.keys(propertyObj);
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "lg",
      p: "md",
      style: {
        background: "#f9f9f9",
        border: "1px solid #ddd",
        borderRadius: "12px",
        boxShadow: "0 4px 12px rgba(0,0,0,0.1)"
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      style: {
        fontSize: "18px",
        color: "#00695c",
        fontWeight: "bold",
        marginBottom: "10px",
        display: "block"
      }
    }, "\uD83D\uDCCB \u0421\u0432\u043E\u0439\u0441\u0442\u0432\u0430"), keys.length === 0 ? /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "md",
      style: {
        color: "#d32f2f",
        fontSize: "16px"
      }
    }, "\uD83D\uDEAB \u0421\u0432\u043E\u0439\u0441\u0442\u0432\u0430 \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044E\u0442") : /*#__PURE__*/React__default.default.createElement("table", {
      style: {
        width: "100%",
        borderCollapse: "collapse",
        marginTop: "15px",
        fontSize: "15px",
        borderRadius: "8px",
        overflow: "hidden"
      }
    }, /*#__PURE__*/React__default.default.createElement("thead", null, /*#__PURE__*/React__default.default.createElement("tr", {
      style: {
        background: "#009688",
        color: "#fff"
      }
    }, /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        textAlign: "left",
        padding: "12px",
        fontWeight: "bold",
        fontSize: "16px"
      }
    }, "\u041A\u043B\u044E\u0447"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        textAlign: "left",
        padding: "12px",
        fontWeight: "bold",
        fontSize: "16px"
      }
    }, "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435"))), /*#__PURE__*/React__default.default.createElement("tbody", null, keys.map((key, idx) => /*#__PURE__*/React__default.default.createElement("tr", {
      key: idx,
      style: {
        background: idx % 2 === 0 ? "#e0f2f1" : "#ffffff",
        borderBottom: "1px solid #ccc"
      }
    }, /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: "12px",
        color: "#004d40",
        fontWeight: "600"
      }
    }, key), /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: "12px",
        color: "#37474f",
        whiteSpace: "pre-wrap" // чтобы показывать \n
      }
    }, propertyObj[key]))))));
  };

  const CustomOrderList = () => {
    const [orders, setOrders] = React$3.useState([]);
    const [loading, setLoading] = React$3.useState(true);
    const [page, setPage] = React$3.useState(1);
    const [pageSize] = React$3.useState(5);
    const [total, setTotal] = React$3.useState(0);
    const navigate = reactRouterDom.useNavigate();
    const fetchOrders = async pageNum => {
      setLoading(true);
      try {
        const res = await axios.get("/api/consult", {
          params: {
            page: pageNum,
            pageSize
          }
        });
        setOrders(res.data.data);
        setTotal(res.data.total);
      } catch (err) {
        console.error("Error fetching orders:", err);
      } finally {
        setLoading(false);
      }
    };
    React$3.useEffect(() => {
      fetchOrders(page);
    }, [page]);
    const totalPages = Math.ceil(total / pageSize);
    const handleShowClick = id => {
      navigate(`/admin/resources/orders/records/${id}/show`);
    };
    if (loading) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        padding: "xl"
      }, "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...");
    }
    const leftCellStyle = {
      borderRight: "2px solid #ccc",
      fontWeight: "bold"
    };
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "grey",
      padding: "xl"
    }, /*#__PURE__*/React__default.default.createElement("h2", {
      style: {
        marginBottom: 20
      }
    }, "\u041A\u043E\u043D\u0441\u0443\u043B\u044C\u0442\u0430\u0446\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableHead, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "ID"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0418\u043C\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u042D\u043B. \u043F\u043E\u0447\u0442\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0422\u0435\u043B\u0435\u0444\u043E\u043D"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u041F\u0440\u0438\u0447\u0438\u043D\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0414\u0430\u0442\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044F"))), /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, orders.length === 0 ? /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      colSpan: 7,
      style: {
        textAlign: "center"
      }
    }, "\u041D\u0435\u0442 \u0434\u0430\u043D\u043D\u044B\u0445")) : orders.map(order => /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
      key: order.id
    }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, order.id), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, order.name), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, order.email), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, order.phone_number), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, order.reason), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, new Date(order.createdAt).toLocaleDateString()), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      size: "sm",
      variant: "contained",
      onClick: () => handleShowClick(order.id)
    }, "\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u0435\u0435")))))), totalPages > 1 && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      justifyContent: "center",
      marginTop: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Pagination, {
      page: page,
      total: totalPages,
      onChange: newPage => setPage(newPage)
    })));
  };

  const SiteList = () => {
    const [sites, setSites] = React$3.useState([]);
    const [loading, setLoading] = React$3.useState(true);
    const [selectedSite, setSelectedSite] = React$3.useState(null);
    const [modalOpen, setModalOpen] = React$3.useState(false);
    const navigate = reactRouterDom.useNavigate();
    const fetchSites = async () => {
      setLoading(true);
      try {
        const res = await axios.get("/api/sites"); // API endpoint
        setSites(res.data.data || []);
      } catch (err) {
        console.error("Error fetching sites:", err);
      } finally {
        setLoading(false);
      }
    };
    React$3.useEffect(() => {
      fetchSites();
    }, []);
    const handleDetailsClick = async id => {
      try {
        const res = await axios.get(`/api/sites/${id}`);
        setSelectedSite(res.data);
        setModalOpen(true);
      } catch (err) {
        console.error("Error fetching site details:", err);
      }
    };
    const handleEditClick = id => {
      navigate(`/admin/resources/sites/records/${id}/edit`);
    };
    if (loading) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        padding: "xl"
      }, "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...");
    }
    const leftCellStyle = {
      fontWeight: "bold",
      borderRight: "2px solid #ccc"
    };
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "grey",
      padding: "xl"
    }, /*#__PURE__*/React__default.default.createElement("h2", {
      style: {
        marginBottom: 20
      }
    }, "\u0421\u0430\u0439\u0442\u044B"), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableHead, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "ID"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0421\u0441\u044B\u043B\u043A\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0414\u0430\u0442\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044F"))), /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, sites.length === 0 ? /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      colSpan: 5,
      style: {
        textAlign: "center"
      }
    }, "\u041D\u0435\u0442 \u0434\u0430\u043D\u043D\u044B\u0445")) : sites.map(site => /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
      key: site.id
    }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, site.id), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, site.name), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, /*#__PURE__*/React__default.default.createElement("a", {
      href: site.link,
      target: "_blank",
      rel: "noopener noreferrer",
      style: {
        color: "#1a73e8",
        textDecoration: "underline"
      }
    }, site.link)), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, new Date(site.createdAt).toLocaleString()), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      size: "sm",
      variant: "contained",
      onClick: () => handleDetailsClick(site.id),
      style: {
        marginRight: "8px"
      }
    }, "\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u0435\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      size: "sm",
      variant: "primary",
      onClick: () => handleEditClick(site.id)
    }, "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C")))))), modalOpen && selectedSite && /*#__PURE__*/React__default.default.createElement(designSystem.Modal, {
      open: modalOpen,
      onClose: () => setModalOpen(false),
      width: 600
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl"
    }, /*#__PURE__*/React__default.default.createElement("h1", {
      style: {
        marginBottom: "20px"
      }
    }, "\uD83D\uDCC4 \u0414\u0435\u0442\u0430\u043B\u0438 \u0441\u0430\u0439\u0442\u0430 #", selectedSite.id), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, selectedSite.name)), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0421\u0441\u044B\u043B\u043A\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement("a", {
      href: selectedSite.link,
      target: "_blank",
      rel: "noopener noreferrer",
      style: {
        color: "#1a73e8",
        textDecoration: "underline"
      }
    }, selectedSite.link))), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0414\u0430\u0442\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, new Date(selectedSite.createdAt).toLocaleString())))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      justifyContent: "flex-end",
      marginTop: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "primary",
      size: "sm",
      onClick: () => setModalOpen(false)
    }, "\u0417\u0430\u043A\u0440\u044B\u0442\u044C")))));
  };

  const SiteEditComponent = ({
    record
  }) => {
    const [formData, setFormData] = React__default.default.useState({
      name: record?.params?.name || "",
      link: record?.params?.link || ""
    });
    const handleChange = (field, value) => {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    };
    const onSubmit = async event => {
      event.preventDefault();
      try {
        await axios.put(`/api/sites/update/${record.params.id}`, formData);
        alert("Сохранено успешно!");
        window.location.href = "/admin/resources/sites";
      } catch (error) {
        console.error("Ошибка сохранения:", error);
      }
    };
    return /*#__PURE__*/React__default.default.createElement("form", {
      onSubmit: onSubmit
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      width: "100%",
      value: formData.name,
      onChange: e => handleChange("name", e.target.value),
      required: true
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      marginTop: "lg"
    }, "\u0421\u0441\u044B\u043B\u043A\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      width: "100%",
      value: formData.link,
      onChange: e => handleChange("link", e.target.value),
      required: true
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      type: "submit",
      variant: "primary",
      marginTop: "xl",
      width: "100%"
    }, "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"));
  };

  const OrderShow = props => {
    const {
      record
    } = props;
    if (!record) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        padding: "xl"
      }, "\u0414\u0430\u043D\u043D\u044B\u0435 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u044B");
    }
    const {
      id,
      name,
      email,
      phone_number,
      reason,
      createdAt,
      updatedAt
    } = record.params;
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "grey",
      padding: "xl",
      style: {
        maxWidth: "700px",
        margin: "auto"
      }
    }, /*#__PURE__*/React__default.default.createElement("h1", {
      style: {
        marginBottom: "20px"
      }
    }, "\uD83D\uDCC4 \u0414\u0435\u0442\u0430\u043B\u0438 \u0437\u0430\u043A\u0430\u0437\u0430 #", id), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        fontWeight: "bold",
        width: "30%",
        borderRight: "2px solid #ccc"
      }
    }, "\u0418\u043C\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, name || "—")), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        fontWeight: "bold",
        borderRight: "2px solid #ccc"
      }
    }, "\u042D\u043B. \u043F\u043E\u0447\u0442\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, email || "—")), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        fontWeight: "bold",
        borderRight: "2px solid #ccc"
      }
    }, "\u0422\u0435\u043B\u0435\u0444\u043E\u043D"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, phone_number || "—")), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        fontWeight: "bold",
        borderRight: "2px solid #ccc"
      }
    }, "\u041F\u0440\u0438\u0447\u0438\u043D\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, reason || "—")), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        fontWeight: "bold",
        borderRight: "2px solid #ccc"
      }
    }, "\u0414\u0430\u0442\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, createdAt ? new Date(createdAt).toLocaleString() : "—")), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        fontWeight: "bold",
        borderRight: "2px solid #ccc"
      }
    }, "\u0414\u0430\u0442\u0430 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, updatedAt ? new Date(updatedAt).toLocaleString() : "—")))));
  };

  const BlogList = () => {
    const [blogs, setBlogs] = React$3.useState([]);
    const [loading, setLoading] = React$3.useState(true);
    const [selectedBlog, setSelectedBlog] = React$3.useState(null);
    const [modalOpen, setModalOpen] = React$3.useState(false);
    const navigate = reactRouterDom.useNavigate();
    const fetchBlogs = async () => {
      setLoading(true);
      try {
        const res = await axios.get("/api/blog"); // API endpoint
        setBlogs(res.data.data || []);
      } catch (err) {
        console.error("Error fetching blogs:", err);
      } finally {
        setLoading(false);
      }
    };
    React$3.useEffect(() => {
      fetchBlogs();
    }, []);
    const handleDetailsClick = async id => {
      try {
        const res = await axios.get(`/api/blog/${id}`);
        setSelectedBlog(res.data);
        setModalOpen(true);
      } catch (err) {
        console.error("Error fetching blog details:", err);
      }
    };
    const handleEditClick = id => {
      navigate(`/admin/resources/blog/records/${id}/edit`);
    };
    if (loading) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        padding: "xl"
      }, "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...");
    }
    const leftCellStyle = {
      fontWeight: "bold",
      borderRight: "2px solid #ccc"
    };
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "grey",
      padding: "xl"
    }, /*#__PURE__*/React__default.default.createElement("h2", {
      style: {
        marginBottom: 20
      }
    }, "\u0411\u043B\u043E\u0433\u0438"), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableHead, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "ID"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u041F\u043E\u0434\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0414\u0430\u0442\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044F"))), /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, blogs.length === 0 ? /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      colSpan: 6,
      style: {
        textAlign: "center"
      }
    }, "\u041D\u0435\u0442 \u0434\u0430\u043D\u043D\u044B\u0445")) : blogs.map(blog => /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
      key: blog.id
    }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, blog.id), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, blog.title), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, blog.subtitles), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, Array.isArray(blog.images) ? blog.images.map((img, idx) => /*#__PURE__*/React__default.default.createElement("img", {
      key: idx,
      src: img,
      alt: `blog-img-${idx}`,
      style: {
        height: 40,
        marginRight: 5,
        borderRadius: 4
      }
    })) : /*#__PURE__*/React__default.default.createElement("span", null, "\u2014")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, new Date(blog.createdAt).toLocaleString()), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      size: "sm",
      variant: "contained",
      onClick: () => handleDetailsClick(blog.id),
      style: {
        marginRight: "8px"
      }
    }, "\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u0435\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      size: "sm",
      variant: "primary",
      onClick: () => handleEditClick(blog.id)
    }, "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C")))))), modalOpen && selectedBlog && /*#__PURE__*/React__default.default.createElement(designSystem.Modal, {
      open: modalOpen,
      onClose: () => setModalOpen(false),
      width: 700
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl",
      style: {
        maxHeight: "70vh",
        overflowY: "auto"
      }
    }, /*#__PURE__*/React__default.default.createElement("h1", {
      style: {
        marginBottom: 20
      }
    }, "\uD83D\uDCC4 \u0414\u0435\u0442\u0430\u043B\u0438 \u0431\u043B\u043E\u0433\u0430 #", selectedBlog.id), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, selectedBlog.title)), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u041F\u043E\u0434\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, selectedBlog.subtitles)), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, Array.isArray(selectedBlog.images) ? selectedBlog.images.map((img, idx) => /*#__PURE__*/React__default.default.createElement("img", {
      key: idx,
      src: img,
      alt: `blog-img-${idx}`,
      style: {
        maxWidth: 120,
        marginRight: 10,
        marginBottom: 10,
        borderRadius: 6
      }
    })) : /*#__PURE__*/React__default.default.createElement("span", null, "\u2014"))), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: selectedBlog.description
      }
    }))), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0410\u0432\u0442\u043E\u0440"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, selectedBlog.author_name || "—")), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0424\u043E\u0442\u043E \u0430\u0432\u0442\u043E\u0440\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, selectedBlog.author_image ? /*#__PURE__*/React__default.default.createElement("img", {
      src: selectedBlog.author_image,
      alt: "author",
      style: {
        width: 80,
        height: 80,
        borderRadius: "50%",
        objectFit: "cover"
      }
    }) : "—")), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u041E \u0430\u0432\u0442\u043E\u0440\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, selectedBlog.author_description || "—")), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0414\u0430\u0442\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, new Date(selectedBlog.createdAt).toLocaleString())))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      justifyContent: "flex-end",
      marginTop: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "primary",
      size: "sm",
      onClick: () => setModalOpen(false)
    }, "\u0417\u0430\u043A\u0440\u044B\u0442\u044C")))));
  };

  // Editor toolbar
  const headerTemplate$3 = /*#__PURE__*/React__default.default.createElement("span", {
    className: "ql-formats"
  }, /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-font"
  }, /*#__PURE__*/React__default.default.createElement("option", {
    selected: true
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "serif"
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "monospace"
  })), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-size"
  }, /*#__PURE__*/React__default.default.createElement("option", {
    value: "small"
  }), /*#__PURE__*/React__default.default.createElement("option", {
    selected: true
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "large"
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "huge"
  })), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-bold",
    "aria-label": "Bold"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-italic",
    "aria-label": "Italic"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-underline",
    "aria-label": "Underline"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-strike",
    "aria-label": "Strike"
  }), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-header"
  }, /*#__PURE__*/React__default.default.createElement("option", {
    value: "1"
  }, "H1"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "2"
  }, "H2"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "3"
  }, "H3"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "4"
  }, "H4"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "5"
  }, "H5"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "6"
  }, "H6"), /*#__PURE__*/React__default.default.createElement("option", {
    selected: true
  }, "Normal")), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-color"
  }), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-background"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-list",
    value: "ordered",
    "aria-label": "Ordered List"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-list",
    value: "bullet",
    "aria-label": "Unordered List"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-indent",
    value: "-1",
    "aria-label": "Decrease Indent"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-indent",
    value: "+1",
    "aria-label": "Increase Indent"
  }), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-align"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-blockquote",
    "aria-label": "Blockquote"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-code-block",
    "aria-label": "Code Block"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-link",
    "aria-label": "Link"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-image",
    "aria-label": "Image"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-video",
    "aria-label": "Video"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-clean",
    "aria-label": "Remove Formatting"
  }));
  const BlogEditImages = props => {
    const recordId = props.record?.id;
    const [loading, setLoading] = React$3.useState(true);
    const [title, setTitle] = React$3.useState("");
    const [subtitles, setSubtitles] = React$3.useState("");
    const [description, setDescription] = React$3.useState("");
    const [authorName, setAuthorName] = React$3.useState("");
    const [authorDescription, setAuthorDescription] = React$3.useState("");
    const [images, setImages] = React$3.useState([]);
    const [updatedImages, setUpdatedImages] = React$3.useState({});
    const [newImages, setNewImages] = React$3.useState([]);
    const [authorImage, setAuthorImage] = React$3.useState(null);
    const [newAuthorImage, setNewAuthorImage] = React$3.useState(null);
    const [error, setError] = React$3.useState(null);
    React$3.useEffect(() => {
      if (!recordId) {
        setError("ID mavjud emas");
        setLoading(false);
        return;
      }
      const fetchData = async () => {
        try {
          const res = await axios.get(`/api/blog/${recordId}`);
          const data = res.data;
          setTitle(data.title || "");
          setSubtitles(data.subtitles || "");
          setDescription(data.description || "");
          setAuthorName(data.author_name || "");
          setAuthorDescription(data.author_description || "");
          setAuthorImage(data.author_image || null);
          setImages(Array.isArray(data.images) ? data.images : []);
        } catch (err) {
          setError("Ошибка при получении данных");
          console.error(err);
        } finally {
          setLoading(false);
        }
      };
      fetchData();
    }, [recordId]);
    const handleUpdateImageChange = (index, file) => {
      setUpdatedImages(prev => ({
        ...prev,
        [index]: file
      }));
    };
    const handleAddNewImages = files => {
      const filesArr = Array.from(files);
      setNewImages(prev => [...prev, ...filesArr]);
    };
    const handleDeleteImage = index => {
      setImages(prev => prev.filter((_, i) => i !== index));
      setUpdatedImages(prev => {
        const copy = {
          ...prev
        };
        delete copy[index];
        return copy;
      });
    };
    const handleAuthorImageChange = e => {
      if (e.target.files && e.target.files[0]) {
        setNewAuthorImage(e.target.files[0]);
      }
    };
    const handleRemoveAuthorImage = () => {
      setAuthorImage(null);
      setNewAuthorImage(null);
    };
    const handleSave = async () => {
      try {
        const formData = new FormData();
        formData.append("title", title);
        formData.append("subtitles", subtitles);
        formData.append("description", description);
        formData.append("author_name", authorName);
        formData.append("author_description", authorDescription);

        // O'chirilmagan eski rasm URL-larini JSON sifatida yuboramiz
        formData.append("images", JSON.stringify(images));

        // updatedImages fayllarini indeks bilan yuboramiz
        Object.entries(updatedImages).forEach(([index, file]) => {
          formData.append(`updatedImages`, file);
        });

        // yangi yuklangan rasmlar
        newImages.forEach(file => {
          formData.append("newImages", file);
        });
        if (newAuthorImage) {
          formData.append("author_image", newAuthorImage);
        } else if (authorImage) {
          // Agar yangi rasm tanlanmagan, lekin mavjud rasm bo'lsa
          formData.append("author_old_image", JSON.stringify(authorImage));
        }
        await axios.put(`/api/blog/update/${recordId}`, formData, {
          headers: {
            "Content-Type": "multipart/form-data"
          }
        });
        alert("Данные сохранены");
        window.location.href = "/admin/resources/blog";
      } catch (err) {
        alert("Ошибка при сохранении:" + err.message);
        console.error(err);
      }
    };
    if (loading) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl"
    }, "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...");
    if (error) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl",
      color: "red"
    }, error);
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      value: title,
      onChange: e => setTitle(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A",
      width: "100%"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041F\u043E\u0434\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"), /*#__PURE__*/React__default.default.createElement("textarea", {
      style: {
        width: "100%",
        padding: "1rem",
        border: "1px solid #d9d9d9",
        borderRadius: "4px",
        fontSize: "14px",
        fontFamily: "inherit",
        minHeight: "100px",
        backgroundColor: "black",
        color: "white"
      },
      value: subtitles,
      onChange: e => setSubtitles(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043F\u043E\u0434\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A",
      width: "100%"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "70%",
      style: {
        backgroundColor: "rgba(104, 144, 156, 0.1)",
        padding: "10px",
        borderRadius: "8px",
        color: "white"
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(Editor_1, {
      value: description,
      onTextChange: e => setDescription(e.htmlValue),
      headerTemplate: headerTemplate$3,
      style: {
        height: "300px"
      }
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "70%",
      style: {
        backgroundColor: "rgba(104, 144, 156, 0.1)",
        padding: "20px",
        borderRadius: "8px",
        color: "white"
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      variant: "primary",
      style: {
        fontSize: "18px",
        marginBottom: "15px"
      }
    }, "\u0410\u0432\u0442\u043E\u0440"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "100%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0418\u043C\u044F \u0430\u0432\u0442\u043E\u0440\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      value: authorName,
      onChange: e => setAuthorName(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043C\u044F \u0430\u0432\u0442\u043E\u0440\u0430",
      width: "100%"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "100%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0430\u0432\u0442\u043E\u0440\u0430"), /*#__PURE__*/React__default.default.createElement("textarea", {
      style: {
        width: "100%",
        padding: "1rem",
        border: "1px solid #d9d9d9",
        borderRadius: "4px",
        fontSize: "14px",
        fontFamily: "inherit",
        minHeight: "100px",
        backgroundColor: "black",
        color: "white"
      },
      value: authorDescription,
      onChange: e => setAuthorDescription(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435 \u0430\u0432\u0442\u043E\u0440\u0430",
      width: "100%"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "100%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0424\u043E\u0442\u043E \u0430\u0432\u0442\u043E\u0440\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      flexWrap: "wrap",
      gap: "20px"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: {
        border: "1px solid #ccc",
        borderRadius: "6px",
        padding: "10px",
        position: "relative",
        width: 140,
        textAlign: "center"
      }
    }, authorImage || newAuthorImage ? /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement("img", {
      src: newAuthorImage ? URL.createObjectURL(newAuthorImage) : authorImage,
      alt: "author",
      style: {
        width: "120px",
        height: "90px",
        objectFit: "cover",
        borderRadius: "6px"
      }
    }), /*#__PURE__*/React__default.default.createElement("button", {
      onClick: handleRemoveAuthorImage,
      style: {
        position: "absolute",
        top: 5,
        right: 5,
        backgroundColor: "red",
        color: "white",
        border: "none",
        borderRadius: "50%",
        width: 20,
        height: 20,
        cursor: "pointer"
      },
      title: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435"
    }, "\xD7")) : /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        height: "90px",
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      }
    }, "\u041D\u0435\u0442 \u0444\u043E\u0442\u043E"), /*#__PURE__*/React__default.default.createElement("input", {
      type: "file",
      accept: "image/*",
      style: {
        position: "absolute",
        bottom: "10px",
        left: "50%",
        transform: "translateX(-50%)",
        opacity: 0,
        width: "120px",
        height: "30px",
        cursor: "pointer"
      },
      onChange: handleAuthorImageChange
    }), /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        position: "absolute",
        bottom: "10px",
        left: "50%",
        transform: "translateX(-50%)",
        backgroundColor: "#007bff",
        color: "white",
        padding: "5px 10px",
        borderRadius: "4px",
        fontSize: "12px",
        pointerEvents: "none",
        userSelect: "none"
      }
    }, authorImage || newAuthorImage ? "Обновить" : "Загрузить"))))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "60%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      flexWrap: "wrap",
      gap: "20px"
    }, images.length === 0 && /*#__PURE__*/React__default.default.createElement("div", null, "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u043D\u0435\u0442"), images.map((img, idx) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: idx,
      style: {
        border: "1px solid #ccc",
        borderRadius: "6px",
        padding: "10px",
        position: "relative",
        width: 140,
        textAlign: "center"
      }
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: updatedImages[idx] ? URL.createObjectURL(updatedImages[idx]) : img,
      alt: `img-${idx}`,
      style: {
        width: "120px",
        height: "90px",
        objectFit: "cover",
        borderRadius: "6px"
      }
    }), /*#__PURE__*/React__default.default.createElement("button", {
      onClick: () => handleDeleteImage(idx),
      style: {
        position: "absolute",
        top: 5,
        right: 5,
        backgroundColor: "red",
        color: "white",
        border: "none",
        borderRadius: "50%",
        width: 20,
        height: 20,
        cursor: "pointer"
      },
      title: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435"
    }, "\xD7"), /*#__PURE__*/React__default.default.createElement("input", {
      type: "file",
      accept: "image/*",
      style: {
        position: "absolute",
        bottom: "10px",
        left: "50%",
        transform: "translateX(-50%)",
        opacity: 0,
        width: "120px",
        height: "30px",
        cursor: "pointer"
      },
      onChange: e => {
        if (e.target.files.length) {
          handleUpdateImageChange(idx, e.target.files[0]);
        }
      }
    }), /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        position: "absolute",
        bottom: "10px",
        left: "50%",
        transform: "translateX(-50%)",
        backgroundColor: "#007bff",
        color: "white",
        padding: "5px 10px",
        borderRadius: "4px",
        fontSize: "12px",
        pointerEvents: "none",
        userSelect: "none"
      }
    }, "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C"))))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u043E\u0432\u044B\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      type: "file",
      accept: "image/*",
      multiple: true,
      onChange: e => handleAddNewImages(e.target.files)
    }), newImages.length > 0 && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "md",
      display: "flex",
      flexWrap: "wrap",
      gap: "10px"
    }, newImages.map((file, idx) => /*#__PURE__*/React__default.default.createElement("img", {
      key: idx,
      src: URL.createObjectURL(file),
      alt: `new-img-${idx}`,
      style: {
        width: 80,
        height: 60,
        objectFit: "cover",
        borderRadius: "4px"
      }
    })))), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "primary",
      mt: "lg",
      onClick: handleSave
    }, "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"));
  };

  const CatalogList = () => {
    const [catalogs, setCatalogs] = React$3.useState([]);
    const [loading, setLoading] = React$3.useState(true);
    const navigate = reactRouterDom.useNavigate();
    const fetchCatalogs = async () => {
      setLoading(true);
      try {
        const res = await axios.get("/api/catalog");
        const data = res.data.data || [];
        const normalizeArray = field => {
          if (Array.isArray(field)) return field;
          if (typeof field === "string" && field.startsWith("{")) {
            return field.replace(/[{}]/g, "").split(",").map(url => url.trim().replace(/^"|"$/g, ""));
          }
          return [];
        };
        const normalized = data.map(item => ({
          ...item,
          images: normalizeArray(item.images),
          other_images: normalizeArray(item.other_images)
        }));
        setCatalogs(normalized);
      } catch (err) {
        console.error("Error fetching catalogs:", err);
      } finally {
        setLoading(false);
      }
    };
    React$3.useEffect(() => {
      fetchCatalogs();
    }, []);
    if (loading) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        padding: "xl"
      }, "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...");
    }
    const leftCellStyle = {
      fontWeight: "bold",
      borderRight: "2px solid #ccc"
    };
    const textCellStyle = {
      fontWeight: "bold",
      borderRight: "2px solid #ccc",
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis",
      maxWidth: 200
    };
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "grey",
      padding: "xl"
    }, /*#__PURE__*/React__default.default.createElement("h2", {
      style: {
        marginBottom: 20
      }
    }, "\u041A\u0430\u0442\u0430\u043B\u043E\u0433"), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableHead, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "ID"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: textCellStyle
    }, "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0414\u043E\u043F. \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0414\u0430\u0442\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044F"))), /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, catalogs.length === 0 ? /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      colSpan: 6,
      style: {
        textAlign: "center"
      }
    }, "\u041D\u0435\u0442 \u0434\u0430\u043D\u043D\u044B\u0445")) : catalogs.map(catalog => /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
      key: catalog.id
    }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, catalog.id), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: textCellStyle,
      title: catalog.name
    }, catalog.name), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, catalog.images.length > 0 ? catalog.images.map((img, idx) => /*#__PURE__*/React__default.default.createElement("img", {
      key: idx,
      src: img,
      alt: `catalog-img-${idx}`,
      style: {
        height: 40,
        marginRight: 5,
        borderRadius: 4,
        objectFit: "cover"
      }
    })) : /*#__PURE__*/React__default.default.createElement("span", null, "\u2014")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, catalog.other_images.length > 0 ? catalog.other_images.map((img, idx) => /*#__PURE__*/React__default.default.createElement("img", {
      key: idx,
      src: img,
      alt: `other-img-${idx}`,
      style: {
        height: 40,
        marginRight: 5,
        borderRadius: 4,
        objectFit: "cover"
      }
    })) : /*#__PURE__*/React__default.default.createElement("span", null, "\u2014")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, new Date(catalog.createdAt).toLocaleString()), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      size: "sm",
      variant: "contained",
      onClick: () => navigate(`/admin/resources/catalog/records/${catalog.id}/show`),
      style: {
        marginRight: "8px"
      }
    }, "\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u0435\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      size: "sm",
      variant: "primary",
      onClick: () => navigate(`/admin/resources/catalog/records/${catalog.id}/edit`)
    }, "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C")))))));
  };

  const CatalogDetails = props => {
    const {
      record
    } = props;
    const id = record?.params?.id;
    const [catalog, setCatalog] = React$3.useState(null);
    const [loading, setLoading] = React$3.useState(true);

    // universal array parser
    const parseArray = field => {
      if (Array.isArray(field)) return field;
      if (typeof field === "string") {
        try {
          const parsed = JSON.parse(field);
          if (Array.isArray(parsed)) return parsed;
        } catch {
          return field.replace(/[{}]/g, "").split(",").map(url => url.trim().replace(/^"|"$/g, ""));
        }
      }
      return [];
    };
    React$3.useEffect(() => {
      if (!id) return;
      const fetchCatalog = async () => {
        try {
          const res = await axios.get(`/api/catalog/${id}`);
          const data = res.data;
          const images = parseArray(data.images);
          const other_images = parseArray(data.other_images);

          // Property parse
          let property = {};
          if (typeof data.property === "string") {
            try {
              property = JSON.parse(data.property || "{}");
            } catch {
              property = {};
            }
          } else {
            property = data.property || {};
          }
          setCatalog({
            ...data,
            images,
            other_images,
            property
          });
        } catch (err) {
          console.error("Error fetching catalog:", err.message);
        } finally {
          setLoading(false);
        }
      };
      fetchCatalog();
    }, [id]);
    if (loading) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl",
      style: {
        color: "#fff"
      }
    }, "\u23F3 \u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...");
    if (!catalog) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl",
      style: {
        color: "#fff"
      }
    }, "\u274C \u0414\u0430\u043D\u043D\u044B\u0435 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u044B");
    const cardStyle = {
      background: "#1e1e1e",
      borderRadius: "12px",
      padding: "20px",
      boxShadow: "0 2px 8px rgba(0,0,0,0.4)",
      marginBottom: "20px",
      color: "#fff"
    };
    const propertyTable = property => {
      if (!property || typeof property !== "object") return /*#__PURE__*/React__default.default.createElement("span", null, "\u2014");
      return /*#__PURE__*/React__default.default.createElement(designSystem.Table, {
        style: {
          border: "1px solid #333",
          color: "#fff"
        }
      }, /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, Object.entries(property).map(([key, value], idx) => /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
        key: idx
      }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
        style: {
          fontWeight: "bold",
          background: "#2a2a2a",
          color: "#fff",
          width: "200px",
          borderRight: "1px solid #444"
        }
      }, key), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
        style: {
          background: "#1e1e1e",
          color: "#ccc"
        }
      }, String(value))))));
    };
    const renderImages = (arr, label, clickable = false) => /*#__PURE__*/React__default.default.createElement("div", {
      style: cardStyle
    }, /*#__PURE__*/React__default.default.createElement("h2", {
      style: {
        marginBottom: 15
      }
    }, label), arr.length > 0 ? /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        display: "flex",
        flexWrap: "wrap",
        gap: "10px"
      }
    }, arr.map((img, idx) => /*#__PURE__*/React__default.default.createElement("img", {
      key: idx,
      src: img,
      alt: `${label}-${idx}`,
      style: {
        width: "150px",
        height: "100px",
        objectFit: "cover",
        borderRadius: "8px",
        boxShadow: "0 1px 3px rgba(0,0,0,0.5)",
        border: "1px solid #333",
        cursor: clickable ? "pointer" : "default"
      },
      onClick: () => {
        if (clickable) {
          window.location.href = `/admin/pages/about?image_url=${encodeURIComponent(img)}&id=${catalog.id}`;
        }
      },
      onError: e => {
        e.target.src = "https://via.placeholder.com/150x100?text=No+Image";
      }
    }))) : /*#__PURE__*/React__default.default.createElement("span", null, "\u2014"));
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl",
      style: {
        background: "#121212",
        minHeight: "100vh",
        color: "#fff"
      }
    }, /*#__PURE__*/React__default.default.createElement("h1", {
      style: {
        marginBottom: 20
      }
    }, "\uD83D\uDCC4 \u0414\u0435\u0442\u0430\u043B\u0438 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0430 #", catalog.id), /*#__PURE__*/React__default.default.createElement("div", {
      style: cardStyle
    }, /*#__PURE__*/React__default.default.createElement("h2", {
      style: {
        marginBottom: 15
      }
    }, " \u041E\u0441\u043D\u043E\u0432\u043D\u0430\u044F \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.Table, {
      style: {
        color: "#fff"
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        fontWeight: "bold",
        color: "#fff"
      }
    }, "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        color: "#ccc"
      }
    }, catalog.name)), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        fontWeight: "bold",
        color: "#fff"
      }
    }, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        color: "#ccc"
      }
    }, /*#__PURE__*/React__default.default.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: catalog.description
      }
    }))), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        fontWeight: "bold",
        color: "#fff"
      }
    }, "\u0414\u0430\u0442\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: {
        color: "#ccc"
      }
    }, new Date(catalog.createdAt).toLocaleString()))))), renderImages(catalog.images, "Изображения", false), renderImages(catalog.other_images, "Дополнительные изображения", true), /*#__PURE__*/React__default.default.createElement("div", {
      style: cardStyle
    }, /*#__PURE__*/React__default.default.createElement("h2", {
      style: {
        marginBottom: 15
      }
    }, "\u0421\u0432\u043E\u0439\u0441\u0442\u0432\u0430"), catalog.property && Object.keys(catalog.property).length > 0 ? propertyTable(catalog.property) : /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        color: "red",
        fontWeight: "bold"
      }
    }, "\u0421\u0432\u043E\u0439\u0441\u0442\u0432\u0430 \u043D\u0435 \u0443\u043A\u0430\u0437\u0430\u043D\u044B")), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      justifyContent: "flex-end"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "primary",
      size: "sm",
      onClick: () => window.history.back(),
      style: {
        background: "#2196F3",
        border: "none",
        padding: "6px 14px",
        borderRadius: "6px",
        color: "white"
      }
    }, "\u2B05 \u041D\u0430\u0437\u0430\u0434")));
  };

  // PrimeReact CSS fayllarini dinamik ravishda qo'shish
  const addPrimeStyles$3 = () => {
    const themeUrl = "https://cdn.jsdelivr.net/npm/primereact@9.6.0/resources/themes/lara-light-blue/theme.css";
    const coreUrl = "https://cdn.jsdelivr.net/npm/primereact@9.6.0/resources/primereact.min.css";
    const iconsUrl = "https://cdn.jsdelivr.net/npm/primeicons@6.0.1/primeicons.css";
    const existingLinks = Array.from(document.head.querySelectorAll("link")).map(link => link.href);
    if (!existingLinks.includes(themeUrl)) {
      const themeLink = document.createElement("link");
      themeLink.rel = "stylesheet";
      themeLink.href = themeUrl;
      document.head.appendChild(themeLink);
    }
    if (!existingLinks.includes(coreUrl)) {
      const coreLink = document.createElement("link");
      coreLink.rel = "stylesheet";
      coreLink.href = coreUrl;
      document.head.appendChild(coreLink);
    }
    if (!existingLinks.includes(iconsUrl)) {
      const iconsLink = document.createElement("link");
      iconsLink.rel = "stylesheet";
      iconsLink.href = iconsUrl;
      document.head.appendChild(iconsLink);
    }
  };

  // ✨ Editor uchun headerTemplate
  const headerTemplate$2 = /*#__PURE__*/React__default.default.createElement("span", {
    className: "ql-formats"
  }, /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-font"
  }, /*#__PURE__*/React__default.default.createElement("option", {
    selected: true
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "serif"
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "monospace"
  })), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-size"
  }, /*#__PURE__*/React__default.default.createElement("option", {
    value: "small"
  }), /*#__PURE__*/React__default.default.createElement("option", {
    selected: true
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "large"
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "huge"
  })), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-bold",
    "aria-label": "Bold"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-italic",
    "aria-label": "Italic"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-underline",
    "aria-label": "Underline"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-strike",
    "aria-label": "Strike"
  }), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-header"
  }, /*#__PURE__*/React__default.default.createElement("option", {
    value: "1"
  }, "H1"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "2"
  }, "H2"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "3"
  }, "H3"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "4"
  }, "H4"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "5"
  }, "H5"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "6"
  }, "H6"), /*#__PURE__*/React__default.default.createElement("option", {
    selected: true
  }, "Normal")), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-color"
  }), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-background"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-list",
    value: "ordered",
    "aria-label": "Ordered List"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-list",
    value: "bullet",
    "aria-label": "Unordered List"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-indent",
    value: "-1",
    "aria-label": "Decrease Indent"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-indent",
    value: "+1",
    "aria-label": "Increase Indent"
  }), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-align"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-blockquote",
    "aria-label": "Blockquote"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-code-block",
    "aria-label": "Code Block"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-link",
    "aria-label": "Link"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-image",
    "aria-label": "Image"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-video",
    "aria-label": "Video"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-clean",
    "aria-label": "Remove Formatting"
  }));
  const CatalogCreate = () => {
    const [name, setName] = React$3.useState("");
    const [title, setTitle] = React$3.useState("");
    const [description, setDescription] = React$3.useState("");
    const [properties, setProperties] = React$3.useState([{
      key: "",
      value: ""
    }]);

    // images uchun
    const [inputs, setInputs] = React$3.useState([{
      id: Date.now(),
      file: null
    }]);

    // other_images uchun
    const [otherInputs, setOtherInputs] = React$3.useState([{
      id: Date.now() + 1,
      file: null
    }]);
    React$3.useEffect(() => {
      addPrimeStyles$3();
    }, []);

    // property o'zgartirish
    const handlePropertyChange = (index, field, value) => {
      const updated = [...properties];
      updated[index][field] = value;
      setProperties(updated);
    };
    const addProperty = () => setProperties([...properties, {
      key: "",
      value: ""
    }]);
    const removeProperty = index => setProperties(properties.filter((_, i) => i !== index));

    // rasm tanlash
    const handleFileChange = (index, file) => {
      const newInputs = [...inputs];
      newInputs[index].file = file;
      setInputs(newInputs);
    };

    // other_images rasm tanlash
    const handleOtherFileChange = (index, file) => {
      const newInputs = [...otherInputs];
      newInputs[index].file = file;
      setOtherInputs(newInputs);
    };

    // yangi rasm input qo'shish
    const addInput = () => {
      if (inputs.length >= 10) return alert("Максимум можно загрузить 10 изображений!");
      setInputs([...inputs, {
        id: Date.now(),
        file: null
      }]);
    };
    const addOtherInput = () => {
      if (otherInputs.length >= 10) return alert("Максимум можно загрузить 10 изображений!");
      setOtherInputs([...otherInputs, {
        id: Date.now(),
        file: null
      }]);
    };
    const handleSave = async () => {
      // Validatsiya
      const imagesCount = inputs.filter(i => i.file).length;
      otherInputs.filter(i => i.file).length;
      const validPropertiesCount = properties.filter(p => p.key && p.key.trim().length > 0).length;
      if (imagesCount === 0 && validPropertiesCount === 0) {
        alert("Ошибка: Пожалуйста, загрузите хотя бы одно изображение и добавьте хотя бы одно свойство.");
        return;
      }
      if (imagesCount === 0) {
        alert("Ошибка: Пожалуйста, загрузите хотя бы одно изображение.");
        return;
      }
      if (validPropertiesCount === 0) {
        alert("Ошибка: Пожалуйста, добавьте хотя бы одно свойство (введите ключ).");
        return;
      }
      try {
        const propertyObj = {};
        properties.forEach(p => {
          if (p.key && p.key.trim()) propertyObj[p.key.trim()] = p.value;
        });
        const formData = new FormData();
        formData.append("name", name);
        formData.append("title", title);
        formData.append("description", description);
        formData.append("property", JSON.stringify(propertyObj));
        inputs.forEach(input => {
          if (input.file) formData.append("files", input.file);
        });
        otherInputs.forEach(input => {
          if (input.file) formData.append("other_files", input.file);
        });
        await axios.post(`${window.location.origin}/api/catalog/create`, formData, {
          headers: {
            "Content-Type": "multipart/form-data"
          }
        });
        alert("Каталог успешно создан!");
        window.location.href = "/admin/resources/catalog";
      } catch (err) {
        console.error(err);
        alert("Ошибка: " + (err.message || "Во время сохранения произошла ошибка"));
      }
    };
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      flex: true,
      flexDirection: "column",
      alignItems: "center",
      mt: "xl",
      width: "100%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "70%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      value: name,
      width: "100%",
      onChange: e => setName(e.target.value)
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "70%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"), /*#__PURE__*/React__default.default.createElement("textarea", {
      value: title,
      style: {
        width: "100%",
        padding: "1rem",
        border: "1px solid #d9d9d9",
        borderRadius: "4px",
        fontSize: "14px",
        fontFamily: "inherit",
        minHeight: "100px",
        backgroundColor: "black",
        color: "white"
      },
      onChange: e => setTitle(e.target.value)
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "70%",
      style: {
        backgroundColor: "rgba(104, 144, 156, 0.1)",
        padding: "10px",
        borderRadius: "8px",
        color: "white"
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(Editor_1, {
      value: description,
      onTextChange: e => setDescription(e.htmlValue),
      headerTemplate: headerTemplate$2,
      style: {
        height: "300px"
      }
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "70%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0421\u0432\u043E\u0439\u0441\u0442\u0432\u0430"), properties.map((p, index) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: index,
      display: "flex",
      flexDirection: "row",
      alignItems: "center",
      gap: "10px",
      mb: "sm"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      placeholder: "\u041A\u043B\u044E\u0447",
      value: p.key,
      onChange: e => handlePropertyChange(index, "key", e.target.value),
      style: {
        flex: 1
      }
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      placeholder: "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435",
      value: p.value,
      onChange: e => handlePropertyChange(index, "value", e.target.value),
      style: {
        flex: 1
      }
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      type: "button",
      size: "icon",
      variant: "danger",
      onClick: () => removeProperty(index)
    }, "\u274C"))), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      type: "button",
      variant: "primary",
      onClick: addProperty,
      style: {
        marginTop: "5px"
      }
    }, "\u2795 \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u043E")), /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      mb: "lg",
      mt: "xl",
      style: {
        fontSize: "20px",
        fontWeight: "bold"
      }
    }, "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F (\u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C 10)"), inputs.map((input, index) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: input.id,
      mb: "md",
      style: {
        backgroundColor: "rgba(165, 231, 214, 0.8)",
        padding: "10px",
        borderRadius: "8px",
        display: "flex",
        alignItems: "center",
        gap: "15px",
        width: "70%"
      }
    }, /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        display: "inline-block",
        backgroundColor: "#007bff",
        color: "white",
        padding: "8px 16px",
        borderRadius: "6px",
        cursor: "pointer"
      }
    }, "\uD83D\uDCC2 \u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0444\u0430\u0439\u043B", /*#__PURE__*/React__default.default.createElement("input", {
      type: "file",
      accept: "image/*",
      onChange: e => handleFileChange(index, e.target.files[0]),
      style: {
        display: "none"
      }
    })), input.file ? /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        fontSize: "14px",
        fontWeight: "500"
      }
    }, input.file.name), /*#__PURE__*/React__default.default.createElement("img", {
      src: URL.createObjectURL(input.file),
      alt: "preview",
      style: styles.preview
    })) : /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        color: "#555"
      }
    }, "\u0424\u0430\u0439\u043B \u043D\u0435 \u0432\u044B\u0431\u0440\u0430\u043D"))), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      type: "button",
      mt: "lg",
      onClick: addInput,
      style: styles.addBtn
    }, "\u2795 \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      mb: "lg",
      mt: "xl",
      style: {
        fontSize: "20px",
        fontWeight: "bold",
        color: "white"
      }
    }, "\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F ( MARKER )"), otherInputs.map((input, index) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: input.id,
      mb: "md",
      style: styles.fileBox
    }, /*#__PURE__*/React__default.default.createElement("label", {
      style: styles.fileLabel
    }, "\uD83D\uDCC2 \u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0444\u0430\u0439\u043B", /*#__PURE__*/React__default.default.createElement("input", {
      type: "file",
      accept: "image/*",
      onChange: e => handleOtherFileChange(index, e.target.files[0]),
      style: {
        display: "none"
      }
    })), input.file ? /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        fontSize: "14px",
        fontWeight: "500"
      }
    }, input.file.name), /*#__PURE__*/React__default.default.createElement("img", {
      src: URL.createObjectURL(input.file),
      alt: "preview",
      style: styles.preview
    })) : /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        color: "#555"
      }
    }, "\u0424\u0430\u0439\u043B \u043D\u0435 \u0432\u044B\u0431\u0440\u0430\u043D"))), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      type: "button",
      mt: "lg",
      onClick: addOtherInput,
      style: styles.addBtn
    }, "\u2795 \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      type: "button",
      mt: "lg",
      variant: "primary",
      onClick: e => {
        e.preventDefault();
        handleSave();
      },
      style: {
        marginTop: 12
      }
    }, "\uD83D\uDE80 \u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"));
  };
  const styles = {
    fileBox: {
      backgroundColor: "rgba(165, 231, 214, 0.8)",
      padding: "10px",
      borderRadius: "8px",
      display: "flex",
      alignItems: "center",
      gap: "15px",
      width: "70%"
    },
    fileLabel: {
      display: "inline-block",
      backgroundColor: "#007bff",
      color: "white",
      padding: "8px 16px",
      borderRadius: "6px",
      cursor: "pointer"
    },
    preview: {
      width: "80px",
      height: "80px",
      objectFit: "cover",
      borderRadius: "6px",
      border: "1px solid #ccc"
    },
    addBtn: {
      backgroundColor: "rgba(20, 185, 211, 0.8)",
      color: "white"
    }
  };

  // PrimeReact CSS dinamik ulash
  const addPrimeStyles$2 = () => {
    const themeUrl = "https://cdn.jsdelivr.net/npm/primereact@9.6.0/resources/themes/lara-light-blue/theme.css";
    const coreUrl = "https://cdn.jsdelivr.net/npm/primereact@9.6.0/resources/primereact.min.css";
    const iconsUrl = "https://cdn.jsdelivr.net/npm/primeicons@6.0.1/primeicons.css";
    const existing = Array.from(document.head.querySelectorAll("link")).map(l => l.href);
    if (!existing.includes(themeUrl)) {
      const link = document.createElement("link");
      link.rel = "stylesheet";
      link.href = themeUrl;
      document.head.appendChild(link);
    }
    if (!existing.includes(coreUrl)) {
      const link = document.createElement("link");
      link.rel = "stylesheet";
      link.href = coreUrl;
      document.head.appendChild(link);
    }
    if (!existing.includes(iconsUrl)) {
      const link = document.createElement("link");
      link.rel = "stylesheet";
      link.href = iconsUrl;
      document.head.appendChild(link);
    }
  };

  // Editor toolbar
  const headerTemplate$1 = /*#__PURE__*/React__default.default.createElement("span", {
    className: "ql-formats"
  }, /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-font"
  }, /*#__PURE__*/React__default.default.createElement("option", {
    selected: true
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "serif"
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "monospace"
  })), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-size"
  }, /*#__PURE__*/React__default.default.createElement("option", {
    value: "small"
  }), /*#__PURE__*/React__default.default.createElement("option", {
    selected: true
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "large"
  }), /*#__PURE__*/React__default.default.createElement("option", {
    value: "huge"
  })), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-bold",
    "aria-label": "Bold"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-italic",
    "aria-label": "Italic"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-underline",
    "aria-label": "Underline"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-strike",
    "aria-label": "Strike"
  }), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-header"
  }, /*#__PURE__*/React__default.default.createElement("option", {
    value: "1"
  }, "H1"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "2"
  }, "H2"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "3"
  }, "H3"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "4"
  }, "H4"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "5"
  }, "H5"), /*#__PURE__*/React__default.default.createElement("option", {
    value: "6"
  }, "H6"), /*#__PURE__*/React__default.default.createElement("option", {
    selected: true
  }, "Normal")), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-color"
  }), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-background"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-list",
    value: "ordered",
    "aria-label": "Ordered List"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-list",
    value: "bullet",
    "aria-label": "Unordered List"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-indent",
    value: "-1",
    "aria-label": "Decrease Indent"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-indent",
    value: "+1",
    "aria-label": "Increase Indent"
  }), /*#__PURE__*/React__default.default.createElement("select", {
    className: "ql-align"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-blockquote",
    "aria-label": "Blockquote"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-code-block",
    "aria-label": "Code Block"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-link",
    "aria-label": "Link"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-image",
    "aria-label": "Image"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-video",
    "aria-label": "Video"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-clean",
    "aria-label": "Remove Formatting"
  }));
  const CatalogEdit = props => {
    const recordId = props.record?.id;
    const [loading, setLoading] = React$3.useState(true);
    const [name, setName] = React$3.useState("");
    const [title, setTitle] = React$3.useState("");
    const [description, setDescription] = React$3.useState("");
    const [images, setImages] = React$3.useState([]);
    const [updatedImages, setUpdatedImages] = React$3.useState({});
    const [newImages, setNewImages] = React$3.useState([]);
    const [otherImages, setOtherImages] = React$3.useState([]);
    const [updatedOtherImages, setUpdatedOtherImages] = React$3.useState({});
    const [newOtherImages, setNewOtherImages] = React$3.useState([]);
    const [properties, setProperties] = React$3.useState([]);
    const [error, setError] = React$3.useState(null);
    React$3.useEffect(() => {
      addPrimeStyles$2();
    }, []);

    // Ma'lumotlarni olish
    React$3.useEffect(() => {
      if (!recordId) {
        setError("ID mavjud emas");
        setLoading(false);
        return;
      }
      const fetchData = async () => {
        try {
          const res = await axios.get(`/api/catalog/${recordId}`);
          const data = res.data;
          setName(data.name || "");
          setTitle(data.title || "");
          setDescription(data.description || "");

          // Images parse
          let parsedImages = [];
          if (typeof data.images === "string") {
            if (data.images.startsWith("{") && data.images.endsWith("}")) {
              parsedImages = data.images.slice(1, -1).split(",").map(url => url.trim().replace(/^"|"$/g, ""));
            } else {
              try {
                parsedImages = JSON.parse(data.images);
              } catch {
                parsedImages = [];
              }
            }
          } else if (Array.isArray(data.images)) {
            parsedImages = data.images;
          }
          setImages(parsedImages);

          // Other Images parse
          let parsedOtherImages = [];
          if (typeof data.other_images === "string") {
            if (data.other_images.startsWith("{") && data.other_images.endsWith("}")) {
              parsedOtherImages = data.other_images.slice(1, -1).split(",").map(url => url.trim().replace(/^"|"$/g, ""));
            } else {
              try {
                parsedOtherImages = JSON.parse(data.other_images);
              } catch {
                parsedOtherImages = [];
              }
            }
          } else if (Array.isArray(data.other_images)) {
            parsedOtherImages = data.other_images;
          }
          setOtherImages(parsedOtherImages);

          // Properties parse
          let parsedProps = [];
          if (typeof data.property === "string") {
            try {
              const obj = JSON.parse(data.property);
              parsedProps = Object.entries(obj).map(([key, value]) => ({
                key,
                value
              }));
            } catch {
              parsedProps = [];
            }
          } else if (typeof data.property === "object" && data.property !== null) {
            parsedProps = Object.entries(data.property).map(([key, value]) => ({
              key,
              value
            }));
          }
          setProperties(parsedProps);
        } catch (err) {
          setError("Ошибка при получении данных");
          console.error(err.message);
        } finally {
          setLoading(false);
        }
      };
      fetchData();
    }, [recordId]);

    // Property qo'shish
    const handleAddProperty = () => {
      setProperties([...properties, {
        key: "",
        value: ""
      }]);
    };

    // Property o'zgartirish
    const handlePropertyChange = (index, field, value) => {
      const updated = [...properties];
      updated[index][field] = value;
      setProperties(updated);
    };

    // Property o'chirish
    const handleRemoveProperty = index => {
      const updated = [...properties];
      updated.splice(index, 1);
      setProperties(updated);
    };

    // Rasm yangilash
    const handleUpdateImageChange = (index, file) => {
      setUpdatedImages(prev => ({
        ...prev,
        [index]: file
      }));
    };

    // Yangi rasm qo'shish
    const handleAddNewImages = files => {
      const filesArr = Array.from(files);
      setNewImages(prev => [...prev, ...filesArr]);
    };

    // Rasm o'chirish
    const handleDeleteImage = index => {
      setImages(prev => prev.filter((_, i) => i !== index));
      setUpdatedImages(prev => {
        const copy = {
          ...prev
        };
        delete copy[index];
        return copy;
      });
    };

    // Other image yangilash
    const handleUpdateOtherImageChange = (index, file) => {
      setUpdatedOtherImages(prev => ({
        ...prev,
        [index]: file
      }));
    };

    // Yangi other image qo'shish
    const handleAddNewOtherImages = files => {
      const filesArr = Array.from(files);
      setNewOtherImages(prev => [...prev, ...filesArr]);
    };

    // Other image o'chirish
    const handleDeleteOtherImage = index => {
      setOtherImages(prev => prev.filter((_, i) => i !== index));
      setUpdatedOtherImages(prev => {
        const copy = {
          ...prev
        };
        delete copy[index];
        return copy;
      });
    };

    // Saqlash
    const handleSave = async () => {
      if (images.length === 0 && newImages.length === 0) {
        alert("Пожалуйста, загрузите хотя бы одно изображение");
        return;
      }
      if (properties.length === 0) {
        alert("Добавьте хотя бы одно свойство");
        return;
      }
      try {
        const formData = new FormData();
        formData.append("name", name);
        formData.append("title", title);
        formData.append("description", description);
        formData.append("property", JSON.stringify(Object.fromEntries(properties.map(p => [p.key, p.value]))));
        formData.append("images", JSON.stringify(images));
        formData.append("other_images", JSON.stringify(otherImages));

        // updatedImages — backendga updatedImages[index] formatida yuboriladi
        Object.entries(updatedImages).forEach(([index, file]) => {
          formData.append("updatedImages", file);
        });

        // newImages — backendga newImages sifatida yuboriladi
        newImages.forEach(file => {
          formData.append("newImages", file);
        });

        // updatedOtherImages — backendga updatedOtherImages[index] formatida yuboriladi
        Object.entries(updatedOtherImages).forEach(([index, file]) => {
          formData.append("updatedOtherImages", file);
        });

        // newOtherImages — backendga newOtherImages sifatida yuboriladi
        newOtherImages.forEach(file => {
          formData.append("newOtherImages", file);
        });
        await axios.put(`/api/catalog/update/${recordId}`, formData, {
          headers: {
            "Content-Type": "multipart/form-data"
          }
        });
        alert("Данные сохранены");
        window.location.href = "/admin/resources/catalog";
      } catch (err) {
        alert("Saqlashda xatolik: " + err.message);
        console.error(err);
      }
    };
    if (loading) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl"
    }, "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...");
    if (error) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl",
      color: "red"
    }, error);
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0418\u043C\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      value: name,
      onChange: e => setName(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043C\u044F",
      width: "100%"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"), /*#__PURE__*/React__default.default.createElement("textarea", {
      value: title,
      style: {
        width: "100%",
        padding: "1rem",
        border: "1px solid #d9d9d9",
        borderRadius: "4px",
        fontSize: "14px",
        fontFamily: "inherit",
        minHeight: "100px",
        backgroundColor: "black",
        color: "white"
      },
      onChange: e => setTitle(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A",
      width: "100%"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "70%",
      style: {
        backgroundColor: "rgba(104, 144, 156, 0.1)",
        padding: "10px",
        borderRadius: "8px",
        color: "white"
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(Editor_1, {
      value: description,
      onTextChange: e => setDescription(e.htmlValue),
      headerTemplate: headerTemplate$1,
      style: {
        height: "300px"
      }
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      mt: "xl",
      width: "60%"
    }, /*#__PURE__*/React__default.default.createElement("h1", null, "\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      mt: "xl",
      flexWrap: "wrap",
      gap: "20px"
    }, images.length === 0 && /*#__PURE__*/React__default.default.createElement("div", null, "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u043D\u0435\u0442"), images.map((img, idx) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: idx,
      style: {
        border: "1px solid #ccc",
        borderRadius: "6px",
        padding: "10px",
        position: "relative",
        width: 140,
        textAlign: "center"
      }
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: updatedImages[idx] ? URL.createObjectURL(updatedImages[idx]) : img,
      alt: `img-${idx}`,
      style: {
        width: "120px",
        height: "90px",
        objectFit: "cover",
        borderRadius: "6px"
      }
    }), /*#__PURE__*/React__default.default.createElement("button", {
      onClick: () => handleDeleteImage(idx),
      style: {
        position: "absolute",
        top: 5,
        right: 5,
        backgroundColor: "red",
        color: "white",
        border: "none",
        borderRadius: "50%",
        width: 20,
        height: 20,
        cursor: "pointer"
      },
      title: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435"
    }, "\xD7"), /*#__PURE__*/React__default.default.createElement("input", {
      type: "file",
      accept: "image/*",
      style: {
        position: "absolute",
        bottom: "10px",
        left: "50%",
        transform: "translateX(-50%)",
        opacity: 0,
        width: "120px",
        height: "30px",
        cursor: "pointer"
      },
      onChange: e => {
        if (e.target.files.length) {
          handleUpdateImageChange(idx, e.target.files[0]);
        }
      }
    }), /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        position: "absolute",
        bottom: "10px",
        left: "50%",
        transform: "translateX(-50%)",
        backgroundColor: "#007bff",
        color: "white",
        padding: "5px 10px",
        borderRadius: "4px",
        fontSize: "12px",
        pointerEvents: "none",
        userSelect: "none"
      }
    }, "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C"))))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      mt: "xl",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u043E\u0432\u044B\u0435 \u043E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      type: "file",
      mt: "xl",
      accept: "image/*",
      multiple: true,
      onChange: e => handleAddNewImages(e.target.files)
    }), newImages.length > 0 && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "md",
      display: "flex",
      flexWrap: "wrap",
      gap: "10px"
    }, newImages.map((file, idx) => /*#__PURE__*/React__default.default.createElement("img", {
      key: idx,
      src: URL.createObjectURL(file),
      alt: `new-img-${idx}`,
      style: {
        width: 80,
        height: 60,
        objectFit: "cover",
        borderRadius: "4px"
      }
    })))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      mt: "xl",
      width: "60%"
    }, /*#__PURE__*/React__default.default.createElement("h1", null, "\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F (MARKER)"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      flexWrap: "wrap",
      gap: "20px"
    }, otherImages.length === 0 && /*#__PURE__*/React__default.default.createElement("div", null, "\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0445 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0439 \u043D\u0435\u0442"), otherImages.map((img, idx) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: idx,
      style: {
        border: "1px solid #ccc",
        borderRadius: "6px",
        padding: "10px",
        position: "relative",
        width: 140,
        textAlign: "center"
      }
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: updatedOtherImages[idx] ? URL.createObjectURL(updatedOtherImages[idx]) : img,
      alt: `other-img-${idx}`,
      style: {
        width: "120px",
        height: "90px",
        objectFit: "cover",
        borderRadius: "6px"
      }
    }), /*#__PURE__*/React__default.default.createElement("button", {
      onClick: () => handleDeleteOtherImage(idx),
      style: {
        position: "absolute",
        top: 5,
        right: 5,
        backgroundColor: "red",
        color: "white",
        border: "none",
        borderRadius: "50%",
        width: 20,
        height: 20,
        cursor: "pointer"
      },
      title: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435"
    }, "\xD7"), /*#__PURE__*/React__default.default.createElement("input", {
      type: "file",
      accept: "image/*",
      style: {
        position: "absolute",
        bottom: "10px",
        left: "50%",
        transform: "translateX(-50%)",
        opacity: 0,
        width: "120px",
        height: "30px",
        cursor: "pointer"
      },
      onChange: e => {
        if (e.target.files.length) {
          handleUpdateOtherImageChange(idx, e.target.files[0]);
        }
      }
    }), /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        position: "absolute",
        bottom: "10px",
        left: "50%",
        transform: "translateX(-50%)",
        backgroundColor: "#007bff",
        color: "white",
        padding: "5px 10px",
        borderRadius: "4px",
        fontSize: "12px",
        pointerEvents: "none",
        userSelect: "none"
      }
    }, "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C"))))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      mt: "xl",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement("h1", null, "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u043E\u0432\u044B\u0435 \u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F (MARKER)"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      mt: "xl",
      type: "file",
      accept: "image/*",
      multiple: true,
      onChange: e => handleAddNewOtherImages(e.target.files)
    }), newOtherImages.length > 0 && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "md",
      display: "flex",
      flexWrap: "wrap",
      gap: "10px"
    }, newOtherImages.map((file, idx) => /*#__PURE__*/React__default.default.createElement("img", {
      key: idx,
      src: URL.createObjectURL(file),
      alt: `new-other-img-${idx}`,
      style: {
        width: 80,
        height: 60,
        objectFit: "cover",
        borderRadius: "4px"
      }
    })))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      mt: "xl",
      width: "60%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0421\u0432\u043E\u0439\u0441\u0442\u0432\u0430"), properties.map((prop, idx) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: idx,
      display: "flex",
      alignItems: "center",
      mb: "sm",
      gap: "10px"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      placeholder: "\u041A\u043B\u044E\u0447",
      value: prop.key,
      onChange: e => handlePropertyChange(idx, "key", e.target.value)
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      placeholder: "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435",
      value: prop.value,
      onChange: e => handlePropertyChange(idx, "value", e.target.value)
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "danger",
      onClick: () => handleRemoveProperty(idx),
      size: "sm"
    }, "\xD7"))), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "primary",
      onClick: handleAddProperty
    }, "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0441\u0432\u043E\u0439\u0441\u0442\u0432\u043E")), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "primary",
      mt: "lg",
      onClick: handleSave
    }, "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"));
  };

  function About() {
    const location = reactRouterDom.useLocation();
    const queryParams = new URLSearchParams(location.search);
    const IMAGE_URL = queryParams.get("image_url");
    const catalog_id = queryParams.get("id");
    const imgRef = React$3.useRef(null);
    const [points, setPoints] = React$3.useState([]);
    const [isAddMode, setIsAddMode] = React$3.useState(false);
    const [formData, setFormData] = React$3.useState({
      catalog_id,
      title: "",
      description: "",
      top: 0,
      left_pos: 0,
      image: null
    });
    const [showModal, setShowModal] = React$3.useState(false);
    const [activePoint, setActivePoint] = React$3.useState(null);
    const fetchPoints = async () => {
      try {
        const imageName = IMAGE_URL.split("/").pop();
        const url_end = "https://api.arcrobot.ru/public/images";
        const fullUrl = `${url_end}/${imageName}`;
        const {
          data
        } = await axios.get(`https://api.arcrobot.ru/api/image-position/${encodeURIComponent(IMAGE_URL)}`);
        setPoints(data);
      } catch (err) {
        console.error(err.message);
      }
    };
    React$3.useEffect(() => {
      fetchPoints();
    }, []);
    const handleImgClick = e => {
      if (!isAddMode) return;
      const rect = imgRef.current.getBoundingClientRect();
      const clickX = e.clientX - rect.left;
      const clickY = e.clientY - rect.top;
      const percentLeft = clickX / rect.width * 100;
      const percentTop = clickY / rect.height * 100;
      setFormData({
        ...formData,
        top: percentTop.toFixed(2),
        left_pos: percentLeft.toFixed(2)
      });
    };
    const handleSubmit = async e => {
      e.preventDefault();
      const data = new FormData();
      data.append("catalog_id", formData.catalog_id);
      data.append("image_url", IMAGE_URL);
      data.append("title", formData.title);
      data.append("description", formData.description);
      data.append("top", formData.top);
      data.append("left_pos", formData.left_pos);
      data.append("image", formData.image);
      try {
        await axios.post("https://api.arcrobot.ru/api/image-position/create", data, {
          headers: {
            "Content-Type": "multipart/form-data"
          },
          withCredentials: true
        });
        setFormData({
          ...formData,
          title: "",
          description: "",
          image: null
        });
        fetchPoints();
        setIsAddMode(false);
      } catch (err) {
        console.error(err.message);
        alert("Ошибка при сохранении!");
      }
    };
    return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement("style", null, `
        .container {
          display: flex;
          flex-direction: column;
          align-items: center;
          font-family: "Comic Sans MS", cursive, sans-serif;
        }
        .mode-button {
          padding: 10px 24px;
          background: linear-gradient(135deg, #ff6b6b, #ffd93d);
          color: white;
          border: none;
          border-radius: 30px;
          font-size: 16px;
          cursor: pointer;
          transition: 0.3s;
          margin-bottom: 25px;
        }
        .mode-button:hover {
          transform: translateY(-3px);
          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        .mode-button.add {
          background: linear-gradient(45deg, #1fa2ff, #12d8fa, #a6ffcb);
        }
        .image-wrapper {
          position: relative;
          display: inline-block;
        }
        .main-image {
          width: 700px;
          border-radius: 18px;
          box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }
        .main-image.crosshair {
          cursor: crosshair;
        }
        .point {
          position: absolute;
          transform: translate(-50%, -50%);
          background: #ff6b6b;
          color: white;
          border-radius: 50%;
          width: 25px;
          height: 25px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          box-shadow: 0 3px 8px rgba(0, 0, 0, 0.3);
          transition: transform 0.15s;
        }
        .point:hover {
          transform: translate(-50%, -50%) scale(1.2);
        }
        .preview {
          position: absolute;
          transform: translate(-50%, -50%);
          width: 16px;
          height: 16px;
          background: #1fa2ff;
          border-radius: 50%;
          box-shadow: 0 0 0 8px rgba(31, 162, 255, 0.4);
          animation: pulse 1s infinite;
        }
        @keyframes pulse {
          0% { transform: translate(-50%, -50%) scale(1); }
          50% { transform: translate(-50%, -50%) scale(1.3); }
          100% { transform: translate(-50%, -50%) scale(1); }
        }
        .form {
          margin-top: 25px;
          display: flex;
          flex-direction: column;
          gap: 10px;
          width: 340px;
        }
        .form input,
        .form textarea {
          padding: 10px;
          border-radius: 12px;
          border: 2px solid #ffd93d;
          font-size: 15px;
        }
        .save {
          padding: 12px;
          background: linear-gradient(45deg, #12d8fa, #a6ffcb);
          border: none;
          border-radius: 20px;
          color: #333;
          font-weight: bold;
          cursor: pointer;
          transition: 0.3s;
        }
        .save:hover {
          background: linear-gradient(45deg, #a6ffcb, #12d8fa);
        }
        .backdrop {
          position: fixed;
          inset: 0;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          align-items: center;
          justify-content: center;
        }
        .modal {
          background: white;
          padding: 25px 30px;
          border-radius: 16px;
          max-width: 400px;
          width: 88%;
        }
        .modal h3 { margin-top: 0; }
      `), /*#__PURE__*/React__default.default.createElement("div", {
      className: "container pt-32"
    }, /*#__PURE__*/React__default.default.createElement("button", {
      onClick: () => setIsAddMode(!isAddMode),
      className: `mode-button ${isAddMode ? "add" : ""}`
    }, isAddMode ? "Режим просмотра" : "Добавить точку"), /*#__PURE__*/React__default.default.createElement("div", {
      className: "image-wrapper"
    }, /*#__PURE__*/React__default.default.createElement("img", {
      ref: imgRef,
      src: IMAGE_URL,
      alt: "Hotspot",
      onClick: handleImgClick,
      className: `main-image ${isAddMode ? "crosshair" : ""}`
    }), points.map((p, i) => /*#__PURE__*/React__default.default.createElement("div", {
      key: p.id,
      onClick: () => {
        if (!isAddMode) {
          setActivePoint(p);
          setShowModal(true);
        }
      },
      className: "point",
      style: {
        top: `${p.top}%`,
        left: `${p.left_pos}%`,
        cursor: isAddMode ? "not-allowed" : "pointer"
      }
    }, i + 1)), isAddMode && /*#__PURE__*/React__default.default.createElement("div", {
      className: "preview",
      style: {
        top: `${formData.top}%`,
        left: `${formData.left_pos}%`
      }
    })), isAddMode && /*#__PURE__*/React__default.default.createElement("form", {
      onSubmit: handleSubmit,
      className: "form"
    }, /*#__PURE__*/React__default.default.createElement("input", {
      value: formData.title,
      placeholder: "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435",
      onChange: e => setFormData({
        ...formData,
        title: e.target.value
      })
    }), /*#__PURE__*/React__default.default.createElement("textarea", {
      placeholder: "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435",
      value: formData.description,
      onChange: e => setFormData({
        ...formData,
        description: e.target.value
      })
    }), /*#__PURE__*/React__default.default.createElement("input", {
      type: "file",
      onChange: e => setFormData({
        ...formData,
        image: e.target.files[0]
      })
    }), /*#__PURE__*/React__default.default.createElement("button", {
      type: "submit",
      className: "save"
    }, "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C")), showModal && /*#__PURE__*/React__default.default.createElement("div", {
      className: "backdrop",
      onClick: () => setShowModal(false)
    }, /*#__PURE__*/React__default.default.createElement("div", {
      className: "modal",
      onClick: e => e.stopPropagation()
    }, /*#__PURE__*/React__default.default.createElement("h3", {
      style: {
        color: "black"
      }
    }, activePoint?.title), /*#__PURE__*/React__default.default.createElement("p", {
      style: {
        color: "black"
      }
    }, activePoint?.description), activePoint?.image && /*#__PURE__*/React__default.default.createElement("img", {
      src: activePoint.image,
      alt: "",
      style: {
        width: "100%",
        marginTop: "10px"
      }
    })))));
  }

  // PrimeReact CSS fayllarini dinamik ulash
  const addPrimeStyles$1 = () => {
    const themeUrl = "https://cdn.jsdelivr.net/npm/primereact@9.6.0/resources/themes/lara-light-blue/theme.css";
    const coreUrl = "https://cdn.jsdelivr.net/npm/primereact@9.6.0/resources/primereact.min.css";
    const iconsUrl = "https://cdn.jsdelivr.net/npm/primeicons@6.0.1/primeicons.css";
    [themeUrl, coreUrl, iconsUrl].forEach(url => {
      if (!document.querySelector(`link[href="${url}"]`)) {
        const link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = url;
        document.head.appendChild(link);
      }
    });
  };
  const WorkerCreate = () => {
    const [name, setName] = React$3.useState("");
    const [workerType, setWorkerType] = React$3.useState("");
    const [description, setDescription] = React$3.useState("");
    const [file, setFile] = React$3.useState(null);
    const [uploaded, setUploaded] = React$3.useState(null);
    React$3.useEffect(() => {
      addPrimeStyles$1();
    }, []);
    const handleUpload = async () => {
      if (!name || !workerType || !description) {
        return alert("Заполните все обязательные поля!");
      }
      try {
        const formData = new FormData();
        formData.append("name", name);
        formData.append("worker_type", workerType);
        formData.append("description", description);
        if (file) formData.append("image", file);
        const res = await axios.post(`${window.location.origin}/api/worker`, formData, {
          headers: {
            "Content-Type": "multipart/form-data"
          }
        });
        setUploaded(res.data.image || null);
        alert("Сотрудник успешно создан!");
        window.location.href = "/admin/resources/worker";
      } catch (err) {
        console.error(err);
        alert("Ошибка: " + (err.response?.data?.message || err.message));
      }
    };

    // ✨ Editor uchun headerTemplate
    const headerTemplate = /*#__PURE__*/React__default.default.createElement("span", {
      className: "ql-formats"
    }, /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-font"
    }, /*#__PURE__*/React__default.default.createElement("option", {
      selected: true
    }), /*#__PURE__*/React__default.default.createElement("option", {
      value: "serif"
    }), /*#__PURE__*/React__default.default.createElement("option", {
      value: "monospace"
    })), /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-size"
    }, /*#__PURE__*/React__default.default.createElement("option", {
      value: "small"
    }), /*#__PURE__*/React__default.default.createElement("option", {
      selected: true
    }), /*#__PURE__*/React__default.default.createElement("option", {
      value: "large"
    }), /*#__PURE__*/React__default.default.createElement("option", {
      value: "huge"
    })), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-bold",
      "aria-label": "Bold"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-italic",
      "aria-label": "Italic"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-underline",
      "aria-label": "Underline"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-strike",
      "aria-label": "Strike"
    }), /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-header"
    }, /*#__PURE__*/React__default.default.createElement("option", {
      value: "1"
    }, "H1"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "2"
    }, "H2"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "3"
    }, "H3"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "4"
    }, "H4"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "5"
    }, "H5"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "6"
    }, "H6"), /*#__PURE__*/React__default.default.createElement("option", {
      selected: true
    }, "Normal")), /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-color"
    }), /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-background"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-list",
      value: "ordered",
      "aria-label": "Ordered List"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-list",
      value: "bullet",
      "aria-label": "Unordered List"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-indent",
      value: "-1",
      "aria-label": "Decrease Indent"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-indent",
      value: "+1",
      "aria-label": "Increase Indent"
    }), /*#__PURE__*/React__default.default.createElement("select", {
      className: "ql-align"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-blockquote",
      "aria-label": "Blockquote"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-code-block",
      "aria-label": "Code Block"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-link",
      "aria-label": "Link"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-image",
      "aria-label": "Image"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-video",
      "aria-label": "Video"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      className: "ql-clean",
      "aria-label": "Remove Formatting"
    }));
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      flex: true,
      flexDirection: "column",
      alignItems: "center",
      mt: "xl",
      width: "100%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0418\u043C\u044F \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      value: name,
      width: "100%",
      onChange: e => setName(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043C\u044F \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0422\u0438\u043F \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      value: workerType,
      width: "100%",
      onChange: e => setWorkerType(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0438\u043F \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430 (\u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440: \u0434\u0438\u0437\u0430\u0439\u043D\u0435\u0440, \u0438\u043D\u0436\u0435\u043D\u0435\u0440)"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        border: "1px solid #ced4da",
        borderRadius: "6px",
        overflow: "hidden"
      }
    }, /*#__PURE__*/React__default.default.createElement(Editor_1, {
      value: description,
      onTextChange: e => setDescription(e.htmlValue),
      headerTemplate: headerTemplate,
      style: {
        height: "250px",
        color: "white"
      }
    }))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0424\u043E\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u044F \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430"), /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        display: "inline-block",
        backgroundColor: "#007bff",
        color: "white",
        padding: "10px 18px",
        borderRadius: "6px",
        cursor: "pointer",
        fontSize: "16px",
        fontWeight: "600"
      }
    }, "\uD83D\uDCC2 \u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0444\u0430\u0439\u043B", /*#__PURE__*/React__default.default.createElement("input", {
      type: "file",
      accept: "image/*",
      onChange: e => setFile(e.target.files[0]),
      style: {
        display: "none"
      }
    })), file && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "md",
      style: {
        display: "flex",
        alignItems: "center",
        gap: "15px",
        color: "white"
      }
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        fontSize: "14px",
        fontWeight: "600"
      }
    }, file.name), /*#__PURE__*/React__default.default.createElement("img", {
      src: URL.createObjectURL(file),
      alt: "preview",
      style: {
        width: "80px",
        height: "80px",
        objectFit: "cover",
        borderRadius: "6px",
        border: "1px solid #ccc",
        color: "white"
      }
    }))), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      type: "button",
      mt: "lg",
      variant: "primary",
      onClick: e => {
        e.preventDefault();
        handleUpload();
      },
      style: {
        backgroundColor: "#0d6efd",
        padding: "12px 24px",
        fontSize: "16px",
        color: "white"
      }
    }, "\uD83D\uDE80 \u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"), uploaded && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "xl",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043D\u043E\u0435 \u0444\u043E\u0442\u043E:"), /*#__PURE__*/React__default.default.createElement("img", {
      src: uploaded,
      alt: "uploaded",
      style: {
        width: "100%",
        maxHeight: "200px",
        objectFit: "cover",
        borderRadius: "8px",
        marginTop: "10px"
      }
    })));
  };

  // PrimeReact CSS dinamik ulash
  const addPrimeStyles = () => {
    const themeUrl = "https://cdn.jsdelivr.net/npm/primereact@9.6.0/resources/themes/lara-light-blue/theme.css";
    const coreUrl = "https://cdn.jsdelivr.net/npm/primereact@9.6.0/resources/primereact.min.css";
    const iconsUrl = "https://cdn.jsdelivr.net/npm/primeicons@6.0.1/primeicons.css";
    const existing = Array.from(document.head.querySelectorAll("link")).map(l => l.href);
    if (!existing.includes(themeUrl)) {
      const link = document.createElement("link");
      link.rel = "stylesheet";
      link.href = themeUrl;
      document.head.appendChild(link);
    }
    if (!existing.includes(coreUrl)) {
      const link = document.createElement("link");
      link.rel = "stylesheet";
      link.href = coreUrl;
      document.head.appendChild(link);
    }
    if (!existing.includes(iconsUrl)) {
      const link = document.createElement("link");
      link.rel = "stylesheet";
      link.href = iconsUrl;
      document.head.appendChild(link);
    }
  };

  // Editor toolbar
  const headerTemplate = /*#__PURE__*/React__default.default.createElement("span", {
    className: "ql-formats"
  }, /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-bold"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-italic"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-underline"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-list",
    value: "ordered"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-list",
    value: "bullet"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-link"
  }), /*#__PURE__*/React__default.default.createElement("button", {
    className: "ql-clean"
  }));
  const WorkerEdit = props => {
    const recordId = props.record?.id;
    const [loading, setLoading] = React$3.useState(true);
    const [name, setName] = React$3.useState("");
    const [workerType, setWorkerType] = React$3.useState("");
    const [description, setDescription] = React$3.useState("");
    const [image, setImage] = React$3.useState(null);
    const [newImage, setNewImage] = React$3.useState(null);
    const [error, setError] = React$3.useState(null);
    React$3.useEffect(() => {
      addPrimeStyles();
      if (!recordId) {
        setError("ID mavjud emas");
        setLoading(false);
        return;
      }
      const fetchData = async () => {
        try {
          const res = await axios.get(`/api/worker/${recordId}`);
          const data = res.data;
          setName(data.name || "");
          setWorkerType(data.worker_type || "");
          setDescription(data.description || "");
          setImage(data.image || null);
        } catch (err) {
          setError("Ошибка при получении данных");
          console.error(err);
        } finally {
          setLoading(false);
        }
      };
      fetchData();
    }, [recordId]);
    const handleSave = async () => {
      try {
        const formData = new FormData();
        formData.append("name", name);
        formData.append("worker_type", workerType);
        formData.append("description", description);
        if (newImage) {
          formData.append("image", newImage);
        } else if (image) {
          formData.append("image", image);
        }
        await axios.put(`/api/worker/${recordId}`, formData, {
          headers: {
            "Content-Type": "multipart/form-data"
          }
        });
        alert("Работник успешно обновлен!");
        window.location.href = "/admin/resources/worker";
      } catch (err) {
        alert("Ошибка при сохранении:" + err.message);
        console.error(err);
      }
    };
    if (loading) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl"
    }, "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...");
    if (error) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl",
      color: "red"
    }, error);
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0418\u043C\u044F \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      value: name,
      onChange: e => setName(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043C\u044F",
      width: "100%"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0422\u0438\u043F \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      value: workerType,
      onChange: e => setWorkerType(e.target.value),
      placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0438\u043F \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430",
      width: "100%"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "70%",
      style: {
        backgroundColor: "rgba(104, 144, 156, 0.1)",
        padding: "10px",
        borderRadius: "8px",
        color: "white"
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(Editor_1, {
      value: description,
      onTextChange: e => setDescription(e.htmlValue),
      headerTemplate: headerTemplate,
      style: {
        height: "250px"
      }
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      width: "50%",
      style: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center"
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "\u0424\u043E\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u044F"), image && !newImage && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      style: {
        textAlign: "center"
      }
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: image,
      alt: "worker",
      style: {
        width: "200px",
        height: "200px",
        objectFit: "cover",
        borderRadius: "12px",
        border: "2px solid #007BFF",
        boxShadow: "0 4px 12px rgba(0,0,0,0.15)"
      }
    })), newImage && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "md",
      style: {
        textAlign: "center"
      }
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: URL.createObjectURL(newImage),
      alt: "new-worker",
      style: {
        width: "200px",
        height: "200px",
        objectFit: "cover",
        borderRadius: "12px",
        border: "2px solid #28a745",
        boxShadow: "0 4px 12px rgba(0,0,0,0.15)"
      }
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      type: "file",
      accept: "image/*",
      onChange: e => {
        if (e.target.files.length) {
          setNewImage(e.target.files[0]);
        }
      }
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "primary",
      mt: "lg",
      onClick: handleSave
    }, "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C"));
  };

  const WorkerList = () => {
    const [workers, setWorkers] = React$3.useState([]);
    const [loading, setLoading] = React$3.useState(true);
    const [selectedWorker, setSelectedWorker] = React$3.useState(null);
    const [modalOpen, setModalOpen] = React$3.useState(false);
    const navigate = reactRouterDom.useNavigate();
    const fetchWorkers = async () => {
      setLoading(true);
      try {
        const res = await axios.get("/api/worker"); // API endpoint
        setWorkers(res.data.data || []);
      } catch (err) {
        console.error("Error fetching workers:", err);
      } finally {
        setLoading(false);
      }
    };
    React$3.useEffect(() => {
      fetchWorkers();
    }, []);
    const handleDetailsClick = async id => {
      try {
        const res = await axios.get(`/api/worker/${id}`);
        setSelectedWorker(res.data);
        setModalOpen(true);
      } catch (err) {
        console.error("Error fetching worker details:", err);
      }
    };
    const handleEditClick = id => {
      navigate(`/admin/resources/worker/records/${id}/edit`);
    };
    if (loading) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        padding: "xl"
      }, "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...");
    }
    const leftCellStyle = {
      fontWeight: "bold",
      borderRight: "2px solid #ccc"
    };
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "grey",
      padding: "xl"
    }, /*#__PURE__*/React__default.default.createElement("h2", {
      style: {
        marginBottom: 20
      }
    }, "\u0420\u0430\u0431\u043E\u0442\u043D\u0438\u043A\u0438"), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableHead, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "ID"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0418\u043C\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0422\u0438\u043F \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430"), " ", /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0424\u043E\u0442\u043E"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0414\u0430\u0442\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, "\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044F"))), /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, workers.length === 0 ? /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      colSpan: 7,
      style: {
        textAlign: "center"
      }
    }, "\u041D\u0435\u0442 \u0434\u0430\u043D\u043D\u044B\u0445")) : workers.map(worker => /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
      key: worker.id
    }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, worker.id), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, worker.name), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, worker.worker_type), " ", /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, worker.image ? /*#__PURE__*/React__default.default.createElement("img", {
      src: worker.image,
      alt: worker.name,
      style: {
        height: 40,
        borderRadius: 4
      }
    }) : /*#__PURE__*/React__default.default.createElement("span", null, "\u2014")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, worker.description?.slice(0, 50), "..."), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, new Date(worker.createdAt).toLocaleString()), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      size: "sm",
      variant: "contained",
      onClick: () => handleDetailsClick(worker.id),
      style: {
        marginRight: "8px"
      }
    }, "\u041F\u043E\u0434\u0440\u043E\u0431\u043D\u0435\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      size: "sm",
      variant: "primary",
      onClick: () => handleEditClick(worker.id)
    }, "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C")))))), modalOpen && selectedWorker && /*#__PURE__*/React__default.default.createElement(designSystem.Modal, {
      open: modalOpen,
      onClose: () => setModalOpen(false),
      width: 700
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      padding: "xl",
      style: {
        maxHeight: "70vh",
        overflowY: "auto"
      }
    }, /*#__PURE__*/React__default.default.createElement("h1", {
      style: {
        marginBottom: 20
      }
    }, "\uD83D\uDC77 \u0414\u0435\u0442\u0430\u043B\u0438 \u0440\u0430\u0431\u043E\u0442\u043D\u0438\u043A\u0430 #", selectedWorker.id), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableBody, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0418\u043C\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, selectedWorker.name)), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0422\u0438\u043F \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430"), " ", /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, selectedWorker.worker_type)), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0424\u043E\u0442\u043E"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, selectedWorker.image ? /*#__PURE__*/React__default.default.createElement("img", {
      src: selectedWorker.image,
      alt: selectedWorker.name,
      style: {
        maxWidth: 150,
        borderRadius: 6
      }
    }) : /*#__PURE__*/React__default.default.createElement("span", null, "\u2014"))), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: selectedWorker.description
      }
    }))), /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
      style: leftCellStyle
    }, "\u0414\u0430\u0442\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, new Date(selectedWorker.createdAt).toLocaleString())))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      display: "flex",
      justifyContent: "flex-end",
      marginTop: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      variant: "primary",
      size: "sm",
      onClick: () => setModalOpen(false)
    }, "\u0417\u0430\u043A\u0440\u044B\u0442\u044C")))));
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.customDashboard = CustomDashboard;
  AdminJS.UserComponents.MultiFileUpload = BlogCreate;
  AdminJS.UserComponents.ShowFile = ShowComponent;
  AdminJS.UserComponents.ShowFileCatalog = CatalogShow;
  AdminJS.UserComponents.PropertyTable = PropertyTable;
  AdminJS.UserComponents.orderList = CustomOrderList;
  AdminJS.UserComponents.siteList = SiteList;
  AdminJS.UserComponents.siteEdit = SiteEditComponent;
  AdminJS.UserComponents.sitesByID = OrderShow;
  AdminJS.UserComponents.blogList = BlogList;
  AdminJS.UserComponents.blogEdit = BlogEditImages;
  AdminJS.UserComponents.catalogList = CatalogList;
  AdminJS.UserComponents.catalogDetails = CatalogDetails;
  AdminJS.UserComponents.MultiFileCatalog = CatalogCreate;
  AdminJS.UserComponents.editCatalog = CatalogEdit;
  AdminJS.UserComponents.aboutPage = About;
  AdminJS.UserComponents.workerCreate = WorkerCreate;
  AdminJS.UserComponents.workerEdit = WorkerEdit;
  AdminJS.UserComponents.workerlist = WorkerList;

})(React, AdminJSDesignSystem, ReactRouterDOM);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
